{"version":3,"file":"pages/index.js","sources":["webpack:///./components/FuelControl.vue?f8c7","webpack:///./components/FuelControl.vue","webpack:///./components/FuelControl.vue?0958","webpack:///./components/FuelControl.vue?3d31","webpack:///./components/SelectOption.vue?496b","webpack:///./node_modules/d3-array/src/ascending.js","webpack:///./components/SelectOption.vue?03c5","webpack:///./components/SelectOption.vue?ac28","webpack:///./node_modules/d3-array/src/number.js","webpack:///./components/FuelProps.vue?1dce","webpack:///./components/FuelProps.vue","webpack:///./components/FuelProps.vue?fdd0","webpack:///./components/FuelProps.vue?e255","webpack:///./components/InputProps.vue?91fa","webpack:///./components/InputProps.vue","webpack:///./components/InputProps.vue?3f35","webpack:///./components/InputProps.vue?9281","webpack:///./components/SelectOption.vue?461f","webpack:///./components/SelectOption.vue","webpack:///./components/SelectOption.vue?a06d","webpack:///./components/SelectOption.vue?32b5","webpack:///./components/BoxPlot.vue?0a47","webpack:///./components/BoxPlot.vue","webpack:///./components/BoxPlot.vue?becd","webpack:///./components/BoxPlot.vue?81cb","webpack:///./node_modules/@cbevins/fire-behavior-simulator/dist/bundle.cjs.js","webpack:///./pages/index.vue?e16f","webpack:///./assets/nodeProps.js","webpack:///./node_modules/d3-array/src/min.js","webpack:///./node_modules/d3-array/src/max.js","webpack:///./node_modules/d3-array/src/quickselect.js","webpack:///./node_modules/d3-array/src/quantile.js","webpack:///./node_modules/d3-array/src/median.js","webpack:///./pages/index.vue","webpack:///./pages/index.vue?b1ff","webpack:///./pages/index.vue?b245"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"block\"},[_c('b-field',{staticStyle:{\"width\":\"100%\"},attrs:{\"label\":_vm.title}},[_c('div',{staticClass:\"level\"},[_c('div',{staticClass:\"level-left\",staticStyle:{\"width\":\"80%\"}},[_c('b-slider',{attrs:{\"value\":_vm.value,\"max\":_vm.max,\"step\":_vm.step,\"indicator\":\"\",\"lazy\":\"\"},on:{\"change\":function($event){return _vm.passValue($event)}}})],1),_vm._v(\" \"),_c('div',{staticClass:\"level-right\",staticStyle:{\"width\":\"20%\"}},[_c('b-switch',{on:{\"input\":function($event){return _vm.passEvent($event)}},model:{value:(_vm.isDisabled),callback:function ($$v) {_vm.isDisabled=$$v},expression:\"isDisabled\"}}),_vm._v(\"\\n        Range\\n      \")],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: [Number, Array],\n      required: true\n    },\n    max: {\n      type: Number,\n      required: true\n    },\n    step: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data () {\n    return {\n      isDisabled: false\n    }\n  },\n\n  created () {\n    this.checkDisabled()\n  },\n\n  methods: {\n\n    checkDisabled () {\n      if (Array.isArray(this.value)) {\n        this.isDisabled = true\n      } else {\n        this.isDisabled = false\n      }\n    },\n\n    passValue (payload) {\n      this.$emit('change', payload)\n    },\n\n    passEvent (payload) {\n      console.log('switch', this.isDisabled)\n      this.$emit('input', this.isDisabled)\n    }\n\n  }\n}\n\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./FuelControl.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./FuelControl.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./FuelControl.vue?vue&type=template&id=2d2855be&\"\nimport script from \"./FuelControl.vue?vue&type=script&lang=js&\"\nexport * from \"./FuelControl.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"e94d189c\"\n  \n)\n\nexport default component.exports","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--3-oneOf-1-2!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./SelectOption.vue?vue&type=style&index=0&lang=css&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to SSR context\nvar add = require(\"!../node_modules/vue-style-loader/lib/addStylesServer.js\").default\nmodule.exports.__inject__ = function (context) {\n  add(\"c0b3cc40\", content, true, context)\n};","export default function(a, b) {\n  return a == null || b == null ? NaN\n    : a < b ? -1\n    : a > b ? 1\n    : a >= b ? 0\n    : NaN;\n}\n","export * from \"-!../node_modules/vue-style-loader/index.js??ref--3-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--3-oneOf-1-2!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./SelectOption.vue?vue&type=style&index=0&lang=css&\"","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(false);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".field{display:inline-block}\", \"\"]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___;\n","export default function(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',[_c('b-collapse',{staticClass:\"card\",attrs:{\"open\":false,\"animation\":\"slide\",\"aria-id\":\"contentIdForA11y3\"},scopedSlots:_vm._u([{key:\"trigger\",fn:function(props){return [_c('div',{staticClass:\"card-header\",attrs:{\"role\":\"button\",\"aria-controls\":\"contentIdForA11y3\"}},[_c('p',{staticClass:\"card-header-title\"},[_vm._v(\"\\n          \"+_vm._s(_vm.getFuelModelLabel)+\", \\\"\"+_vm._s(_vm.fuelModelCode)+\"\\\"\\n        \")]),_vm._v(\" \"),_c('a',{staticClass:\"card-header-icon\"},[_c('b-icon',{attrs:{\"icon\":props.open ? 'menu-down' : 'menu-up'}})],1)])]}}])},[_vm._v(\" \"),_c('div',{staticClass:\"card-content\"},[_c('div',{staticClass:\"content\"},[_c('b-button',{attrs:{\"type\":\"is-danger\",\"icon-left\":\"delete\"},on:{\"click\":function($event){return _vm.removeFuel(_vm.fuelModelCode)}}},[_vm._v(\"\\n          Remove\\n        \")])],1),_vm._v(\" \"),_c('div',{staticClass:\"block\"},_vm._l((_vm.getFuelNodes),function(ref){\nvar label = ref.label;\nvar catalogParam = ref.catalogParam;\nvar max = ref.max;\nvar step = ref.step;\nreturn _c('fuel-control',{key:label+_vm.fuelModelCode,attrs:{\"title\":label,\"value\":_vm.getValue(catalogParam),\"max\":max,\"step\":step,\"indicator\":\"\",\"lazy\":\"\"},on:{\"change\":function($event){return _vm.setValue(catalogParam, $event)},\"input\":function($event){return _vm.triggerArray(catalogParam, $event)}}})}),1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { mapGetters } from 'vuex'\nimport FuelControl from '~/components/FuelControl'\n\nexport default {\n\n  components: {\n    FuelControl\n  },\n\n  props: {\n    fuelModelCode: {\n      type: String,\n      required: true\n    },\n\n    nodeProps: {\n      type: Array,\n      required: true\n    }\n  },\n\n  data () {\n    return {\n      fuelModel: {}\n    }\n  },\n\n  computed: {\n\n    ...mapGetters({\n      fuelMod: 'selector/fuelMod'\n    }),\n\n    getFuelModelLabel () {\n      return this.fuelMod(this.fuelModelCode).label\n    },\n\n    getFuelNodes () {\n      return this.nodeProps.filter(item => item.used === true)\n    }\n  },\n\n  methods: {\n\n    getArrayMode (geneLabel) {\n      const val = this.getValue(geneLabel)\n      if (val.length > 1) {\n        return true\n      } else {\n        return false\n      }\n    },\n\n    getValue (param) {\n      return this.fuelMod(this.fuelModelCode)[param]\n    },\n\n    getValueConvert (param) {\n      const val = this.fuelMod(this.fuelModelCode)[param]\n      if (param === 'deadHeat' || param === 'liveHeat') {\n        if (Array.isArray(val)) {\n          const valCopy = [...val]\n          valCopy.forEach((element, index) => {\n            valCopy[index] = Math.round(element / 1000)\n          })\n          return valCopy\n        } else {\n          console.log('gete')\n          return Math.round(val / 1000)\n        }\n      }\n    },\n\n    removeFuel (payload) {\n      console.log('removing fuel', payload)\n      this.$store.dispatch('selector/removeSelectedFuel', payload)\n    },\n\n    setValue (param, payload) {\n      this.$store.dispatch('selector/updateFuelProp', { fuel: this.fuelModelCode, prop: param, value: payload })\n      this.$emit('change')\n    },\n\n    setValueConvert (param, payload) {\n      if (param === 'deadHeat' || param === 'liveHeat') {\n        if (Array.isArray(payload)) {\n          const copyPayload = [...payload]\n          copyPayload.forEach((element, index) => {\n            copyPayload[index] = Math.round(element * 1000)\n          })\n          this.$store.dispatch('selector/updateFuelProp', { fuel: this.fuelModelCode, prop: param, value: copyPayload })\n        } else {\n          const copyPayload = payload.valueOf() * 1000\n          this.$store.dispatch('selector/updateFuelProp', { fuel: this.fuelModelCode, prop: param, value: copyPayload })\n        }\n      }\n      this.$emit('change')\n    },\n\n    triggerArray (param, payload) {\n      console.log('trigger', param, payload)\n      if (payload === true) {\n        const orig = this.getValue(param)\n        let val = []\n        console.log('trigger before', orig)\n        val = [orig, orig * 1.1]\n        console.log('trigger after', val)\n        this.setValue(param, val)\n      } else {\n        const val = [...this.getValue(param)]\n        this.setValue(param, val[0])\n      }\n    }\n  }\n}\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./FuelProps.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./FuelProps.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./FuelProps.vue?vue&type=template&id=5c1df33e&\"\nimport script from \"./FuelProps.vue?vue&type=script&lang=js&\"\nexport * from \"./FuelProps.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"0715fcf6\"\n  \n)\n\nexport default component.exports\n\n/* nuxt-component-imports */\ninstallComponents(component, {FuelControl: require('/home/tadas/behave/components/FuelControl.vue').default})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',[_c('b-collapse',{staticClass:\"card\",attrs:{\"open\":true,\"animation\":\"slide\",\"aria-id\":\"contentIdForA21y3\"},scopedSlots:_vm._u([{key:\"trigger\",fn:function(props){return [_c('div',{staticClass:\"card-header\",attrs:{\"role\":\"button\",\"aria-controls\":\"contentIdForA21y3\"}},[_c('p',{staticClass:\"card-header-title\"},[_vm._v(\"\\n          Site inputs\\n        \")]),_vm._v(\" \"),_c('a',{staticClass:\"card-header-icon\"},[_c('b-icon',{attrs:{\"icon\":props.open ? 'menu-down' : 'menu-up'}})],1)])]}}])},[_vm._v(\" \"),_c('div',{staticClass:\"card-content\"},[_c('div',{staticClass:\"block\"},_vm._l((_vm.getInputNodes),function(ref){\nvar label = ref.label;\nvar geneLabel = ref.geneLabel;\nvar max = ref.max;\nvar step = ref.step;\nreturn _c('fuel-control',{key:label,attrs:{\"title\":label,\"value\":_vm.getValue(geneLabel),\"max\":max,\"step\":step,\"indicator\":\"\",\"lazy\":\"\"},on:{\"change\":function($event){return _vm.updateSiteInput(geneLabel, $event)},\"input\":function($event){return _vm.triggerArray(geneLabel, $event)}}})}),1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { mapGetters } from 'vuex'\nimport FuelControl from '~/components/FuelControl'\n\nexport default {\n\n  components: {\n    FuelControl\n  },\n\n  props: {\n    nodeProps: {\n      type: Array,\n      required: true\n    }\n  },\n\n  data () {\n    return {\n    }\n  },\n\n  computed: {\n\n    ...mapGetters({\n      siteInput: 'selector/siteInput'\n    }),\n\n    getInputNodes () {\n      return this.nodeProps.filter(item => item.used === true)\n    }\n  },\n\n  methods: {\n\n    getValue (param) {\n      return this.siteInput(param)\n    },\n\n    updateSiteInput (geneLabel, payload) {\n      this.$store.dispatch('selector/updateSiteInputsProp', { geneLabel, payload })\n      this.$emit('change')\n    },\n\n    triggerArray (param, payload) {\n      console.log('trigger', param, payload)\n      if (payload === true) {\n        const orig = this.getValue(param)\n        let val = []\n        console.log('trigger before', val)\n        val = [orig, orig * 1.1]\n        console.log('trigger after', val)\n        this.updateSiteInput(param, val)\n      } else {\n        const val = [...this.getValue(param)]\n        this.updateSiteInput(param, val[0])\n      }\n    }\n  }\n}\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./InputProps.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./InputProps.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./InputProps.vue?vue&type=template&id=31d0c044&\"\nimport script from \"./InputProps.vue?vue&type=script&lang=js&\"\nexport * from \"./InputProps.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"253961aa\"\n  \n)\n\nexport default component.exports\n\n/* nuxt-component-imports */\ninstallComponents(component, {FuelControl: require('/home/tadas/behave/components/FuelControl.vue').default})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-field',[_c('b-select',{attrs:{\"placeholder\":\"Select fuel\"},on:{\"input\":function($event){return _vm.changeOption($event)}},model:{value:(_vm.selOption),callback:function ($$v) {_vm.selOption=$$v},expression:\"selOption\"}},_vm._l((_vm.options),function(option,index){return _c('option',{key:index,domProps:{\"value\":option}},[_vm._v(\"\\n      \"+_vm._s(option)+\"\\n    \")])}),0)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport vClickOutside from 'v-click-outside'\n\nexport default {\n  directives: {\n    clickOutside: vClickOutside.directive\n  },\n\n  props: {\n    options: {\n      type: Array,\n      required: true\n    },\n    selected: {\n      type: String,\n      required: true\n    }\n  },\n\n  data () {\n    return {\n      selOption: this.selected,\n      isActive: false\n    }\n  },\n\n  watch: {\n    // whenever selected changes, this function will run\n    selected (newSelected, oldSelected) {\n      this.setValue(newSelected)\n    }\n  },\n\n  mounted () {\n    console.log('selector mounted')\n    console.log(this.selOption)\n  },\n\n  methods: {\n\n    hide () {\n      if (this.isActive) {\n        this.isActive = false\n      }\n    },\n\n    changeOption (option) {\n      console.log('option changed', option)\n      this.$emit('updateOption', option)\n    },\n\n    setValue (payload) {\n      this.selOption = payload\n    }\n  }\n}\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./SelectOption.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./SelectOption.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./SelectOption.vue?vue&type=template&id=7bf4dee2&\"\nimport script from \"./SelectOption.vue?vue&type=script&lang=js&\"\nexport * from \"./SelectOption.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./SelectOption.vue?vue&type=style&index=0&lang=css&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"1ccf4194\"\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('client-only',[_c('div',[_c('VueApexCharts',{staticStyle:{\"width\":\"100%\"},attrs:{\"type\":\"boxPlot\",\"options\":_vm.chartOptions,\"series\":_vm.dataset,\"title\":_vm.title}})],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n\n  components: {\n    VueApexCharts: () => import('vue-apexcharts')\n  },\n\n  props: {\n    dataset: {\n      type: Array,\n      required: true\n    },\n    title: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data () {\n    return {\n      chartOptions: {\n        chart: {\n          id: 'boxplot-1',\n          type: 'boxPlot',\n          height: 350\n        },\n        yaxis: {\n          decimalsInFloat: 2\n        },\n        tooltip: {\n          enebled: false,\n          x: {\n            show: true\n          },\n          y: {\n            formatter: (value) => {\n              return value.toFixed(2)\n            }\n          }\n        },\n        plotOptions: {\n          boxPlot: {\n            colors: {\n              upper: '#5C4742',\n              lower: '#A5978B'\n            }\n          }\n\n        }\n      }\n    }\n  },\n  created () {\n    this.chartOptions.title = this.title\n  },\n\n  methods: {\n    getChartOptions () {\n      return this.chartOptions\n    }\n  }\n}\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./BoxPlot.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./BoxPlot.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BoxPlot.vue?vue&type=template&id=68ee96de&\"\nimport script from \"./BoxPlot.vue?vue&type=script&lang=js&\"\nexport * from \"./BoxPlot.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"0220ed92\"\n  \n)\n\nexport default component.exports","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * @file Various input string filters\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\nfunction filterInteger(str) {\n  if (typeof str !== 'string') return '';\n  let filtered = '';\n  let decimal = false;\n\n  for (let idx = 0; idx <= str.length; idx += 1) {\n    const c = str.charAt(idx);\n\n    if (c >= '0' && c <= '9' && !decimal) {\n      filtered += c;\n    } else if (c === '-' && filtered === '' && !decimal) {\n      // first valid char\n      filtered += c;\n    } else if (c === '.') {\n      decimal = true;\n    }\n  }\n\n  if (filtered === '-') filtered = '';\n  return filtered;\n}\nfunction filterNumeric(str) {\n  if (typeof str !== 'string') return '';\n  let filtered = '';\n  let decimal = false;\n  let exponent = false;\n\n  for (let idx = 0; idx <= str.length; idx += 1) {\n    const c = str.charAt(idx);\n\n    if (c >= '0' && c <= '9') {\n      filtered += c;\n    } else if (c === '.' && !decimal) {\n      filtered += c;\n      decimal = true;\n    } else if (c === 'e' && !exponent) {\n      filtered += c;\n      exponent = true;\n    } else if (c === '-') {\n      if (filtered === '') {\n        // first valid char\n        filtered += c;\n      } else if (filtered.substr(filtered.length - 1) === 'e') {\n        // last valid char is 'e'\n        filtered += c;\n      }\n    }\n  }\n\n  if (filtered.charAt(0) === 'e' || filtered.substr(0, 2) === '-e') {\n    filtered = '';\n  } // console.log(`'${str}' => '${filtered}'`)\n\n\n  return filtered;\n}\nfunction filterNonNegativeNumeric(str) {\n  let filtered = filterNumeric(str);\n\n  if (filtered[0] === '-') {\n    filtered = filtered.substring(1);\n  }\n\n  return filtered;\n}\nfunction keyLabel(key) {\n  let filtered = '';\n  let prev = 'separator';\n\n  for (let idx = 0; idx < key.length; idx += 1) {\n    const c = key.charAt(idx);\n\n    if (c === '.' || c === '_') {\n      filtered += ' '; // replace separator with a space\n\n      prev = 'separator';\n    } else if (c >= '0' && c <= '9') {\n      if (prev !== 'digit') {\n        // start of a number\n        if (prev !== 'separator') filtered += ' '; // insert a space\n      }\n\n      filtered += c;\n      prev = 'digit';\n    } else if (c >= 'a' && c <= 'z') {\n      if (prev === 'digit') filtered += ' ';\n\n      if (prev === 'separator' || prev === 'digit') {\n        filtered += c.toUpperCase();\n      } else {\n        filtered += c;\n      }\n\n      prev = 'letter';\n    } else if (c >= 'A' && c <= 'Z') {\n      if (prev !== 'separator') filtered += ' ';\n      filtered += c;\n      prev = 'letter';\n    } else if (c === '-') {\n      filtered += c;\n      prev = 'letter';\n    } else {\n      filtered += c;\n      prev = 'letter';\n    }\n  }\n\n  return filtered;\n}\n\n/**\n * @file DagNode class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\nclass DagNode {\n  constructor(geneRef, variantRef, initialValue) {\n    this._dag = {\n      _producers: [],\n      // array of references to producer DagNodes\n      _consumers: [],\n      // aray of references to consumer DagNodes\n      _depth: 0,\n      _order: 0\n    };\n    this._gene = geneRef;\n    this._is = {\n      _config: variantRef.key().startsWith('Config'),\n      _enabled: true,\n      _input: false,\n      _required: false,\n      _selected: false\n    };\n    this._update = {\n      _config: null,\n      // reference to the Config DagNode that activated this updater pathway\n      _configs: [],\n      // array of all Config nodes referenced by this node's genes\n      _method: null,\n      // reference to a function that returns the current DagNode value\n      _parms: [] // parameters for the arguments to the function that returns the current DagNode value\n\n    };\n    this._value = initialValue;\n    this._variant = variantRef;\n  } // accessors\n  // consumers () { return this._dag._consumers }\n\n\n  depth() {\n    return this._dag._depth;\n  }\n\n  displayString() {\n    return this._variant.displayString(this._value);\n  }\n\n  displayUnits() {\n    return this._variant.displayUnits();\n  }\n\n  displayValue() {\n    return this._variant.displayValue(this._value);\n  }\n\n  index() {\n    return this._gene[0];\n  }\n\n  isConfig() {\n    return this._is._config;\n  }\n\n  isEnabled() {\n    return this._is._enabled;\n  }\n\n  isInput() {\n    return this._is._input;\n  }\n\n  isRequired() {\n    return this._is._required;\n  }\n\n  isSelected() {\n    return this._is._selected;\n  }\n\n  key() {\n    return this._gene[1];\n  }\n\n  label() {\n    return keyLabel(this.key());\n  }\n\n  method() {\n    return this._update._method;\n  }\n\n  nativeUnits() {\n    return this._variant.nativeUnits();\n  }\n\n  order() {\n    return this._dag._order;\n  } // parms () { return this._update._parms }\n  // producers () { return this._dag._producers }\n\n\n  updater(idx) {\n    return this._gene[3][idx];\n  }\n\n  updaters() {\n    return this._gene[3];\n  }\n\n  value() {\n    return this._value;\n  }\n\n  variant() {\n    return this._variant;\n  } // isValidValue (value) { return this._variant.isValidNativeValue(value) }\n  // mutators\n\n\n  reset() {\n    this._dag = {\n      _producers: [],\n      // array of references to producer DagNodes\n      _consumers: [],\n      // aray of references to consumer DagNodes\n      _depth: 0,\n      _order: 0\n    };\n    this._is._input = false;\n    this._is._required = false;\n  }\n\n  setEnabled(bool) {\n    this._is._enabled = bool;\n  } // setValue(value) { this._value = value }\n  // Updates the Node's value by calling its update._method and storing the result.\n\n\n  updateValue() {\n    const args = []; // NOTE: This is the most heavily used function in the entire system.\n    // DO NOT use this._update._args.map() to iterate over method parms,\n    // as it increases execution time time by 50% !!!\n\n    for (let i = 0; i < this._update._parms.length; i++) {\n      const [isLiteral, parm] = this._update._parms[i];\n      args.push(isLiteral ? parm : parm._value);\n    }\n\n    this._value = this._update._method.apply(this, args);\n  }\n\n}\n\n/**\n * @file Shared, safe math functions\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\nconst divide = (...numbers) => numbers.reduce((a, b) => b === 0 ? 0 : a / b, numbers[0] * numbers[0]);\nconst fraction = number => Math.max(0, Math.min(1, number));\nconst greaterThan = (a, b) => a > b;\nconst multiply = (...numbers) => numbers.reduce((a, b) => a * b, 1);\nconst or = (a, b) => a || b;\nconst positive = number => Math.max(0, number);\nconst subtract = (...numbers) => numbers.reduce((a, b) => a - b, 2 * numbers[0]);\nconst sum$1 = (...numbers) => numbers.reduce((a, b) => a + b, 0);\nconst sumOfProducts = (...numbers) => {\n  const mid = Math.floor(numbers.length / 2);\n  const a1 = numbers.slice(0, mid);\n  return a1.reduce((acc, number, idx) => acc + a1[idx] * numbers[mid + idx], 0);\n};\n\nvar Calc = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  divide: divide,\n  fraction: fraction,\n  greaterThan: greaterThan,\n  multiply: multiply,\n  or: or,\n  positive: positive,\n  subtract: subtract,\n  sum: sum$1,\n  sumOfProducts: sumOfProducts\n});\n\n/**\n * @file Standard Behave fuel model equations as implemented by BehavePlus v6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\nfunction curedHerbFraction(liveHerbMc) {\n  const fraction$1 = 1.333 - 1.11 * liveHerbMc;\n  return fraction(fraction$1);\n}\nfunction deadHerbLoad(totalHerbLoad, curedHerbFraction) {\n  return totalHerbLoad * curedHerbFraction;\n}\nfunction liveHerbLoad$1(totalHerbLoad, curedHerbFraction) {\n  return totalHerbLoad * (1 - curedHerbFraction);\n}\n\nvar BehaveFuel = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  curedHerbFraction: curedHerbFraction,\n  deadHerbLoad: deadHerbLoad,\n  liveHerbLoad: liveHerbLoad$1\n});\n\n/**\r\n * @file Canopy functions as implemented by BehavePlus v6.\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n */\n// is filled with tree crowns (division by 3 assumes conical crown shapes).\n\nfunction crownFill(cover, cratio) {\n  return fraction(cratio) * fraction(cover) / 3;\n} // Crown length\n\nfunction crownLength(baseHt, ht) {\n  return positive(ht - baseHt);\n} // // Crown length from crown ratio and canopy height\n// export function crownLengthFromRatio(crownRatio, ht) {\n//   return crownRatio * ht\n// }\n// Crown ratio\n\nfunction crownRatio(length, ht) {\n  return fraction(divide(length, ht));\n} // Canopy fuel load\n\nfunction fuelLoad(bulk, length) {\n  return positive(bulk * length);\n} // Canopy heat per unit area\n\nfunction heatPerUnitArea$1(load, heat) {\n  return positive(load * heat);\n} // Returns true if canopy effectively shelters the fuel from wind\n\nfunction sheltersFuelFromWind(cover, ht, fill) {\n  return cover >= 0.01 && fill >= 0.05 && ht >= 6;\n} // Canopy induced midflame windspeed adjustment factor\n\nfunction windSpeedAdjustmentFactor$1(cover, ht, fill) {\n  let waf = 1;\n\n  if (sheltersFuelFromWind(cover, ht, fill)) {\n    waf = 0.555 / (Math.sqrt(fill * ht) * Math.log((20 + 0.36 * ht) / (0.13 * ht)));\n  }\n\n  return fraction(waf);\n}\n\nvar Canopy = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  crownFill: crownFill,\n  crownLength: crownLength,\n  crownRatio: crownRatio,\n  fuelLoad: fuelLoad,\n  heatPerUnitArea: heatPerUnitArea$1,\n  sheltersFuelFromWind: sheltersFuelFromWind,\n  windSpeedAdjustmentFactor: windSpeedAdjustmentFactor$1\n});\n\n/**\n * @file Chaparral dynamic fuel equations as described by Rothermel and Philpot (1973)\n * and as implemented by BehavePlus V6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\nconst TypeChamise = 'chamise';\nconst TypeMixedBrush = 'mixedBrush';\nconst Types$1 = [TypeChamise, TypeMixedBrush];\n/**\n * Estimates the chaparral age (years since last burned)\n * from the chaparral fuel depth and fuel type.\n *\n *  @param {number} depth - Chaparral fuel depth (ft+1)\n *  @param {string} type -  Chaparral fuel type ['chamise' | 'mixedBrush']\n *  @returns {number} Estimated chaparral age (years since last burned).\n */\n\nfunction age(depth, type) {\n  if (type === TypeChamise) {\n    return Math.exp(3.912023 * Math.sqrt(depth / 7.5));\n  } // else  (type === TypeMixedBrush) {\n\n\n  return Math.exp(3.912023 * Math.sqrt(depth / 10));\n}\n/**\n * Estimates the chaparral fuel depth from its age and type.\n *\n * @param {number} age\n * @param {string} type  One of 'chamise' or 'mixedBrush'\n * @returns {number} Estimated fuel bed depth (ft+1)\n */\n\nfunction fuelDepth$1(age, type) {\n  // Prevent values of age < 1 from increasing the depth!\n  const x = Math.log(Math.max(age, 1.1)) / 3.912023;\n  return type === TypeChamise ? 7.5 * x * x : 10 * x * x; // type === TypeMixedBrush\n}\n/**\n * @returns {string[]} Array of valid chaparral fuel types.\n */\n\nfunction fuelTypes$1() {\n  return Types$1;\n}\n/**\n *  Estimates the total chaparral fuel load from age and type.\n *\n * NOTE - Rothermel & Philpot (1973) used a factor of 0.0315 for chamise age,\n * while Cohen used 0.0347 in FIRECAST.  According to Faith Ann Heinsch:\n * <i>We are going to use Cohen’s calculation from FIRECAST. The change has to do\n * with the fact that we are creating a proxy age from fuel bed depth rather than\n * using an entered age. He had to make some corrections for that assumption.</i>\n *\n *  @param {number} age - Chaparral age (years since last burned)\n *  @param {string} type -  Chaparral fuel type ['chamise' | 'mixedBrush']\n *  @returns {number} Total fuel load (lb+1 ft-2)\n */\n\nfunction totalLoad(age, type) {\n  // Total load in tons per acre\n  let tpa = 0;\n\n  if (type === TypeChamise) {\n    // const chamise1 = 0.0315   // Chamise load factor from Rothermel & Philpot (1973)\n    const chamise2 = 0.0347; // Chamise load factor from Cohen's FIRECAST code\n\n    tpa = age / (1.4459 + chamise2 * age);\n  } else {\n    // if (type === TypeMixedBrush) {\n    tpa = age / (0.4849 + 0.017 * age);\n  } // Return total load in lb/ft2\n\n\n  return tpa * 2000 / 43560;\n}\n/**\n * @returns {number} The dead fuel moisture content of extinction (fraction)\n * as used in BehavePlus V6.\n */\n\nfunction deadExtinctionMoisture() {\n  return 0.3;\n}\n/**\n * Dead fuel fraction from age for AVERAGE mortality level\n *\n * @param {number} age - Chaparral age (years since last burned)\n * @returns {number} Dead fuel fraction assuming avereage mortality.\n */\n\nfunction deadFractionAverageMortality(age) {\n  return fraction(0.0694 * Math.exp(0.0402 * age));\n}\n/**\n * Dead fuel fraction from age for SEVERE mortality level\n *\n * @param {number} age - Chaparral age (years since last burned)\n * @returns {number} Dead fuel fraction assuming severe mortality.\n */\n\nfunction deadFractionSevereMortality(age) {\n  return fraction(0.1094 * Math.exp(0.0385 * age));\n}\n/**\n *  Estimates chaparral dead fuel load.\n *\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} Chaparral dead fuel load (lb+1 ft-2)\n */\n\nfunction deadLoad(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * deadFuelFraction);\n}\n/**\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} The load (lb+1 ft-2)\n * of the dead fine (0 to 0.25 inch diameter) chaparral stem wood\n * as per Rothermel and Philpot 1973 Figure 1.\n */\n\nfunction deadClass1Load(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * 0.347 * deadFuelFraction);\n}\n/**\n *  Estimates chaparral small (0.25-0.5 inch diameter) dead fuel load.\n *\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} The load (lb+1 ft-2)\n * of the dead small (0.25 to 0.5 inch diameter) chaparral stem wood\n * as per Rothermel and Philpot 1973 Figure 1.\n */\n\nfunction deadClass2Load(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * 0.364 * deadFuelFraction);\n}\n/**\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} The load (lb+1 ft-2)\n * of the dead medium (0.5 to 1 inch diameter) chaparral stem wood\n * as per Rothermel and Philpot (1973) Figure 1.\n */\n\nfunction deadClass3Load(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * 0.207 * deadFuelFraction);\n}\n/**\n * Estimates chaparral large (1 to 3 inch diameter) dead fuel load.\n *\n * Note that the factor of 0.082 varies from the Rothermel & Philpot\n * Figure 1 value of .085, because their factors totaled 1.03 instead of 1.\n *\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} The load (lb+1 ft-2)\n * of the dead large (1 to 3 inch diameter) chaparral stem wood\n * as per Rothermel and Philpot (1973) Figure 1.\n */\n\nfunction deadClass4Load(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * 0.082 * deadFuelFraction);\n}\n/**\n *  Estimates chaparral live fuel load.\n *\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} Chaparral live fuel load (lb+1 ft-2)\n */\n\nfunction liveLoad(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * (1 - deadFuelFraction));\n}\n/**\n *  Estimates live fine (0 to 0.25 inch diameter) chaparral stem wood fuel load.\n *\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} The load (lb+1 ft-2)\n * of the live fine (0 to 0.25 inch diameter) chaparral stem wood\n * as per Rothermel and Philpot (1973) Figure 1.\n */\n\nfunction liveClass1Load(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * (0.2416 - 0.256 * deadFuelFraction));\n}\n/**\n *  Estimates live small (0.25 to 0.5 inch diameter) chaparral stem wood fuel load.\n *\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} The load (lb+1 ft-2)\n * of the live small (0.25 t0 0.5 inch diameter) chaparral stem wood\n * as per Rothermel and Philpot (1973) Figure 1.\n */\n\nfunction liveClass2Load(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * (0.1918 - 0.256 * deadFuelFraction));\n}\n/**\n *  Estimates live medium (0.5 to 1 inch diameter) chaparral stem wood fuel load.\n *\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} The load (lb+1 ft-2)\n * of the live medium (0.5 to 1 inch diameter) chaparral stem wood\n * as per Rothermel and Philpot (1973) Figure 1.\n */\n\nfunction liveClass3Load(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * (0.2648 - 0.05 * deadFuelFraction));\n}\n/**\n *  Estimates live large (1 to 3 inch diameter) chaparral stem wood fuel load.\n *\n * Modified so that thisLoad = live load - (liveLeaf + liveFine + liveSmall + liveMedium)\n *\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} The load (lb+1 ft-2)\n * of the live large (1 to 3 inch diameter) chaparral stem wood\n * as per Rothermel and Philpot (1973) Figure 1.\n */\n\nfunction liveClass4Load(totalFuelLoad, deadFuelFraction) {\n  const liveLoad = totalFuelLoad * (1 - deadFuelFraction);\n  const l1 = liveClass1Load(totalFuelLoad, deadFuelFraction);\n  const l2 = liveClass2Load(totalFuelLoad, deadFuelFraction);\n  const l3 = liveClass3Load(totalFuelLoad, deadFuelFraction);\n  const l5 = liveClass5Load(totalFuelLoad, deadFuelFraction);\n  return positive(liveLoad - l1 - l2 - l3 - l5); // return Calc.positive(totalFuelLoad * (0.1036 - 0.114 * deadFuelFraction))\n}\n/**\n *  Estimates live chaparral leaf fuel load.\n *\n * @param {number} totalFuelLoad Total chaparral fuel load (lb+1 ft-2)\n * @param {*} deadFuelFraction Dead fuel fraction (fraction)\n * @returns {number} The load (lb+1 ft-2)\n * of the live chaparral leaf\n * as per Rothermel and Philpot (1973) Figure 1.\n */\n\nfunction liveClass5Load(totalFuelLoad, deadFuelFraction) {\n  return positive(totalFuelLoad * (0.1957 - 0.305 * deadFuelFraction));\n}\n\nvar ChaparralFuel = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  TypeChamise: TypeChamise,\n  TypeMixedBrush: TypeMixedBrush,\n  Types: Types$1,\n  age: age,\n  fuelDepth: fuelDepth$1,\n  fuelTypes: fuelTypes$1,\n  totalLoad: totalLoad,\n  deadExtinctionMoisture: deadExtinctionMoisture,\n  deadFractionAverageMortality: deadFractionAverageMortality,\n  deadFractionSevereMortality: deadFractionSevereMortality,\n  deadLoad: deadLoad,\n  deadClass1Load: deadClass1Load,\n  deadClass2Load: deadClass2Load,\n  deadClass3Load: deadClass3Load,\n  deadClass4Load: deadClass4Load,\n  liveLoad: liveLoad,\n  liveClass1Load: liveClass1Load,\n  liveClass2Load: liveClass2Load,\n  liveClass3Load: liveClass3Load,\n  liveClass4Load: liveClass4Load,\n  liveClass5Load: liveClass5Load\n});\n\n/**\n * @file Compass functions as implemented by BehavePlus v6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n\n/**\n * Constrain compass degrees to the azimuth range [0 <= degrees < 360].\n *\n * @param float degrees The compass azimuth (degrees).\n *\n * @return float The compass azimuth constrained to the range [0 <= azimuth < 360] degrees.\n */\nfunction constrain(degrees) {\n  while (degrees >= 360) {\n    degrees -= 360;\n  }\n\n  while (degrees < 0) {\n    degrees += 360;\n  }\n\n  return degrees;\n}\n/**\n * Calculate compass degrees (azimuth, clockwise from north) from radians.\n *\n * @param float radians Compass azimuth expressed in radians.\n *\n * @return float Compass azimuth expressed in degrees.\n */\n\nfunction degrees(radians) {\n  return radians * 180 / Math.PI;\n}\nfunction diff(x, y) {\n  return constrain(x - y);\n}\n/**\n * Get the opposite azimuth from degrees.\n *\n * @param float deg A compass azimuth (degrees).\n *\n * @return float The opposite compass azimuth from dgrees.\n */\n\nfunction opposite(degrees) {\n  return constrain(degrees - 180);\n}\n/**\n * Calculate the radians of the compass azimuth (clockwise from north).\n *\n * @param float degrees  Compass azimuth (degrees clockwise from north).\n *\n * @return float The compass azimuth expressed in radians.\n */\n\nfunction radians(degrees) {\n  return degrees * Math.PI / 180;\n}\n/**\n * Calculate the slope steepness in degrees from the slope vertical rise / horizontal reach ratio.\n *\n * @param float ratio Ratio of the slope vertical rise / horizontal reach (fraction).\n *\n * @return float Slope steepness expressed in degrees.\n */\n\nfunction slopeDegrees(ratio) {\n  const radians = Math.atan(ratio);\n  return degrees(radians);\n}\n/**\n * Calculate slope steepness degrees from map measurements.\n *\n * @param float mapScale Map scale factor (Greater than 1, i.e., 24000)\n * @param float contourInterval Map contour interval (in same units-of-measure as distance)\n * @param float contours Number of contours crossed in the measurement\n * @param float mapDistance Map distance covered in the measurement\n *\n * @return float Slope steepness degrees\n */\n\nfunction slopeDegreesMap(mapScale, contourInterval, contours, mapDistance) {\n  const ratio = slopeRatioMap(mapScale, contourInterval, contours, mapDistance);\n  return slopeDegrees(ratio);\n}\n/**\n * Calculate the slope vertical rise / horizontal reach ratio from its steepness in degrees.\n *\n * @param float degrees  Slope steepness in degrees.\n *\n * @return float Slope vertical rise / horizontal reach ratio (fraction).\n */\n\nfunction slopeRatio(degrees) {\n  const rad = radians(constrain(degrees));\n  return Math.tan(rad);\n}\n/**\n * Calculate slope steepness ratio from map measurements.\n *\n * @param float mapScale Map sacle factor (Greater than 1, i.e., 24000)\n * @param float contourInterval Map contour interval (in same units-of-measure as distance)\n * @param float contours Number of contours crossed in the measurement\n * @param float mapDistance Map distance covered in the measurement\n *\n * @return float Slope steepness ratio\n */\n\nfunction slopeRatioMap(mapScale, contourInterval, contours, mapDistance) {\n  const reach = Math.max(0, mapScale * mapDistance);\n  const rise = Math.max(0, contours * contourInterval);\n  return reach <= 0 ? 0 : rise / reach;\n}\nfunction sum(x, y) {\n  return constrain(x + y);\n}\n\nvar Compass = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  constrain: constrain,\n  degrees: degrees,\n  diff: diff,\n  opposite: opposite,\n  radians: radians,\n  slopeDegrees: slopeDegrees,\n  slopeDegreesMap: slopeDegreesMap,\n  slopeRatio: slopeRatio,\n  slopeRatioMap: slopeRatioMap,\n  sum: sum\n});\n\n/**\r\n * @file Crown fire functions as described by Rothermel () and by Scott & Reinhardt ()\r\n * and as implemented by BehavePlus v6.\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n */\nconst ACTIVE = 'Active';\nconst CONDITIONAL = 'Conditional';\nconst PASSIVE = 'Passive';\nconst SURFACE = 'Surface';\nconst InitiationTypes = [ACTIVE, CONDITIONAL, PASSIVE, SURFACE];\n/**\r\n * Calculate the crown fire active ratio.\r\n *\r\n * @param rActive Actual active crown fire spread rate (ft+1 min-1)\r\n * @param rPrime Crown spread rate required to maintain active crowning (ft+1 min-1)\r\n * @return Scott & Reinhardt's active crowning ratio.\r\n */\n\nfunction activeRatio(rActive, rPrime) {\n  return rPrime <= 0 ? 0 : rActive / rPrime;\n}\n/**\r\n * Crown fire area per Rothermel (1991) equation 11 (p 16)\r\n *\r\n * @param dist Crown fire spread distance (ft+1)\r\n * @param lwr Crown fire length-to-width ratio\r\n * @return Crown fire area (ft+2)\r\n */\n\nfunction area$1(dist, lwr) {\n  return Math.PI * dist * dist / (4 * lwr);\n}\nfunction canTransition(transRatio) {\n  return transRatio >= 1;\n}\n/**\r\n * Calculates the crown fraction burned as per Scott & Reinhardt (2001).\r\n *\r\n * @param rSurface Actual surface fire spread rate [Rsurface] (ft+1 min-1).\r\n * @param rInit Surface fire spread rate required to\r\n *  initiate torching/crowning [R'initiation] (ft+1 min-1).\r\n * @param rSa Surface fire spread rate [R'sa] (ft+1 min-1)\r\n *   at which the active crown fire spread rate is fully achieved\r\n *   and the crown fraction burned is 1.\r\n * @return The crown fraction burned (fraction).\r\n */\n\nfunction crownFractionBurned(rSurface, rInit, rSa) {\n  const numer = rSurface - rInit; // Rsurface - R'init\n\n  const denom = rSa - rInit; // R'sa - R'init\n\n  return fraction(divide(numer, denom));\n}\n/**\r\n * Calculate the Scott & Reinhardt 'crowning index' (O'active),\r\n * the 20-ft wind speed at which the crown canopy becomes fully available\r\n * for active fire spread (and the crown fraction burned approaches 1).\r\n *\r\n * @param oActive Open wind speed sufficient for active xcrown fire (ft+1 min-1)\r\n * @return The Scott & Reinhardt Crowning Index (km+1 h-1).\r\n */\n\nfunction crowningIndex(oActive) {\n  return oActive / 54.680665; // CI in km/h\n}\n/**\r\n *\r\n * @param crownHpua Crown fire (surface plus canopy fuel) heat per unit area (Btu+1 ft-2)\r\n * @param rActive Active crown fire spread rate (ft+1 min-1)\r\n * @return Active crown fire fireline intensity (BTU+1 ft-1 s-1)\r\n */\n\nfunction fliActive(crownHpua, rActive) {\n  return rActive / 60 * crownHpua;\n}\nfunction fliFinal(rFinal, cfb, cpyHpua, surfHpua) {\n  return rFinal * (surfHpua + cfb * cpyHpua) / 60;\n}\n/**\r\n * Calculate the critical surface fire intensity (I'initiation)\r\n * sufficient to drive off canopy foliar moisture and initiate a\r\n * passive or active crown fire.\r\n *\r\n * This is Scott & Reinhardt (2001) equation 11 (p 13).\r\n *\r\n * @param folMois Canopy foliar moisture content (ratio).\r\n * @param cpyBase Crown canopy base height (ft+1).\r\n * @return The critical surface fireline intensity (btu+1 ft-1 s-1)\r\n *  required to initiate a passive or active crown fire.\r\n */\n\nfunction fliInit(folMois, cpyBase) {\n  const fmc = Math.max(30, 100 * folMois); // convert to percent with 30% min\n\n  const cbh = Math.max(0.1, 0.3048 * cpyBase); // convert to meters with 10 cm min\n\n  const kwm = Math.pow(0.01 * cbh * (460 + 25.9 * fmc), 1.5); // (kW/m)\n\n  return kwm * 0.288672; // return as Btu/ft/s\n}\n/**\r\n * Calculate Thomas's (1963) flame length (ft+1) given a fireline intensity.\r\n *\r\n * @param fli Fireline intensity (Btu+1 ft-1 s-1).\r\n * @return Thomas' (1963) flame length (ft+1).\r\n */\n\nfunction flameLengthThomas$1(fli) {\n  return fli <= 0 ? 0 : 0.2 * Math.pow(fli, 2 / 3);\n} // Active crown fire heat per unit area,\n// sum of the surface fire HPUA and the entire active canopy HPUA\n// (i.e., the canopy load * canopy heat content,\n// and NOT the canopy fuel model 10 HPUA)\n\nfunction hpuaActive(surfHpua, cpyHpua) {\n  return surfHpua + cpyHpua;\n}\nfunction isActive(transRatio, activeRatio) {\n  return type(transRatio, activeRatio) === ACTIVE;\n}\nfunction isCrown(transRatio, activeRatio) {\n  const fireType = type(transRatio, activeRatio);\n  return fireType === ACTIVE || fireType === PASSIVE;\n}\nfunction isConditional(transRatio, activeRatio) {\n  return type(transRatio, activeRatio) === CONDITIONAL;\n}\nfunction isPassive(transRatio, activeRatio) {\n  return type(transRatio, activeRatio) === PASSIVE;\n}\nfunction isSurface(transRatio, activeRatio) {\n  return type(transRatio, activeRatio) === SURFACE;\n}\nfunction isPlumeDominated(powerRatio) {\n  return powerRatio >= 1;\n}\nfunction isWindDriven(powerRatio) {\n  return powerRatio < 1;\n}\n/**\r\n * Calculate the crown fire length-to-width ratio given the 20-ft\r\n * wind speed (Rothermel 1991, Equation 10, p16).\r\n *\r\n * @param wspd20 Wind speed at 20-ft (ft+1 min-1).\r\n * @return The crown fire length-to-width ratio (ratio).\r\n */\n\nfunction lengthToWidthRatio$1(wspd20) {\n  return 1 + 0.125 * (wspd20 / 88); // Wind speed must be in miles per hour\n}\n/**\r\n * Calculate the Scott & Reinhardt 'crowning index' (O'active),\r\n * the 20-ft wind speed at which the crown canopy becomes fully available\r\n * for active fire spread (and the crown fraction burned approaches 1).\r\n *\r\n * @param cpyBulk Crown canopy bulk density (btu+1 ft-3).\r\n * @param crownRxi Crown fire (fuel model 10) reaction intensity (btu+1 ft-2 min-1).\r\n * @param crownSink Crown fire (fuel model 10) heat sink (btu+1 ft-3).\r\n * @param phis Slope coefficient (0 for crown fire)\r\n * @return The O`active wind speed (ft+1 min-1) or Infinity.\r\n */\n\nfunction oActive(cpyBulk, crownRxi, crownSink, phis) {\n  if (cpyBulk === 0 || crownSink === 0) return Infinity; // In native units\n\n  const cbd = 16.0185 * cpyBulk; // Convert from lb/ft3 to kg/m3\n\n  const ractive = 3.28084 * (3 / cbd); // R'active, ft/min\n\n  const r10 = ractive / 3.34; // R'active = 3.324 * r10\n\n  const pflux = 0.048317062998571636; // Fuel model 10 actual propagating flux ratio\n\n  const ros0 = crownRxi * pflux / crownSink;\n  if (ros0 - 1 - phis === 0) return Infinity;\n  const windB = 1.4308256324729873; // Fuel model 10 actual wind factor B\n\n  const windBInv = 1 / windB; // Fuel model 10 actual inverse of wind factor B\n\n  const windK = 0.0016102128596515481; // Fuel model 10 actual K = C*pow((beta/betOpt),-E)\n\n  const a = (r10 / ros0 - 1 - phis) / windK;\n  if (a === 0) return Infinity;\n  const uMid = Math.pow(a, windBInv);\n  const u20 = uMid / 0.4;\n  return u20;\n}\n/**\r\n * Crown fire perimeter per Rothermel (1991) equation 13 (p 16).\r\n *\r\n * @param dist Crown fire spread distance (ft+1)\r\n * @param lwr Crown fire length-to-width ratio\r\n * @return Crown fire perimeter (ft+1)\r\n */\n\nfunction perimeter$1(dist, lwr) {\n  return 0.5 * Math.PI * dist * (1 + 1 / lwr);\n}\n/**\r\n * Calculate the crown fire power-of-the-fire(ft+11 lb+1 ft-2 s-1).\r\n *\r\n * @param fliActive Crown fire active fireline intensity (Btu+1 ft-1 s-1).\r\n * @return Rothermel's power of the fire (ft+1 lb+1 ft-2 s-1).\r\n */\n\nfunction powerOfTheFire(fliActive) {\n  return fliActive / 129;\n}\n/**\r\n * Calculate the crown fire power-of-the-wind (ft+1 lb+1 ft-2 s-1).\r\n *\r\n * See Rothermel (1991) equations 6 & 7 (p 14).\r\n *\r\n * @param wspd20 Wind speed at 20-ft (ft+1 min-1).\r\n * @param rActive Actiuve crown fire spread rate (ft+1 min-1).\r\n * @return Rothermel's power of the wind (ft+1 lb+1 ft-2 s-1).\r\n */\n\nfunction powerOfTheWind(wspd20, rActive) {\n  // Difference must be in ft+1 s-1\n  const diff = positive((wspd20 - rActive) / 60);\n  return 0.00106 * diff * diff * diff;\n}\n/**\r\n * Calculate the active crown fire spread rate at head [Ractive] (ft+1 min-1)\r\n * given the corresponding standard fuel model 10 spread rate at head.\r\n *\r\n * This is the crown fire spread rate per Rothermel (1991), and which\r\n * Scott & Reinhardt term `Ractive`\r\n *\r\n * @param fm10Ros Standard fuel model 10 spread rate at head (ft+1 min-1).\r\n *\r\n * @return The spread rate at head (ft+1 min-1) of the active crown fire.\r\n */\n\nfunction rActive(fm10ros) {\n  return 3.34 * fm10ros;\n}\n/**\r\n * Scott & Reinhardt (2005) final spread rate based on FAH.\r\n *\r\n * @param rSurface\r\n * @param rActive\r\n * @param cfb Crown fraction burned (fraction).\r\n * @return float Final crown fire spread rate (ft+1 min-1)\r\n */\n\nfunction rFinal(rSurface, rActive, cfb) {\n  return rSurface + cfb * positive(rActive - rSurface);\n}\n/**\r\n * Calculate the critical surface fire spread rate (R'initiation)\r\n * sufficient to initiate a passive or active crown fire.\r\n *\r\n * This is Scott & Reinhardt (2001) equation 12 (p 13).\r\n *\r\n * @param critSurfFli Critical surface fireline intensity (btu_1 ft-1 s-1).\r\n * @param surfHpua Surface fire heat per unit area (Btu+1 ft-2).\r\n * @return Scott & Reinhardt's critical surface fire spread rate\r\n *  [R'initiation] (ft+1 min-1)\r\n */\n\nfunction rInit(critSurfFli, surfHpua) {\n  return surfHpua <= 0 ? 1.0e12 : 60 * critSurfFli / surfHpua;\n}\n/**\r\n * Calculate R'active, the critical crown (minimum) rate of spread for active crowning.\r\n *\r\n * Scott & Reinhardt (2001) equation 14, p 14.\r\n *\r\n * @param cpyBulk Crown canopy bulk density (lb+1 ft-3).\r\n * @return The critical crown fire spread rate (ft+1 min-1).\r\n */\n\nfunction rPrimeActive(cpyBulk) {\n  const cbdSi = 16.0184663678 * cpyBulk; // convert to Kg/m3\n\n  const rosSi = cbdSi <= 0 ? 0 : 3 / cbdSi; // m/min\n\n  const rosFpm = rosSi * 3.2808399; // return as ft/min\n\n  return rosFpm;\n}\n/**\r\n * Scott & Reinhardt (2001) R'sa, the theoretical surface fire spread rate\r\n * when the 20-ft wind speed equals O'active\r\n *\r\n * @param oActive Critical open wind speed (ft+1 min-1) for sustaining fully active crown fire\r\n * @param surfRos0 Surface fire no-wind no-slope spread rate (ft+1 min-1)\r\n * @param surfWaf Surface fuel's wind speed adjustment factor to apply to oActive\r\n * @param surfWindB Surface fuel's wind factor B\r\n * @param surfWindK Surface fuel's wind factor K\r\n * @param surfPhiS Surface fuel's slope coefficient\r\n * @return R'sa The theoretical surface fire spread rate\r\n * when the 20-ft wind speed equals O'active\r\n */\n\nfunction rSa(oActive, surfRos0, surfWaf, surfWindB, surfWindK, surfPhiS) {\n  if (oActive === Infinity) return Infinity;\n  const mwspd = surfWaf * oActive;\n  const surfPhiW = mwspd <= 0 ? 0 : surfWindK * Math.pow(mwspd, surfWindB);\n  return surfRos0 * (1 + surfPhiW + surfPhiS);\n}\n/**\r\n * Calculate the crown fire transition ratio.\r\n *\r\n * @param surfFli Actual surface fire fireline intensity (Btu+1 ft-1 s-1).\r\n * @param iInit Critical surface fire fireline intensity [I'initiation]\r\n * required to initiate active or passive crowning (Btu+1 ft-1 s-1).\r\n * @return Rothermel's crown fire transition ratio.\r\n */\n\nfunction transitionRatio(surfFli, fliInit) {\n  return fliInit <= 0 ? 0 : surfFli / fliInit;\n}\n/**\r\n * Calculate the final fire type.\r\n *\r\n *  <table>\r\n *    <tr>\r\n *      <td> Transition </td>\r\n *        <td colspan='2'> Active Ratio </td>\r\n *    </tr>\r\n *    <tr>\r\n *        <td> Ratio </td>\r\n *        <td> &lt 1 </td>\r\n *        <td> &gt = 1 </td>\r\n *    </tr>\r\n *    <tr>\r\n *        <td> &lt 1 </td>\r\n *        <td> 0 : Surface Fire </td>\r\n *        <td> 2 : Conditional Active Crown Fire </td>\r\n *    </tr>\r\n *    <tr>\r\n *        <td> &gt = 1 </td>\r\n *        <td> 1 : Passive Crown Fire </td>\r\n *        <td> 3 : Active Crown Fire </td>\r\n *    </tr>\r\n *  </table>\r\n *\r\n * @param transRatio The ratio of the surface fireline intensity to the\r\n * critical surface fireline intensity.\r\n * @param activeRatio The ratio of the active crown fire spread rate to the\r\n * critical crown fire spread rate\r\n * @return One of the following codes:\r\n *  - 'surface fire' indicates a surface fire with no torching or crowning\r\n *      (transition ratio < 1 && active ratio < 1)\r\n * - 'passive crown fire' indicates a passive/torching crown fire\r\n *      (transition ratio >= 1 && active ratio < 1)\r\n * - 'conditional surface fire' indicates a surface fire that could conditionally\r\n *      transition to an active crown fire\r\n *      (transition ratio < 1 && active ratio >= 1)\r\n * - 'active crown fire' indicates an active crown fire\r\n *      (transition ratio >= 1 && active ratio >= 1)\r\n */\n\nfunction type(transRatio, activeRatio) {\n  if (transRatio < 1) {\n    return activeRatio < 1 ? SURFACE : CONDITIONAL;\n  } else {\n    // ( transRatio >= 1.0 )\n    return activeRatio < 1 ? PASSIVE : ACTIVE;\n  }\n}\n\nvar CrownFire = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ACTIVE: ACTIVE,\n  CONDITIONAL: CONDITIONAL,\n  PASSIVE: PASSIVE,\n  SURFACE: SURFACE,\n  InitiationTypes: InitiationTypes,\n  activeRatio: activeRatio,\n  area: area$1,\n  canTransition: canTransition,\n  crownFractionBurned: crownFractionBurned,\n  crowningIndex: crowningIndex,\n  fliActive: fliActive,\n  fliFinal: fliFinal,\n  fliInit: fliInit,\n  flameLengthThomas: flameLengthThomas$1,\n  hpuaActive: hpuaActive,\n  isActive: isActive,\n  isCrown: isCrown,\n  isConditional: isConditional,\n  isPassive: isPassive,\n  isSurface: isSurface,\n  isPlumeDominated: isPlumeDominated,\n  isWindDriven: isWindDriven,\n  lengthToWidthRatio: lengthToWidthRatio$1,\n  oActive: oActive,\n  perimeter: perimeter$1,\n  powerOfTheFire: powerOfTheFire,\n  powerOfTheWind: powerOfTheWind,\n  rActive: rActive,\n  rFinal: rFinal,\n  rInit: rInit,\n  rPrimeActive: rPrimeActive,\n  rSa: rSa,\n  transitionRatio: transitionRatio,\n  type: type\n});\n\n/**\n * @file Exported WFSP crown fire spotting distance functions as described by Albini (1998) and\n * as implemented by BehavePlus v6.\n  * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\n\n/**\n * \\brief Javascript implementation of \"Program for predicting spotting distance\n * from an active crown fire in uniformly forested flat terrain\", November 1998,\n * by Frank Albini.\n *\n * The following Javascript implementation was adopted from the MS FORTRAN source\n * code cited above and my 'dist2a.for' derivative (which is also the basis of the\n * C++ version in BehavePlus V6).\n */\nfunction firebrandObjectPrototype() {\n  return {\n    zdrop: 0,\n    xdrop: 0,\n    xdrift: 0,\n    xspot: 0,\n    layer: 0\n  };\n}\n/**\n * Calculates crown firebrand dropout altitude and distance,\n * drift distance, and total flat terrain spot distance.\n *\n * Thin wrapper around dist() that performs input/output\n * units conversions native to BPX.\n *\n * @param {real} canopyHt Average crown top height of forest cover (ft)\n * @param {real} crownFli Fire intensity (Btu/ft/s)\n * @param {real} ws20 Wind speed at canopy top, (ft/min)\n *\n * @return {object}\n *  zdrop: firebrand dropout plume coordinate height (ft)\n *  xdrop: firebrand dropout plume coordinate horizontal distance (ft)\n *  xdrift: firebrand down-wind drift horizontal distance (ft)\n *  xspot:  firebrand down-wind spotting distance on flat terrain (ft)\n *  layer: plume profile layer where dropout occurs\n */\n\nfunction flatDistance(canopyHt, ws20, crownFli) {\n  const fpm = 3.2808;\n  const htop = canopyHt / fpm;\n  const fikwpm = 3.46414 * crownFli; // Anemometer wind speed must be km/h\n\n  const uan = 1.60934 * ws20 / 88; // Anemometer height (m)\n\n  const anem = 6.096; // utop is wind speed in m/s\n\n  const utop = windSpeedAtCanopyTop(htop, uan, anem);\n  const diam = 1;\n  const [z, x, drift, spot, layer] = dist(htop, fikwpm, utop, diam);\n  return {\n    zdrop: fpm * z,\n    xdrop: fpm * x,\n    xdrift: fpm * drift,\n    xspot: fpm * spot,\n    layer: layer\n  };\n}\n/**\n * Simply returns the 'layer' property from the 'firebrand' object.\n *\n * @param {real} firebrandObj Object returned by flatDistance().\n * @return {int} Plume profile layer where dropout occurs\n */\n\nfunction layer(firebrandObj) {\n  return firebrandObj.layer;\n}\n/**\n * Simply returns the 'drift' property from the 'firebrand' object.\n *\n * @param {real} firebrandObj Object returned by flatDistance().\n * @return {real} Firebrand down-wind drift horizontal distance (ft)\n */\n\nfunction xdrift(firebrandObj) {\n  return firebrandObj.xdrift;\n}\n/**\n * Simply returns the 'xdrop' property from the 'firebrand' object.\n *\n * @param {real} firebrandObj Object returned by flatDistance().\n * @return {real} Firebrand dropout plume coordinate horizontal distance (ft)\n */\n\nfunction xdrop(firebrandObj) {\n  return firebrandObj.xdrop;\n}\n/**\n * Simply returns the 'spot' property from the 'firebrand' object.\n *\n * @param {real} firebrandObj Object returned by flatDistance().\n * @return {real} Firebrand down-wind spotting distance on flat terrain (ft)\n */\n\nfunction xspot(firebrandObj) {\n  return firebrandObj.xspot;\n}\n/**\n * Simply returns the 'zdrop' property from the 'firebrand' object.\n *\n * @param {real} firebrandObj Object returned by flatDistance().\n * @return {real} Firebrand dropout plume coordinate height (ft)\n */\n\nfunction zdrop(firebrandObj) {\n  return firebrandObj.zdrop;\n}\n/**\n * Adapted from Albini's MS FORTRAN PROGRAM DIST().\n *\n * @param {real} htop Average crown top height of forest cover (m)\n * @param {real} fikwpm Fire intensity (kW/m) (must be > 1000 kW/m)\n * @param {real} utop Wind speed at canopy top, (m/s)\n * @param {real} diam Firebrand diameter when it reaches the surface (mm)\n *\n * @return {array} [fbHeight, fbDist, fbDrift, flatSpotDist, layer], where\n *  dbHeight is the firebrand dropout plume coordinate height (m)\n *  dbDist is the firebrand dropout plume coordinate distance (m)\n *  dbDrift is the firebrand down-wind drift distance (m)\n *  flatSpotDist is the firebrand down-wind spotting distance on flat terrain (m)\n *  layer is the plume profile layer\n */\n\nfunction dist(htop, fikwpm, utop, diam) {\n  // flame = flame height above the canopy top (m)\n  const flame = flameHeightAlbini(fikwpm, utop, htop);\n\n  if (flame <= 0) {\n    return [0, 0, 0, 0, 0];\n  } // if (ido===2) fikwpm = fireIntensityAlbini(flame, utop, htop)\n  // hf = normalized flame height above the canopy top (dl)\n\n\n  const hf = flame / htop; // uc = normalized wind speed at the crown top\n\n  const g = 9.82; // Acceleration of gravity, m / s^2\n\n  const wn = Math.sqrt(g * htop);\n  const uc = utop / wn; // dlosmm = ember diameter loss from the top of the plume till it hits the surface\n\n  const dlosmm = 0.064 * htop; // Display inputs and intermediates derived so far:\n  // console.log('Mean height of forest (htop)', htop, '(m)')\n  // console.log('Mean wind speed at anemometer height', uan, '(km/h)')\n  // console.log('Mean height of flame above tops', flame, '(m)')\n  // console.log('Fire intensity [input or calculated]', fikwpm, '(kW/m)')\n  // console.log('Anemometer height', anem, '(m)')\n  // console.log('hf (flame ht / canopy ht)', hf, '(dl)')\n  // console.log('utop (wind speed at crown top)', utop, '(dl)')\n  // console.log('uc (normalized wind at crown top)', uc, '(dl)')\n  // console.log('wn (sqrt( g * htop ))', wn)\n  // console.log('Firebrand alighting diameter', diam, '(mm)')\n  // console.log('dlosmm (Ember diam loss=0.064 * htop)', dlosmm, '(mm)')\n  // dhitmm = ember diameter when it hits the ground (mm)\n\n  const dhitmm = diam; // dtopmm = ember diameter when it reaches the top of the plume (mm)\n\n  const dtopmm = dhitmm + dlosmm; // eta = 'safety factor' for firebrand diameter on impact (eta > 1.)\n\n  const eta = dtopmm / dlosmm; // Determine firebrand dropout location within the plume.  Outputs are:\n  //  zdrop = normalized vertical firebrand dropout altitude (dl) (m / htop)\n  //  xdrop = corresponding dropout normalized distance down wind (dl) (m / htop)\n  //  layer = plume layer where dropout occurs\n\n  const [zdrop, xdrop, layer] = dropout(hf, uc, eta); // xdrift = normalized down wind drift distance (dl) (m / htop)\n\n  const xdrift = drift(zdrop, eta, uc); // xspot = normalized total spotting distance on flat terrain (m / htop)\n\n  const xspot = xdrop + xdrift; // Convert normalized distances to m\n\n  const fbHeight = zdrop * htop;\n  const fbDist = xdrop * htop;\n  const fbDrift = xdrift * htop;\n  const flatSpotDist = xspot * htop; // console.log('Plume Drop-out Layer', layer)\n  // console.log('Normalized dropout altitude', zdrop, '(m / htop)')\n  // console.log('Normalized dropout distance', xdrop, '(m / htop)')\n  // console.log('Normalized drift distance', xdrift, '(m / htop)')\n  // console.log('Firebrand Height', fbHeight, '(m)')\n  // console.log('Firebrand Distance', fbDist, '(m)')\n  // console.log('Firebrand Drift', fbDrift, '(m)')\n  // console.log('Flat spot distance',  flatSpotDist, '(m)')\n\n  return [fbHeight, fbDist, fbDrift, flatSpotDist, layer];\n}\n/**\n * According to Albini:\n * \"Calculates normalized down wind drift distance, 'delx',\n * for a firebrand particle injected into log profile wind field at\n * normalized altitude 'zdrop' and entering the canopy with diameter\n * equal to 'eta' times that necessary to reach the surface.\"\n *\n * Adapted from Frank Albini's 'drift.for' FORTRAN source, SUBROUTINE DRIFT()\n *\n * @param {real} zdrop Normalized firebrand drop-out altitude (dl) (m / htop)\n * @param {real} eta Safety factor (eta>1)\n * @param {real} uc Normalized horizontal wind speed at crown top (dl)\n *\n * @return {real} Normalized down wind firebrand drift distance (m / htop)\n */\n\nfunction drift(zdrop, eta, uc) {\n  const f0 = 1 + 2.94 * zdrop;\n  const f1 = Math.sqrt(eta / (eta + zdrop));\n  const f2 = eta > 0.34 ? Math.sqrt(eta / (eta - 0.34)) : 0;\n  const f3 = f1 > 0 ? f2 / f1 : 0;\n  const f2log = f2 > 1 ? Math.log((f2 + 1) / (f2 - 1)) : 0;\n  const f3log = f3 > 1 ? Math.log((f3 + 1) / (f3 - 1)) : 0;\n  const F = f3 > 0 ? 1 + Math.log(f0) - f1 + (f3log - f2log) / f3 : 0;\n  const xdrift = 10.9 * F * uc * Math.sqrt(zdrop + eta);\n  return xdrift;\n}\n/**\n * Calculates firebrand drop-out altitude and distance\n *\n * @param {real} hf  Normalized flame height above the canopy top (dl)\n * @param {real} uc Normalized horizontal wind speed at crown top (dl)\n * @param {real} eta Safety factor (eta>1)\n *\n * @returns {array} [zdrop, xdrop, layer], where\n *  zdrop = normalized vertical firebrand dropout altitude (dl) (m / htop)\n *  xdrop = corresponding dropout normalized distance down wind (dl) (m / htop)\n *  layer = plume layer where dropout occurs\n */\n\nfunction dropout(hf, uc, eta) {\n  // Delta x-z iteration factor\n  const ds = 0.2; // qfac = constant used to determine sufficient qreq at each layer\n\n  const qfac = uc > 0 ? 0.00838 / (uc * uc) : 0; // Albini's tip()\n\n  const rfc = 1 + 2.94 * hf;\n  let fm = 0.468 * rfc * Math.log(rfc);\n  const fmuf = 1.3765 * (hf + rfc * Math.log(rfc) ** 2);\n  const uf = fmuf / fm;\n  const ctn2f = rfc - 1 + rfc * Math.log(rfc) ** 2;\n  const tang = 1.4 * hf / (uc * Math.sqrt(ctn2f));\n  const ang = Math.atan(tang);\n  const wf = tang * uf;\n  const vf = Math.sqrt(uf * uf + wf * wf);\n  const rhof = 0.6;\n  const bf = fm / (rhof * vf); // end tip()\n\n  let sing = Math.sin(ang);\n  let cosg = Math.cos(ang);\n  let delx = 0.5 * bf * sing;\n  let delz = 0.5 * bf * cosg;\n  const zc2 = hf;\n  const xc2 = hf / Math.tan(ang);\n  const fmf = fm;\n  const tratf = 2 * fmf / 3;\n  const fmadd = fm > 0 ? 0.2735 * fm : 0;\n  const hfarg = 1 + 2.94 * hf;\n  const fmuadd = 0.3765 * (hf + hfarg * Math.log(hfarg) ** 2);\n  let fmw = fm * wf;\n  const dmwfac = uc > 0 ? 2 * fmf / (3 * uc * uc) : 0;\n  let w = wf;\n  let V = vf;\n  let z = hf;\n  let x = xc2; // Level 1\n\n  let q = 0.5 * rhof * wf * wf;\n  let xb = delx;\n  let zb = 0; // Level 2\n\n  q = 0.5 * rhof * wf * wf;\n  xb = xc2 + delx;\n  zb = zc2 - delz;\n  let zp = zb;\n  let xp = xb;\n  let layer = 2;\n  let qreq = qfac * (zb + eta);\n\n  if (q <= qreq) {\n    // console.log('plume cannot lift a particle large enough to provide the \"eta\" saftey factor')\n    return [0, 0, 0];\n  }\n\n  while (true) {\n    layer += 1;\n    const dx = ds * cosg;\n    const dz = ds * sing;\n    x = x + dx;\n    z = z + dz;\n    const zarg = 1 + 2.94 * z;\n    fm = 0.34 * zarg * Math.log(zarg) + fmadd;\n    const fmu = z + 0.34 * zarg * Math.log(zarg) ** 2 + fmuadd;\n    const trat = 1 + tratf / fm;\n    const u = fmu / fm;\n    fmw = fmw + dmwfac / V * dz;\n    w = fmw / fm;\n    V = Math.sqrt(u * u + w * w);\n    const b = fm * trat / V;\n    sing = w / V;\n    cosg = u / V;\n    delx = 0.5 * b * sing;\n    delz = 0.5 * b * cosg;\n    xb = x + delx;\n    zb = z - delz;\n    q = 0.5 * w * w / trat;\n    qreq = qfac * (zb + eta); // Compare with dist2a_plume.csv\n    // console.log(k, q[k], xb[k], zb[k], ang, dx, dz, x, z, zarg)\n    // fm, fmu, trat, u, fmw, w, V, b, sing, cosg, delx, delz)\n\n    if (q < qreq) {\n      return [zp, xp, layer - 1];\n    }\n\n    zp = zb; // store as previous layer value\n\n    xp = xb; // store as previous layer value\n\n    if (layer > 50000) {\n      throw new Error('dropout() exceeded 50000 layers');\n    }\n  }\n}\n/**\n * Calculates crown fire intensity from average flame HEIGHT above canopy top\n * as per Albini's MS FORTRAN FUNCTION FINT().\n *\n * @param {real} flame  Average flame height above canopy top (m)\n * @param {real} utop Mean wind speed at canopy top height (m/s)\n * @param {real} htop Canopy top height (m)\n * @return {real} fint Fire intensity (kW/m)\n */\n\nfunction fireIntensityAlbini(flame, utop, htop) {\n  const y = htop > 0 ? 1 + 2.94 * flame / htop : 0;\n  const con = y > 0 ? y * Math.log(y) : 0;\n  return con * utop * htop / 7.791e-3;\n}\n/**\n * Calculates crown fire intensity from crown fire flame length\n * using Thomas equation.\n *\n * @param {real} flameLength Crown fire flame length (ft)\n * @return {real} Crown fire intensity (btu/ft/s)\n *  (multiply by 3.46414 to obtain kW/m)\n */\n\nfunction firelineIntensityThomas(flameLength) {\n  return flameLength <= 0 ? 0 : Math.pow(5 * flameLength, 3 / 2);\n}\n/**\n * Estimates crown fire average flame HEIGHT (not length) above canopy top (m)\n *\n * Adapted from Albini's MS FORTRAN FUNCTION HEIGHT().\n *\n * @param {real} fikwpm Fire intensity (kW/m) (must be > 1000 kW/m)\n * @param {real} utop  Mean wind speed at canopy top (m/s)\n * @param {real} htop Average crown top height of forest cover (m)\n * @return {real} Average height of flame above canopy top (m)\n */\n\nfunction flameHeightAlbini(fikwpm, utop, htop) {\n  if (htop * utop <= 0 || fikwpm < 1000) return 0;\n  const con = 7.791e-3 * fikwpm / (utop * htop);\n  let ylow = 1;\n  let yhigh = Math.exp(con); // As 'con' approaches 780, 'yhigh' approaches Infinity,\n  // which causes endless binary seach loop.  So cap it...\n  // console.log(`Start flameHeightAlbini(): con=${con}, yhigh=${yhigh}`)\n\n  if (yhigh === Infinity) {\n    yhigh = Number.MAX_VALUE; // console.log(` RESET: con=${con}, yhigh=${yhigh}`)\n  }\n\n  let loop = 1;\n\n  while (true) {\n    const y = 0.5 * (ylow + yhigh);\n    const test = y * Math.log(y);\n\n    if (Math.abs(test - con) <= 1e-6) {\n      const height = htop * (y - 1) / 2.94; // console.log(`Loop ${loop} ylow=${ylow}, yhigh=${yhigh}`)\n\n      return height;\n    }\n\n    loop = loop + 1;\n\n    if (loop > 10000) {\n      // The following statement should never be executed, but still...\n      throw new Error('flameHeightAlbini() binary search endless loop detected');\n    }\n\n    if (test >= con) yhigh = y;\n    if (test < con) ylow = y;\n  }\n}\n/**\n * Calculate crown fire flame length from crown fire intensity\n * using Thomas' equation.\n *\n * @param {real} fli Crown fire intensity (btu/ft/s)\n * @result {real} Crown fire flame length (ft)\n */\n\nfunction flameLengthThomas(fli) {\n  return fli <= 0 ? 0 : 0.2 * Math.pow(fli, 2 / 3);\n}\n/**\n * Estimates the mean wind speed at canopy top (m/s)\n *\n * Adapted from Albini's MS FORTRAN PROGRAM DIST() around statements 45 to 50\n *\n * @param {real} htop Average crown top height of forest cover (m)\n * @param {real} uan Measured wind speed at anemometer height (km/h)\n * @param {real} anem Height of measured wind speed (m)\n * @return {real} utop Mean wind speed at canopy top (m/s)\n */\n\nfunction windSpeedAtCanopyTop(htop, uan, anem) {\n  const zonh = htop > 0 ? anem / htop : 0;\n  const fact = 1 + Math.log(1 + 2.94 * zonh);\n  const utop = uan / (3.6 * fact);\n  return utop;\n}\n\nvar CrownSpotting = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  firebrandObjectPrototype: firebrandObjectPrototype,\n  flatDistance: flatDistance,\n  layer: layer,\n  xdrift: xdrift,\n  xdrop: xdrop,\n  xspot: xspot,\n  zdrop: zdrop,\n  dist: dist,\n  drift: drift,\n  dropout: dropout,\n  fireIntensityAlbini: fireIntensityAlbini,\n  firelineIntensityThomas: firelineIntensityThomas,\n  flameHeightAlbini: flameHeightAlbini,\n  flameLengthThomas: flameLengthThomas,\n  windSpeedAtCanopyTop: windSpeedAtCanopyTop\n});\n\n/**\n * @file DagNode updater methods that are handled internally by the Dag\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\nfunction bind(value) {\n  return value;\n}\nfunction config(value) {\n  return value;\n}\nfunction dangler(value) {\n  return value;\n}\nfunction fixed(value) {\n  return value;\n}\nfunction input(value) {\n  return value;\n}\nfunction link(value) {\n  return value;\n}\n/**\n * Callback for Dag.setModule()\n *\n * Notes:\n * - module() is called via Dag.setModules() -> DagDna.setModules() -> DagSetRun.setModules()\n * - The Module values have already been set before module() is called\n * - module() should enabled/disable Nodes and set Link Nodes as appropriate\n * - After returning from module(), DagSetRun.setModules() calls config()\n *\n * @param {Dag} dag  Reference to the DagDna instance\n * @param {string} mode 'cascade', 'independent', or 'none'\n *\n * In 'independent' mode, any two modules are ALWAYS and ONLY linked WHEN they are both active.\n * Thus, if both surfaceFire and crownFire are activate, they are also linked.\n * If crownSpot is then also activated, it is also linked to crownFire and then surfaceFire.\n * This forces the client to select all active modules, just as for BehavePlus for Windows.\n *\n * If mode is 'none', then links are set just like any other configure Node.\n * For example, if the client selects the flanking spread rate, the 'link.fireEllipse'\n * configuration Node becomes 'required', and the client may then choose between\n * 'linkedToSurfaceFire' or 'standAlone'.\n */\n\nfunction module$1(dag, mode) {\n  if (mode === 'independent') {\n    moduleIndependent(dag);\n  }\n}\n\nfunction moduleIndependent(dag) {\n  const modules = [['surfaceFire', ['surface.primary', 'surface.secondary', 'surface.weighted'], null], ['surfaceSpot', ['spotting.surfaceFire'], 'surfaceFire'], ['crownFire', ['crown.'], 'surfaceFire'], ['crownSpot', ['spotting.crownFire.'], 'crownFire'], ['fireEllipse', ['surface.fire.ellipse.'], 'surfaceFire'], ['fireContain', ['contain'], 'fireEllipse'], ['scorchHeight', ['scorch.'], 'surfaceFire'], ['treeMortality', ['mortality.'], 'scorchHeight'], ['spotting', ['spotting.burningPile', 'spotting.torchingTrees'], null], ['ignitionProbability', ['ignition.'], null]];\n  modules.forEach(([name, prefixes, linkName]) => {\n    const modNode = dag.get('module.' + name); // *this* module Node\n\n    const active = modNode.value === 'active'; // Set up possible linkage\n\n    if (linkName) {\n      const linkNode = dag.get('link.' + name);\n      linkNode.value = 'standAlone';\n\n      if (active) {\n        const linkMod = dag.get('module.' + linkName);\n\n        if (linkMod.value === 'active') {\n          // if there is a link module and its active\n          linkNode.value = 'linkedTo' + linkName.charAt(0).toUpperCase() + linkName.slice(1); // link to it\n        }\n      }\n    } // Enable/disable this module's Nodes\n\n\n    prefixes.forEach(prefix => {\n      dag.node.forEach(node => {\n        if (node.key.startsWith(prefix)) node.isEnabled = active;\n      });\n    });\n  });\n}\n\nvar Dag$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bind: bind,\n  config: config,\n  dangler: dangler,\n  fixed: fixed,\n  input: input,\n  link: link,\n  module: module$1\n});\n\n/**\r\n * @file Fire ellipse functions as described by Albini (1998) and\r\n * as implemented by BehavePlus v6.\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n*/\n/**\r\n * Calculate the fire ellipse area given its major axis length and\r\n * length-to-width ratio as per Rothermel (1991) equation 11 on page 16\r\n * (which ignores backing distance).\r\n *\r\n * @param len Total fire ellipse length (arbitrary distance unbits-of-measure).\r\n * @param lwr Fire ellipse length-to-width ratio (ratio).\r\n * @return Fire ellipse area (in same distance unitsof-measure as length squared).\r\n */\n\nfunction area(len, lwr) {\n  return divide(Math.PI * len * len, 4 * lwr);\n}\n/**\r\n *  Calculate the fire spread rate (ft+1 min-1) at the ellipse back\r\n *  given the fire spread rate at ellipse head and fire ellipse length-to-width ratio.\r\n *\r\n *  NOTE this differs from FireSpread::spreadRateAtBack() which takes the\r\n *  length-to-width ratio as the second parameter, rather than ellipse eccentricity.\r\n *\r\n * @param spreadRateAtHead Fire spread rate at ellipse head (ft+1 min-1).\r\n * @param eccentricity Fire ellipse eccentricity (ratio).\r\n *\r\n * @return float The fire spread rate at the ellipse back (ft+1 min-1).\r\n */\n\nfunction backingSpreadRate(rosHead, eccent) {\n  return rosHead * divide(1 - eccent, 1 + eccent);\n}\n/**\r\n * Calculate the fire spread rate at 'beta' degrees from the fire ignition point-to-head vector.\r\n *\r\n * This calculates the fire spread rate at `beta` degrees from its *point of ignition*,\r\n * which *is not* the fire rate at `psi` degrees from the center of the ellipse.\r\n *\r\n * NOTE this differs from FireSPread::spreadRateATBeta(), which takes the ellipse\r\n * length-to-width ratio as its second argument.\r\n *\r\n * @param betaHead Fire spread vector of interest (degrees clockwise from heading direction).\r\n * @param rosHead Fire spread rate at the head (ft+1 min-1).\r\n * @param eccent Fire ellipse eccentricity (ratio).\r\n *\r\n * @return float The fire spread rate along the specified vector (ft+1 min-1).\r\n */\n\nfunction betaSpreadRate(betaHead, rosHead, eccent) {\n  let rosBeta = rosHead; // Calculate the fire spread rate in this azimuth\n  // if it deviates more than a tenth degree from the maximum azimuth\n\n  if (Math.abs(betaHead) > 0) {\n    const rad = radians(betaHead);\n    rosBeta = rosHead * (1 - eccent) / (1 - eccent * Math.cos(rad));\n  }\n\n  return rosBeta;\n}\n/**\r\n * Calculate the fire ellipse eccentricity.\r\n *\r\n * @param float lwr Fire ellipse length-to-width ratio.\r\n * @return float The fire ellipse eccentricity (ratio).\r\n */\n\nfunction eccentricity(lwr) {\n  const x = lwr * lwr - 1;\n  return x <= 0 || lwr <= 0 ? 0 : Math.sqrt(x) / lwr;\n}\n/**\r\n * Calculate the fire ellipse expansion rate at the flank.\r\n *\r\n * NOTE this differs from backingSpreadRate(), which takes two arguments,\r\n * the spread rate at head and the ellipse length-to-width ratio.\r\n *\r\n * @param rosMinor Fire ellipse expansion rate at its widest point\r\n * (in arbitrary velocity units-of-measure).\r\n *\r\n * @return The fire ellipse spread rate at the flank\r\n *  (in the same arbitrary velocity units-of-measure as minorAxisExpansionRate).\r\n */\n\nfunction flankingSpreadRate(rosMinor) {\n  return 0.5 * rosMinor;\n}\n/**\r\n * Calculate the fire ellipse distance or rate at `F`.\r\n *\r\n * @param rosMajor Fire ellipse major axis spread rate or length\r\n *  (in arbitrary distance or velocity units-of-measure).\r\n * @return Fire ellipse `F` used to determine spread rates at arbitrary psi.\r\n */\n\nfunction fSpreadRate(rosMajor) {\n  return 0.5 * rosMajor;\n}\n/**\r\n * Calculate the fire ellipse distance or rate at `G`.\r\n *\r\n * @param rosMajor Fire ellipse major axis spread rate or length\r\n *  (in arbitrary distance or velcoity units-of-measure).\r\n *\r\n * @param rosBack Portion of the total major axis rate or distance\r\n *  attributable to the backing rate or distance (in the same atbitrary\r\n *  distance or velcoity units-of-measure as majorAxisRateOrDistance).\r\n *\r\n * @return Fire ellipse `G` used to determine spread rates at arbitrary psi.\r\n */\n\nfunction gSpreadRate(rosMajor, rosBack) {\n  return 0.5 * rosMajor - rosBack;\n}\n/**\r\n * Calculate the fire ellipse distance or rate at `H`.\r\n *\r\n * @param rosMinor Fire ellipse minor axis spread rate or length\r\n *  (in arbitrary distance or velcoity units-of-measure).\r\n *\r\n * @return Fire ellipse `H` used to determine spread rates at arbitrary psi.\r\n */\n\nfunction hSpreadRate(rosMinor) {\n  return 0.5 * rosMinor;\n}\n/*! \\brief Caluclate the fireline intensity at some azimuth.\r\n */\n\nfunction fliAtAzimuth(fliHead, rosHead, rosAz) {\n  return positive(divide(fliHead * rosAz, rosHead));\n}\n/**\r\n * Calculate the fire ellipse expansion rate along its major axis.\r\n *\r\n * @param rosHead Fire spread rate at the head of the ellipse\r\n *  (in arbitrary velocity units-of-measure).\r\n *\r\n * @param rosBack Fire spread rate at the back of the ellipse\r\n *  (in the same velocity units-of-measure as spreadRateAtHead).\r\n *\r\n * @return The fire ellipse expansion rate along its major axis\r\n *  (in the same velocity units-of-measure as spreadRateAtHead).\r\n */\n\nfunction majorSpreadRate(rosHead, rosBack) {\n  return rosHead + rosBack;\n}\n/**\r\n * Calculate the fire ellipse expansion rate along its minor axis.\r\n *\r\n * @param majorAxisRos Fire ellipse expansion rate along its major axis\r\n * (in arbitrary velocity units-of-measure).\r\n *\r\n * @param lwr The fire ellipse length-to-width ratio.\r\n *\r\n * @return The fire ellipse expansion rate along its mino axis\r\n * (in the same arbitrary velocity units-of-measure as majorAxisExpansionRate).\r\n */\n\nfunction minorSpreadRate(rosMajor, lwr) {\n  return positive(divide(rosMajor, lwr));\n} // Map area\n\nfunction mapArea(area, mapScale) {\n  return positive(divide(area, mapScale * mapScale));\n}\n/**\r\n *  Calculate the fire ellipse perimeter from its length and width.\r\n *\r\n * @param len Fire ellipse length (arbitrary distance units-of-measure).\r\n * @param wid Fire ellipse width (arbitrary distance units-of-measure).\r\n *\r\n * @return float The fire ellipse perimeter (in same distance units-of-measure as length).\r\n */\n\nfunction perimeter(len, wid) {\n  const a = 0.5 * len;\n  const b = 0.5 * wid;\n  const xm = a + b <= 0 ? 0 : (a - b) / (a + b);\n  const xk = 1 + xm * xm / 4 + xm * xm * xm * xm / 64;\n  return Math.PI * (a + b) * xk;\n}\nfunction psiFromTheta(thetaFromHead, rosF, rosH) {\n  if (rosF <= 0 || rosH <= 0 || thetaFromHead <= 0) {\n    return 0;\n  }\n\n  const thetaRadians = radians(thetaFromHead);\n  const tanPsiRadians = Math.tan(thetaRadians) * rosF / rosH;\n  let psiRadians = Math.atan(tanPsiRadians); // psiRadians += ( psiRadians < 0) ? pi : 0\n  // psiradians += ( thetaRadians > pi) ? pi : 0\n  // Quadrant adjustment\n\n  if (thetaRadians <= 0.5 * Math.PI) ; else if (thetaRadians > 0.5 * Math.PI && thetaRadians <= 1.5 * Math.PI) {\n    psiRadians += Math.PI;\n  } else if (thetaRadians > 1.5 * Math.PI) {\n    psiRadians += 2 * Math.PI;\n  } // Convert psi radians to degrees\n\n\n  return degrees(psiRadians);\n}\n/**\r\n * Calculate the fire spread rate at 'psi' degrees from the fire ellipse center-to-head vector.\r\n *\r\n * This calculates the fire spread rate at `psi` degrees from its *ellipse center* to the ellipse head,\r\n * which *is not* the fire rate at `beta` degrees from the point of ignition.\r\n *\r\n * @param psiHead The fire spread vector of interest (degrees clockwise from heading direction).\r\n * @param rosF Fire ellipse expansion rate (ft+1 min-1) at ellipse point F.\r\n * @param rosG Fire ellipse expansion rate (ft+1 min-1) at ellipse point G.\r\n * @param rosH Fire ellipse expansion rate (ft+1 min-1) at ellipse point H.\r\n *\r\n *  @return The fire spread rate along the specified vector (ft+1 min-1).\r\n */\n\nfunction psiSpreadRate(psiHead, rosF, rosG, rosH) {\n  let rosPsi = 0;\n\n  if (rosF * rosG * rosH > 0) {\n    const radians$1 = radians(psiHead);\n    const cosPsi = Math.cos(radians$1);\n    const cos2Psi = cosPsi * cosPsi;\n    const sin2Psi = 1 - cos2Psi;\n    const term1 = rosG * cosPsi;\n    const term2 = rosF * rosF * cos2Psi;\n    const term3 = rosH * rosH * sin2Psi;\n    rosPsi = term1 + Math.sqrt(term2 + term3);\n  }\n\n  return rosPsi;\n}\n/**\r\n * Calculate the distance given the velocity and elapsed time.\r\n *\r\n * @param rate Velocity\r\n * @param time Elapsed time\r\n * @return Distance traveled\r\n */\n\nfunction spreadDistance(rate, time) {\n  return rate * time;\n}\nfunction thetaFromBeta(betaHead, rosF, rosG, rosH) {\n  if (rosF <= 0 || rosH <= 0) {\n    return 0;\n  }\n\n  const betaRadians = radians(betaHead);\n  const cosBeta = Math.cos(betaRadians);\n  const cos2Beta = cosBeta * cosBeta;\n  const sin2Beta = 1 - cos2Beta;\n  const f2 = rosF * rosF;\n  const g2 = rosG * rosG;\n  const h2 = rosH * rosH;\n  const term = Math.sqrt(h2 * cos2Beta + (f2 - g2) * sin2Beta);\n  const num = rosH * cosBeta * term - rosF * rosG * sin2Beta;\n  const denom = h2 * cos2Beta + f2 * sin2Beta;\n  const cosThetaRadians = num / denom;\n  let thetaRadians = Math.acos(cosThetaRadians); // Quadrant adjustment\n\n  if (betaRadians < Math.PI) ; else if (betaRadians >= Math.PI) {\n    thetaRadians = 2 * Math.PI - thetaRadians;\n  } // Convert theta radians to degrees\n\n\n  let thetaHead = degrees(thetaRadians);\n\n  if (betaHead > 180) {\n    thetaHead = 360 - thetaHead;\n  }\n\n  return thetaHead;\n} // //--------------------------------------------------------------------------\n// /** \\brief Updates beta wrt head from theta.\n//  *\n//  * Calculate the degrees from the fire ignition point given the degrees\n//  * from the ellipse center and some ellipse paramaters.\n//  *\n//  * @param theta Azimuth from the ellipse center wrt the fire head\n//  * @param rosF spread rate at F\n//  * @param rosG spread rate at G\n//  * @param rosH spread rate at H\n//  * @returns The azimuth from the fire ignition point.\n//  */\n// export function betaFromTheta( theta, rosF, rosG, rosH) {\n//   const thetaRadians = Compass.radians(theta)\n//   const num = rosH * Math.sin( thetaRadians)\n//   const denom = rosG + rosF* Math.cos(thetaRadians)\n//   let betaRadians = ( denom <= 0 ) ? 0 : Math.atan( num / denom )\n//   // Quandrant adjustment\n//   const boundary1 = 150\n//   const boundary2 = 210\n//   if (theta <= boundary1) {\n//     // no adjustment required\n//   } else if (theta > boundary1 && theta <= boundary2) {\n//     betaRadians += Math.PI\n//   } else if (theta > boundary2) {\n//     betaRadians += 2.0 * Math.PI\n//   }\n//   // Convert beta radians to degrees\n//   return Compass.degrees(betaRadians)\n// }\n// export function thetaFromPsi( psiHead, rosF, rosH ) {\n//   if ( rosF <= 0 ) {\n//     return 0.0\n//   }\n//   const tanThetaRadians = Math.tan( psiHead ) * rosH / rosF\n//   let thetaRadians = Math.atan( tanThetaRadians )\n//   // Quadrant adjustment\n//   if ( psiRadians <= 0.5 * Math.PI ) {\n//     // no adjustment\n//   } else if ( psiRadians > 0.5 * Math.PI && psiRadians <= 1.5 * Math.PI ) {\n//     thetaRadians += Math.PI\n//   } else if ( psiRadians > 1.5 * Math.PI ) {\n//     thetaRadians += 2 * Math.PI\n//   }\n//   //thetaRadians += ( thetaRadians < 0. || psiradians > pi ) ? pi : 0.\n//   // Convert theta radians to degrees\n//   thetaDegrees = Compass.degrees( thetaRadians )\n//   return thetaRadians\n// }\n\nvar FireEllipse = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  area: area,\n  backingSpreadRate: backingSpreadRate,\n  betaSpreadRate: betaSpreadRate,\n  eccentricity: eccentricity,\n  flankingSpreadRate: flankingSpreadRate,\n  fSpreadRate: fSpreadRate,\n  gSpreadRate: gSpreadRate,\n  hSpreadRate: hSpreadRate,\n  fliAtAzimuth: fliAtAzimuth,\n  majorSpreadRate: majorSpreadRate,\n  minorSpreadRate: minorSpreadRate,\n  mapArea: mapArea,\n  perimeter: perimeter,\n  psiFromTheta: psiFromTheta,\n  psiSpreadRate: psiSpreadRate,\n  spreadDistance: spreadDistance,\n  thetaFromBeta: thetaFromBeta\n});\n\n/**\n * @file Fuel bed equations as described by Rothermel (1972) and as implemented by BehavePlus V6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\n/**\n * Calculate the 'live' fuel category moisture content of extinction.\n *\n * @param real mextk The 'live' fuel category moisture content of extinction factor (ratio).\n * @param real dfmc The 'dead' fuel category fine moisture content (ratio).\n * @param real dmext The 'dead' category moisture content of extinction (ratio).\n * @return real The 'live' fuel category  moisture content of extinction (ratio).\n */\n\nfunction extinctionMoistureContent(mextk, dfmc, dmext) {\n  const dry = 1 - divide(dfmc, dmext);\n  const lmext = mextk * dry - 0.226;\n  return Math.max(lmext, dmext);\n}\n/**\n * Calculate the 'live' fuel category moisture content of extinction factor.\n *\n * This factor is constant for a fuel bed, and represents the ratio\n * of dead-to-live fuel mass that must be raised to ignition.  It\n * is the method described by Rothermel (1972) on page 35 that was\n * subsequently refined in BEHAVE and BehavePlus to use the\n * effective fuel load and effective heating number to determine\n * the ratio of fine dead to fine live fuels.\n *\n * See Rothermel (1972) eq 88 on page 35.\n *\n * @param float defl The 'dead' fuel catagory total fine fuel load (lb+1 ft-2).\n * @param float lefl The 'live' fuel catagory total fine fuel load (lb+1 ft-2).\n *\n * @return float The 'live' fuel category moisture content of extinction factor.\n */\n\nfunction extinctionMoistureContentFactor(defl, lefl) {\n  return 2.9 * divide(defl, lefl);\n}\n/**\n * Calculate the fire heat per unit area.\n *\n * @param real rxi Fire reaction intensity (btu+1 ft-2 min-1).\n * @param real taur The fire/flame residence time (min+1).\n * @return The heat per unit area (btu+1 ft-2).\n */\n\nfunction heatPerUnitArea(rxi, taur) {\n  return rxi * taur;\n}\n/**\n *\n * @param float qig Fuel bed heat of pre-ignition (btu+1 lb-1)\n * @param float bulk Fuel bed bulk density (lb+1 ft-3)\n * @return float Fuel bed heat sink (btu+1 ft-3)\n */\n\nfunction heatSink(qig, bulk) {\n  return qig * bulk;\n}\n/**\n * Calculate the dead or live category mineral damping coefficient.\n *\n * @param float lifeCategoryEffectiveMineralContent\n * @return float Dead or live fuel category mineral damping coefficient.\n */\n\nfunction mineralDamping(seff) {\n  const etas = seff <= 0 ? 1 : 0.174 / seff ** 0.19;\n  return fraction(etas);\n}\n/**\n * Calculate the dead or live life category moisture damping coefficient.\n *\n * @param mois Life fuel category moisture content (ratio).\n * @param mext Life fuel category moisture content of extinction (ratio).\n * @return The life fuel category moisture damping coefficient (fraction).\n */\n\nfunction moistureDamping(mois, mext) {\n  const r = divide(mois, mext);\n  return fraction(1 - 2.59 * r + 5.11 * r * r - 3.52 * r * r * r);\n}\n/**\n * Calculate the no-wind no-slope fire spread rate.\n *\n * @param real rxi The total fire reaction intensity (btu+1 ft-2 min-1).\n * @param real pflx The fuel bed propagating flux ratio (ratio).\n * @param real sink The fuel bed heat sink (btu+1 ft-3).\n * @return The no-wind no-slope fire spread rate (ft+1 min-1).\n */\n\nfunction noWindNoSlopeSpreadRate(rxi, pflx, sink) {\n  return positive(divide(pflx * rxi, sink));\n}\n/**\n * Calculate the open-canopy midflame wind speed adjustment factor.\n *\n * @param fuelDepth Fuel bed depth (ft+1)\n * @return Wind speed adjustment factor\n */\n\nfunction openWindSpeedAdjustmentFactor(fuelDepth) {\n  const f = Math.min(6, Math.max(fuelDepth, 0.1));\n  return 1.83 / Math.log((20 + 0.36 * f) / (0.13 * f));\n}\n/**\n * Calculate the fuel bed optimum packing ratio (fraction).\n *\n * See Rothermel (1972) eq 37 (p 19, 26) and eq 69 (p32).\n *\n * @param float bedSavr Fuel bed surface area-to-volume ratio (ft-1).\n * @return float The fuel bed optimum packing ratio (fraction).\n */\n\nfunction optimumPackingRatio(savr) {\n  return savr <= 0 ? 0 : 3.348 / savr ** 0.8189;\n}\nfunction packingRatio(deadPprc, livePprc, depth) {\n  return divide(deadPprc + livePprc, depth);\n}\n/**\n * Calculate the no-wind propagating flux ratio (ratio).\n *\n * The propagating flux is the numerator of the Rothermel (1972) spread\n * rate equation 1 and has units of heat per unit area per unit time.\n *\n * See Rothermel (1972) eq 42 (p 20, 26) and eq 76 (p32).\n *\n * @param float savr The fuel bed characteristic surface area-to-volume ratio (ft-1).\n * @param float beta The fuel bed packing ratio (ratio).\n * @return float The fuel bed no-wind propagating flux ratio (ratio).\n */\n\nfunction propagatingFluxRatio(savr, beta) {\n  return savr <= 0 ? 0 : Math.exp((0.792 + 0.681 * Math.sqrt(savr)) * (beta + 0.1)) / (192 + 0.2595 * savr);\n}\n/**\n * Calculate the life fuel category reaction intensity without moisture damping.\n *\n * @param float rxvo Fuel bed optimum reaction velocity (min-1).\n * @param float wnet Life fuel category net ovendry fuel load (lb+1 ft-2).\n * @param float heat Life fuel category heat of combustion (btu+1 lb-1).\n * @param float etas Life fuel category mineral damping coefficient (fraction).\n * @return float The life fuel category reaction intensity (btu+1 ft-2 min-1)\n *      without moisture damping.\n */\n\nfunction reactionIntensityDry(rxvo, wnet, heat, etas) {\n  return rxvo * wnet * heat * etas;\n}\n/**\n * Calculate the fuel bed reaction velocity exponent 'A'.\n *\n * This is an arbitrary variable 'A'  used to derive the\n * fuel bed optimum reaction velocity.\n * See Rothermel (1972) eq 39 (p19, 26) and 67 (p 31).\n *\n * @param float savr Fuel bed surface area-to-volume ratio (ft-1).\n * @return float Fuel bed reaction velocity exponent 'A' (ratio).\n */\n\nfunction reactionVelocityExponent(savr) {\n  return savr <= 0 ? 0 : 133 / savr ** 0.7913;\n}\n/**\n * Calculate the fuel bed maximum reaction velocity (min-1).\n *\n * See Rothermel (1972) eq 36 (p 19, 26) and 68 (p 32).\n *\n * @param float bedSavr Fuel bed surface area-to-volume ratio (ft-1).\n * @return float Fuel bed maximum reaction velocity (min-1).\n */\n\nfunction reactionVelocityMaximum(sv15) {\n  return sv15 <= 0 ? 0 : sv15 / (495 + 0.0594 * sv15);\n}\n/**\n * Calculate the fuel bed optimum reaction velocity (min-1).\n *\n * See Rothermel (1972) eq 38 (p 19, 26) and eq 67 (p 31).\n *\n * @param float betr Fuel bed packing ratio ratio (ratio).\n * @param float rxvm Fuel bed maximum reaction velocity (min-1).\n * @param float rxve Fuel bed reaction velocity exponent 'A' (ratio).\n * @return float Fuel bed optimum reaction velocity (min-1).\n */\n\nfunction reactionVelocityOptimum(betr, rxvm, rxve) {\n  return betr <= 0 || betr === 1 ? 0 : rxvm * betr ** rxve * Math.exp(rxve * (1 - betr));\n} // DEPRECATED - The size class surface area calculations are now done inside swtg()\n// Accumulate fuel particle surface area by size class\n// for fuel particles with size class idx\n// export function scArea(idx, s1, a1, s2, a2, s3, a3, s4, a4, s5, a5) {\n//   let area = 0\n//   area += (idx === s1) ? a1 : 0\n//   area += (idx === s2) ? a2 : 0\n//   area += (idx === s3) ? a3 : 0\n//   area += (idx === s4) ? a4 : 0\n//   area += (idx === s5) ? a5 : 0\n//   return area\n// }\n\n/**\n * Calculate the often-used intermediate parameter of the fuel bed's\n * characteristics surface area-to-volume ratio raised to the 1.5 power.\n *\n * @param float savr Fuel bed characteristic surface area-to-volume ratio (ft-1).\n * @return float Fuel bed parameter (ratio).\n */\n\nfunction savr15(savr) {\n  return savr ** 1.5;\n}\n/**\n * Calculate the fuel bed slope coeffient `phiS` slope factor.\n *\n * This factor is an intermediate parameter that is constant for a fuel bed,\n * and used to determine the fire spread slope coefficient `phiS`.\n *\n * See Rothermel (1972) eq 51 (p 24, 26) and eq 80 (p 33).\n *\n * @param float packingRatio Fuel bed packing ratio (ratio).\n * @return float Factor used to derive the slope coefficient `phiS' (ratio).\n */\n\nfunction slopeK(beta) {\n  return beta <= 0 ? 0 : 5.275 * beta ** -0.3;\n} // Returns an array of 6 size class area weighting factors\n\nfunction sizeClassWeightingFactorArray(a1, s1, a2, s2, a3, s3, a4, s4, a5, s5) {\n  const a = [a1, a2, a3, a4, a5];\n  const s = [s1, s2, s3, s4, s5];\n  let tarea = 0.0;\n  const scar = [0, 0, 0, 0, 0, 0];\n\n  for (let idx = 0; idx < 5; idx += 1) {\n    scar[s[idx]] += a[idx];\n    tarea += a[idx];\n  }\n\n  const scwt = [0, 0, 0, 0, 0, 0];\n\n  if (tarea > 0.0) {\n    for (let idx = 0; idx < 6; idx += 1) {\n      scwt[idx] = scar[idx] / tarea;\n    }\n  }\n\n  return scwt;\n}\n/**\n * Calculate the fuel bed flame residence time.\n *\n * \\TODO find reference\n *\n * @param float savr Fuel bed surface area-to-volume ratio (ft-1).\n * @return float Fuel bed flame residence time (min+1).\n */\n\nfunction taur$1(savr) {\n  return savr <= 0 ? 0 : 384 / savr;\n}\n/**\n * Calculate the fuel bed wind coefficient `phiW` correlation factor `B`.\n *\n * This factor is an intermediate parameter that is constant for a fuel bed,\n * and is used to derive the fire spread wind coefficient `phiW`.\n *\n * See Rothermel (1972) eq 49 (p 23, 26) and eq 83 (p 33).\n *\n * @param float savr Fuel bed characteristic surface area-to-volume ratio (ft-1).\n * @return float Wind coefficient `phiW` correlation parameter `B` (ratio).\n */\n\nfunction windB(savr) {\n  return 0.02526 * savr ** 0.54;\n}\n/**\n * Calculate the fuel bed wind coefficient `phiW` correlation factor `C`.\n *\n * This factor is an intermediate parameter that is constant for a fuel bed,\n * and is used to derive the fire spread wind coefficient `phiW`.\n *\n * See Rothermel (1972) eq 48 (p 23, 26) and eq 82 (p 33).\n *\n * @param float savr Fuel bed characteristic surface area-to-volume ratio (ft-1).\n * @return float Wind coefficient `phiW` correlation parameter `C` (ratio).\n */\n\nfunction windC(savr) {\n  return 7.47 * Math.exp(-0.133 * savr ** 0.55);\n}\n/**\n * Calculate the fuel bed wind coefficient `phiW` correlation factor `E`.\n *\n * This factor is an intermediate parameter that is constant for a fuel bed,\n * and is used to derive the fire spread wind coefficient `phiW`.\n *\n * See Rothermel (1972) eq 50 (p 23, 26) and eq 82 (p 33).\n *\n * @param float savr Fuel bed characteristic surface area-to-volume ratio (ft-1).\n * @return float Wind coefficient `phiW` correlation parameter `E` (ratio).\n */\n\nfunction windE(savr) {\n  return 0.715 * Math.exp(-0.000359 * savr);\n}\n/**\n * Calculate the fuel bed wind coeffient `phiW` wind factor.\n *\n * This factor is an intermediate parameter that is constant for a fuel bed,\n * and used to determine the fire spread wind coefficient `phiW`.\n *\n * See Rothermel (1972) eq 47 (p 23, 26) and eq 79 (p 33).\n *\n * @param float betr Fuel bed packing ratio (ratio).\n * @param float wnde The fuel bed wind coefficient `phiW` correlation factor `E`.\n * @param float wndc The fuel bed wind coefficient `phiW` correlation factor `C`.\n * @return float Factor used to derive the wind coefficient `phiW' (ratio).\n */\n\nfunction windK(betr, wnde, wndc) {\n  return betr <= 0 ? 0 : wndc * betr ** -wnde;\n}\n/**\n * Calculate the fuel bed wind coeffient `phiW` inverse K wind factor.\n *\n * This factor is an intermediate parameter that is constant for a fuel bed,\n * and used to determine the fire spread wind coefficient `phiW`.\n *\n * It is the inverse of the wind factor 'K', and is used to re-derive\n * effective wind speeds within the BEHAVE fire spread computations.\n *\n * See Rothermel (1972) eq 47 (p 23, 26) and eq 79 (p 33).\n *\n * @param float betr Fuel bed packing ratio ratio (ratio).\n * @param float wnde The fuel bed wind coefficient `phiW` correlation factor `E`.\n * @param float wndc The fuel bed wind coefficient `phiW` correlation factor `C`.\n * @return float Factor used to derive the wind coefficient `phiW' (ratio).\n */\n\nfunction windI(betr, wnde, wndc) {\n  return betr <= 0.0 || wndc <= 0 ? 0 : betr ** wnde / wndc;\n}\nfunction windSpeedAdjustmentFactor(fuelSheltered, shelteredWaf, openWaf) {\n  return fuelSheltered ? Math.min(shelteredWaf, openWaf) : openWaf;\n}\n\nvar FuelBed = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  extinctionMoistureContent: extinctionMoistureContent,\n  extinctionMoistureContentFactor: extinctionMoistureContentFactor,\n  heatPerUnitArea: heatPerUnitArea,\n  heatSink: heatSink,\n  mineralDamping: mineralDamping,\n  moistureDamping: moistureDamping,\n  noWindNoSlopeSpreadRate: noWindNoSlopeSpreadRate,\n  openWindSpeedAdjustmentFactor: openWindSpeedAdjustmentFactor,\n  optimumPackingRatio: optimumPackingRatio,\n  packingRatio: packingRatio,\n  propagatingFluxRatio: propagatingFluxRatio,\n  reactionIntensityDry: reactionIntensityDry,\n  reactionVelocityExponent: reactionVelocityExponent,\n  reactionVelocityMaximum: reactionVelocityMaximum,\n  reactionVelocityOptimum: reactionVelocityOptimum,\n  savr15: savr15,\n  slopeK: slopeK,\n  sizeClassWeightingFactorArray: sizeClassWeightingFactorArray,\n  taur: taur$1,\n  windB: windB,\n  windC: windC,\n  windE: windE,\n  windK: windK,\n  windI: windI,\n  windSpeedAdjustmentFactor: windSpeedAdjustmentFactor\n});\n\n/**\n * @file Fuel catalog accessors.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\nconst Domains = ['behave', 'chaparral', 'palmettoGallberry', 'westernAspen'];\n/**\n * Map of fuel model aliases\n */\n\nconst Alias = new Map([['0', '0'], [0, '0'], ['none', '0'], ['rock', '0'], ['water', '0'], ['1', '1'], [1, '1'], ['2', '2'], [2, '2'], ['3', '3'], [3, '3'], ['4', '4'], [4, '4'], ['5', '5'], [5, '5'], ['6', '6'], [6, '6'], ['7', '7'], [7, '7'], ['8', '8'], [8, '8'], ['9', '9'], [9, '9'], ['10', '10'], [10, '10'], ['11', '11'], [11, '11'], ['12', '12'], [12, '12'], ['13', '13'], [13, '13'], ['101', '101'], [101, '101'], ['gr1', '101'], ['102', '102'], [102, '102'], ['gr2', '102'], ['103', '103'], [103, '103'], ['gr3', '103'], ['104', '104'], [104, '104'], ['gr4', '104'], ['105', '105'], [105, '105'], ['gr5', '105'], ['106', '106'], [106, '106'], ['gr6', '106'], ['107', '107'], [107, '107'], ['gr7', '107'], ['108', '108'], [108, '108'], ['gr8', '108'], ['109', '109'], [109, '109'], ['gr9', '109'], ['121', '121'], [121, '121'], ['gs1', '121'], ['122', '122'], [122, '122'], ['gs2', '122'], ['123', '123'], [123, '123'], ['gs3', '123'], ['124', '124'], [124, '124'], ['gs4', '124'], ['141', '141'], [141, '141'], ['sh1', '141'], ['142', '142'], [142, '142'], ['sh2', '142'], ['143', '143'], [143, '143'], ['sh3', '143'], ['144', '144'], [144, '144'], ['sh4', '144'], ['145', '145'], [145, '145'], ['sh5', '145'], ['146', '146'], [146, '146'], ['sh6', '146'], ['147', '147'], [147, '147'], ['sh7', '147'], ['148', '148'], [148, '148'], ['sh8', '148'], ['149', '149'], [149, '149'], ['sh9', '149'], ['161', '161'], [161, '161'], ['tu1', '161'], ['162', '162'], [162, '162'], ['tu2', '162'], ['163', '163'], [163, '163'], ['tu3', '163'], ['164', '164'], [164, '164'], ['tu4', '164'], ['165', '165'], [165, '165'], ['tu5', '165'], ['181', '181'], [181, '181'], ['tl1', '181'], ['182', '182'], [182, '182'], ['tl2', '182'], ['183', '183'], [183, '183'], ['tl3', '183'], ['184', '184'], [184, '184'], ['tl4', '184'], ['185', '185'], [185, '185'], ['tl5', '185'], ['186', '186'], [186, '186'], ['tl6', '186'], ['187', '187'], [187, '187'], ['tl7', '187'], ['188', '188'], [188, '188'], ['tl8', '188'], ['189', '189'], [189, '189'], ['tl9', '189'], ['201', '201'], [201, '201'], ['sb1', '201'], ['202', '202'], [202, '202'], ['sb2', '202'], ['203', '203'], [203, '203'], ['sb3', '203'], ['204', '204'], [204, '204'], ['sb4', '204'], ['301', '301'], [301, '301'], ['chaparral/type=chamise/depth=6/deadFraction=0.5', '301'], ['401', '401'], [401, '401'], ['pg/age=20/basal=120/cover=.8/height=5', '401'], ['501', '501'], [501, '501'], ['aspenShrub50', '501']]);\n/**\n * Map of standard fuel models\n * where the map key is the model number as a text string\n */\n\nconst Model = new Map([// Example special case dynamic fuel models:\n['301', {\n  domain: 'chaparral',\n  label: 'chaparral, type=chamise, depth=6, deadFraction=0.5',\n  number: 301,\n  code: 'chaparral/type=chamise/depth=6/deadFraction=0.5',\n  depth: 6,\n  // the observed.depth\n  totalLoad: 1,\n  // the observed.totalLoad\n  deadFraction: 0.5,\n  // the observed.deadFuelFraction\n  fuelType: 'chamise'\n}], ['401', {\n  domain: 'palmettoGallberry',\n  label: 'pg, age=20, basal=120, cover=.8, height=5',\n  number: 401,\n  code: 'pg/age=20/basal=120/cover=.8/height=5',\n  age: 20,\n  basalArea: 120,\n  cover: 0.8,\n  height: 5\n}], ['501', {\n  domain: 'westernAspen',\n  label: 'Aspen-shrub 50%',\n  number: 501,\n  code: 'aspenShrub50',\n  curingLevel: 0.5,\n  fuelType: 'aspenShrub'\n}], [// Standard BehavePlus Fuel Models\n'0', {\n  domain: 'behave',\n  label: 'No Fuel',\n  number: 0,\n  code: 'none',\n  depth: 0,\n  deadMext: 0,\n  dead1Load: 0,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 0,\n  liveHerbSavr: 0,\n  liveStemSavr: 0,\n  deadHeat: 0,\n  liveHeat: 0\n}], ['1', {\n  domain: 'behave',\n  label: 'Short grass',\n  number: 1,\n  code: '1',\n  depth: 1,\n  deadMext: 0.12,\n  dead1Load: 0.034,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 3500,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['2', {\n  domain: 'behave',\n  label: 'Timber grass and understory',\n  number: 2,\n  code: '2',\n  depth: 1,\n  deadMext: 0.15,\n  dead1Load: 0.092,\n  dead10Load: 0.046,\n  dead100Load: 0.023,\n  totalHerbLoad: 0.023,\n  liveStemLoad: 0,\n  dead1Savr: 3000,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['3', {\n  domain: 'behave',\n  label: 'Tall grass',\n  number: 3,\n  code: '3',\n  depth: 2.5,\n  deadMext: 0.25,\n  dead1Load: 0.138,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 1500,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['4', {\n  domain: 'behave',\n  label: 'Chaparral',\n  number: 4,\n  code: '4',\n  depth: 6,\n  deadMext: 0.2,\n  dead1Load: 0.23,\n  dead10Load: 0.184,\n  dead100Load: 0.092,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.23,\n  dead1Savr: 2000,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['5', {\n  domain: 'behave',\n  label: 'Brush',\n  number: 5,\n  code: '5',\n  depth: 2,\n  deadMext: 0.2,\n  dead1Load: 0.046,\n  dead10Load: 0.023,\n  dead100Load: 0,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.092,\n  dead1Savr: 2000,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['6', {\n  domain: 'behave',\n  label: 'Dormant brush, hardwood slash',\n  number: 6,\n  code: '6',\n  depth: 2.5,\n  deadMext: 0.25,\n  dead1Load: 0.069,\n  dead10Load: 0.115,\n  dead100Load: 0.092,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 1750,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['7', {\n  domain: 'behave',\n  label: 'Southern rough',\n  number: 7,\n  code: '7',\n  depth: 2.5,\n  deadMext: 0.4,\n  dead1Load: 0.052,\n  dead10Load: 0.086,\n  dead100Load: 0.069,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.017,\n  dead1Savr: 1750,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['8', {\n  domain: 'behave',\n  label: 'Short needle litter',\n  number: 8,\n  code: '8',\n  depth: 0.2,\n  deadMext: 0.3,\n  dead1Load: 0.069,\n  dead10Load: 0.046,\n  dead100Load: 0.115,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['9', {\n  domain: 'behave',\n  label: 'Long needle or hardwood litter',\n  number: 9,\n  code: '9',\n  depth: 0.2,\n  deadMext: 0.25,\n  dead1Load: 0.134,\n  dead10Load: 0.019,\n  dead100Load: 0.007,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2500,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['10', {\n  domain: 'behave',\n  label: 'Timber litter & understory',\n  number: 10,\n  code: '10',\n  depth: 1,\n  deadMext: 0.25,\n  dead1Load: 0.138,\n  dead10Load: 0.092,\n  dead100Load: 0.23,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.092,\n  dead1Savr: 2000,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['11', {\n  domain: 'behave',\n  label: 'Light logging slash',\n  number: 11,\n  code: '11',\n  depth: 1,\n  deadMext: 0.15,\n  dead1Load: 0.069,\n  dead10Load: 0.207,\n  dead100Load: 0.253,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 1500,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['12', {\n  domain: 'behave',\n  label: 'Medium logging slash',\n  number: 12,\n  code: '12',\n  depth: 2.3,\n  deadMext: 0.2,\n  dead1Load: 0.184,\n  dead10Load: 0.644,\n  dead100Load: 0.759,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 1500,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['13', {\n  domain: 'behave',\n  label: 'Heavy logging slash',\n  number: 13,\n  code: '13',\n  depth: 3,\n  deadMext: 0.25,\n  dead1Load: 0.322,\n  dead10Load: 1.058,\n  dead100Load: 1.288,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 1500,\n  liveHerbSavr: 1500,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['101', {\n  domain: 'behave',\n  label: 'Short, sparse, dry climate grass',\n  number: 101,\n  code: 'gr1',\n  depth: 0.4,\n  deadMext: 0.15,\n  dead1Load: 0.004591368227731864,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0.013774104683195591,\n  liveStemLoad: 0,\n  dead1Savr: 2200,\n  liveHerbSavr: 2000,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['102', {\n  domain: 'behave',\n  label: 'Low load, dry climate grass',\n  number: 102,\n  code: 'gr2',\n  depth: 1,\n  deadMext: 0.15,\n  dead1Load: 0.004591368227731864,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0.04591368227731864,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['103', {\n  domain: 'behave',\n  label: 'Low load, very coarse, humid climate grass',\n  number: 103,\n  code: 'gr3',\n  depth: 2,\n  deadMext: 0.3,\n  dead1Load: 0.004591368227731864,\n  dead10Load: 0.018365472910927456,\n  dead100Load: 0,\n  totalHerbLoad: 0.06887052341597796,\n  liveStemLoad: 0,\n  dead1Savr: 1500,\n  liveHerbSavr: 1300,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['104', {\n  domain: 'behave',\n  label: 'Moderate load, dry climate grass',\n  number: 104,\n  code: 'gr4',\n  depth: 2,\n  deadMext: 0.15,\n  dead1Load: 0.01147842056932966,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0.0872359963269054,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['105', {\n  domain: 'behave',\n  label: 'Low load, humid climate grass',\n  number: 105,\n  code: 'gr5',\n  depth: 1.5,\n  deadMext: 0.4,\n  dead1Load: 0.018365472910927456,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0.11478420569329659,\n  liveStemLoad: 0,\n  dead1Savr: 1800,\n  liveHerbSavr: 1600,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['106', {\n  domain: 'behave',\n  label: 'Moderate load, humid climate grass',\n  number: 106,\n  code: 'gr6',\n  depth: 1.5,\n  deadMext: 0.4,\n  dead1Load: 0.004591368227731864,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0.15610651974288337,\n  liveStemLoad: 0,\n  dead1Savr: 2200,\n  liveHerbSavr: 2000,\n  liveStemSavr: 1500,\n  deadHeat: 9000,\n  liveHeat: 9000\n}], ['107', {\n  domain: 'behave',\n  label: 'High load, dry climate grass',\n  number: 107,\n  code: 'gr7',\n  depth: 3,\n  deadMext: 0.15,\n  dead1Load: 0.04591368227731864,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0.24793388429752067,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['108', {\n  domain: 'behave',\n  label: 'High load, very coarse, humid climate grass',\n  number: 108,\n  code: 'gr8',\n  depth: 4,\n  deadMext: 0.3,\n  dead1Load: 0.02295684113865932,\n  dead10Load: 0.0459139,\n  dead100Load: 0,\n  totalHerbLoad: 0.33516988062442604,\n  liveStemLoad: 0,\n  dead1Savr: 1500,\n  liveHerbSavr: 1300,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['109', {\n  domain: 'behave',\n  label: 'Very high load, humid climate grass',\n  number: 109,\n  code: 'gr9',\n  depth: 5,\n  deadMext: 0.4,\n  dead1Load: 0.04591368227731864,\n  dead10Load: 0.04591368227731864,\n  dead100Load: 0,\n  totalHerbLoad: 0.4132231404958677,\n  liveStemLoad: 0,\n  dead1Savr: 1800,\n  liveHerbSavr: 1600,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['121', {\n  domain: 'behave',\n  label: 'Low load, dry climate grass-shrub',\n  number: 121,\n  code: 'gs1',\n  depth: 0.9,\n  deadMext: 0.15,\n  dead1Load: 0.009182736455463728,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0.02295684113865932,\n  liveStemLoad: 0.02984403,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1800,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['122', {\n  domain: 'behave',\n  label: 'Moderate load, dry climate grass-shrub',\n  number: 122,\n  code: 'gs2',\n  depth: 1.5,\n  deadMext: 0.15,\n  dead1Load: 0.02295684113865932,\n  dead10Load: 0.02295684113865932,\n  dead100Load: 0,\n  totalHerbLoad: 0.027548209366391182,\n  liveStemLoad: 0.04591368227731864,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1800,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['123', {\n  domain: 'behave',\n  label: 'Moderate load, humid climate grass-shrub',\n  number: 123,\n  code: 'gs3',\n  depth: 1.8,\n  deadMext: 0.4,\n  dead1Load: 0.013774104683195591,\n  dead10Load: 0.01147842056932966,\n  dead100Load: 0,\n  totalHerbLoad: 0.06657483930211203,\n  liveStemLoad: 0.057392102846648294,\n  dead1Savr: 1800,\n  liveHerbSavr: 1600,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['124', {\n  domain: 'behave',\n  label: 'High load, humid climate grass-shrub',\n  number: 124,\n  code: 'gs4',\n  depth: 2.1,\n  deadMext: 0.4,\n  dead1Load: 0.0872359963269054,\n  dead10Load: 0.013774104683195591,\n  dead100Load: 0.004591368227731864,\n  totalHerbLoad: 0.15610651974288337,\n  liveStemLoad: 0.3259871441689623,\n  dead1Savr: 1800,\n  liveHerbSavr: 1600,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['141', {\n  domain: 'behave',\n  label: 'Low load, dry climate shrub',\n  number: 141,\n  code: 'sh1',\n  depth: 1,\n  deadMext: 0.15,\n  dead1Load: 0.01147842056932966,\n  dead10Load: 0.01147842056932966,\n  dead100Load: 0,\n  totalHerbLoad: 0.0068870523415977955,\n  liveStemLoad: 0.05968778696051423,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['142', {\n  domain: 'behave',\n  label: 'Moderate load, dry climate shrub',\n  number: 142,\n  code: 'sh2',\n  depth: 1,\n  deadMext: 0.15,\n  dead1Load: 0.06198347107438017,\n  dead10Load: 0.11019283746556473,\n  dead100Load: 0.03443526170798898,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.17676767676767677,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['143', {\n  domain: 'behave',\n  label: 'Moderate load, humid climate shrub',\n  number: 143,\n  code: 'sh3',\n  depth: 2.4,\n  deadMext: 0.4,\n  dead1Load: 0.02066115702479339,\n  dead10Load: 0.13774104683195593,\n  dead100Load: 0,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.28466483011937554,\n  dead1Savr: 1600,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1400,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['144', {\n  domain: 'behave',\n  label: 'Low load, humid climate timber-shrub',\n  number: 144,\n  code: 'sh4',\n  depth: 3,\n  deadMext: 0.3,\n  dead1Load: 0.03902662993572084,\n  dead10Load: 0.05280073461891643,\n  dead100Load: 0.009182736455463728,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.11707988980716252,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['145', {\n  domain: 'behave',\n  label: 'High load, dry climate shrub',\n  number: 145,\n  code: 'sh5',\n  depth: 6,\n  deadMext: 0.15,\n  dead1Load: 0.1652892561983471,\n  dead10Load: 0.09641873278236915,\n  dead100Load: 0,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.13314967860422405,\n  dead1Savr: 750,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['146', {\n  domain: 'behave',\n  label: 'Low load, humid climate shrub',\n  number: 146,\n  code: 'sh6',\n  depth: 2,\n  deadMext: 0.3,\n  dead1Load: 0.13314967860422405,\n  dead10Load: 0.06657483930211203,\n  dead100Load: 0,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.06427915518824609,\n  dead1Savr: 750,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['147', {\n  domain: 'behave',\n  label: 'Very high load, dry climate shrub',\n  number: 147,\n  code: 'sh7',\n  depth: 6,\n  deadMext: 0.15,\n  dead1Load: 0.16069788797061524,\n  dead10Load: 0.24334251606978877,\n  dead100Load: 0.10101010101010101,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.15610651974288337,\n  dead1Savr: 750,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['148', {\n  domain: 'behave',\n  label: 'High load, humid climate shrub',\n  number: 148,\n  code: 'sh8',\n  depth: 3,\n  deadMext: 0.4,\n  dead1Load: 0.0941230486685032,\n  dead10Load: 0.15610651974288337,\n  dead100Load: 0.03902662993572084,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.19972451790633605,\n  dead1Savr: 750,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['149', {\n  domain: 'behave',\n  label: 'Very high load, humid climate shrub',\n  number: 149,\n  code: 'sh9',\n  depth: 4.4,\n  deadMext: 0.4,\n  dead1Load: 0.20661157024793386,\n  dead10Load: 0.11248852157943066,\n  dead100Load: 0,\n  totalHerbLoad: 0.07116620752984389,\n  liveStemLoad: 0.3213957759412305,\n  dead1Savr: 750,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1500,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['161', {\n  domain: 'behave',\n  label: 'Light load, dry climate timber-grass-shrub',\n  number: 161,\n  code: 'tu1',\n  depth: 0.6,\n  deadMext: 0.2,\n  dead1Load: 0.009182736455463728,\n  dead10Load: 0.04132231404958678,\n  dead100Load: 0.06887052341597796,\n  totalHerbLoad: 0.009182736455463728,\n  liveStemLoad: 0.04132231404958678,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['162', {\n  domain: 'behave',\n  label: 'Moderate load, humid climate timber-shrub',\n  number: 162,\n  code: 'tu2',\n  depth: 1,\n  deadMext: 0.3,\n  dead1Load: 0.0436179981634527,\n  dead10Load: 0.08264462809917356,\n  dead100Load: 0.057392102846648294,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.009182736455463728,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['163', {\n  domain: 'behave',\n  label: 'Moderate load, humid climate timber-grass-shrub',\n  number: 163,\n  code: 'tu4',\n  depth: 1.3,\n  deadMext: 0.3,\n  dead1Load: 0.050505050505050504,\n  dead10Load: 0.0068870523415977955,\n  dead100Load: 0.01147842056932966,\n  totalHerbLoad: 0.029843893480257115,\n  liveStemLoad: 0.050505050505050504,\n  dead1Savr: 1800,\n  liveHerbSavr: 1600,\n  liveStemSavr: 1400,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['164', {\n  domain: 'behave',\n  label: 'Dwarf conifer understory',\n  number: 164,\n  code: 'tu4',\n  depth: 0.5,\n  deadMext: 0.12,\n  dead1Load: 0.20661157024793386,\n  dead10Load: 0,\n  dead100Load: 0,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.09182736455463728,\n  dead1Savr: 2300,\n  liveHerbSavr: 1800,\n  liveStemSavr: 2000,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['165', {\n  domain: 'behave',\n  label: 'Very high load, dry climate timber-shrub',\n  number: 165,\n  code: 'tu5',\n  depth: 1,\n  deadMext: 0.25,\n  dead1Load: 0.18365472910927455,\n  dead10Load: 0.18365472910927455,\n  dead100Load: 0.13774104683195593,\n  totalHerbLoad: 0,\n  liveStemLoad: 0.13774104683195593,\n  dead1Savr: 1500,\n  liveHerbSavr: 1800,\n  liveStemSavr: 750,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['181', {\n  domain: 'behave',\n  label: 'Low load, compact conifer litter',\n  number: 181,\n  code: 'tl1',\n  depth: 0.2,\n  deadMext: 0.3,\n  dead1Load: 0.04591368227731864,\n  dead10Load: 0.10101010101010101,\n  dead100Load: 0.1652892561983471,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['182', {\n  domain: 'behave',\n  label: 'Low load broadleaf litter',\n  number: 182,\n  code: 'tl2',\n  depth: 0.2,\n  deadMext: 0.25,\n  dead1Load: 0.06427915518824609,\n  dead10Load: 0.10560146923783285,\n  dead100Load: 0.10101010101010101,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['183', {\n  domain: 'behave',\n  label: 'Moderate load conifer litter',\n  number: 183,\n  code: 'tl3',\n  depth: 0.3,\n  deadMext: 0.2,\n  dead1Load: 0.02295684113865932,\n  dead10Load: 0.10101010101010101,\n  dead100Load: 0.12855831037649218,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['184', {\n  domain: 'behave',\n  label: 'Small downed logs',\n  number: 184,\n  code: 'tl4',\n  depth: 0.4,\n  deadMext: 0.25,\n  dead1Load: 0.02295684113865932,\n  dead10Load: 0.06887052341597796,\n  dead100Load: 0.1928374655647383,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['185', {\n  domain: 'behave',\n  label: 'High load conifer litter',\n  number: 185,\n  code: 'tl5',\n  depth: 0.6,\n  deadMext: 0.25,\n  dead1Load: 0.05280073461891643,\n  dead10Load: 0.11478420569329659,\n  dead100Load: 0.20202020202020202,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['186', {\n  domain: 'behave',\n  label: 'High load broadleaf litter',\n  number: 186,\n  code: 'tl6',\n  depth: 0.3,\n  deadMext: 0.25,\n  dead1Load: 0.11019283746556473,\n  dead10Load: 0.055096418732782364,\n  dead100Load: 0.055096418732782364,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['187', {\n  domain: 'behave',\n  label: 'Large downed logs',\n  number: 187,\n  code: 'tl7',\n  depth: 0.4,\n  deadMext: 0.25,\n  dead1Load: 0.013774104683195591,\n  dead10Load: 0.06427915518824609,\n  dead100Load: 0.371900826446281,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['188', {\n  domain: 'behave',\n  label: 'Long-needle litter',\n  number: 188,\n  code: 'tl8',\n  depth: 0.3,\n  deadMext: 0.35,\n  dead1Load: 0.2662993572084481,\n  dead10Load: 0.06427915518824609,\n  dead100Load: 0.050505050505050504,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 1800,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['189', {\n  domain: 'behave',\n  label: 'Very high load broadleaf litter',\n  number: 189,\n  code: 'tl9',\n  depth: 0.6,\n  deadMext: 0.35,\n  dead1Load: 0.305325987144169,\n  dead10Load: 0.1515151515151515,\n  dead100Load: 0.19054178145087236,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 1800,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['201', {\n  domain: 'behave',\n  label: 'Low load activity fuel',\n  number: 201,\n  code: 'sb1',\n  depth: 1,\n  deadMext: 0.25,\n  dead1Load: 0.06887052341597796,\n  dead10Load: 0.13774104683195593,\n  dead100Load: 0.505050505050505,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['202', {\n  domain: 'behave',\n  label: 'Moderate load activity or low load blowdown',\n  number: 202,\n  code: 'sb2',\n  depth: 1,\n  deadMext: 0.25,\n  dead1Load: 0.20661157024793386,\n  dead10Load: 0.1951331496786042,\n  dead100Load: 0.18365472910927455,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['203', {\n  domain: 'behave',\n  label: 'High load activity fuel or moderate load blowdown',\n  number: 203,\n  code: 'sb3',\n  depth: 1.2,\n  deadMext: 0.25,\n  dead1Load: 0.2525252525252525,\n  dead10Load: 0.12626262626262624,\n  dead100Load: 0.13774104683195593,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}], ['204', {\n  domain: 'behave',\n  label: 'High load blowdown',\n  number: 204,\n  code: 'sb4',\n  depth: 2.7,\n  deadMext: 0.25,\n  dead1Load: 0.24104683195592286,\n  dead10Load: 0.16069788797061524,\n  dead100Load: 0.24104683195592286,\n  totalHerbLoad: 0,\n  liveStemLoad: 0,\n  dead1Savr: 2000,\n  liveHerbSavr: 1800,\n  liveStemSavr: 1600,\n  deadHeat: 8000,\n  liveHeat: 8000\n}]]);\n\n/**\r\n * @file Fuel catalog accessors.\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n*/\n/**\r\n * @return A sorted array of all the fuel model alias Map key strings.\r\n */\n\nfunction aliases() {\n  return Array.from(Alias.keys()).sort();\n}\nfunction code(alias) {\n  return model(alias).code;\n}\nfunction domain(alias) {\n  return model(alias).domain;\n}\n/**\r\n * @param {string} alias The Fuel.Alias map key string\r\n */\n\nfunction hasAlias(alias) {\n  return Alias.has(alias);\n}\n/**\r\n * @param {string} key The Fuel.Model map key string\r\n */\n\nfunction hasKey(key) {\n  return Model.has(key);\n}\n/**\r\n * @return A sorted array of all the fuel catalog model Map key strings.\r\n */\n\nfunction keys() {\n  return Array.from(Alias.keys()).sort();\n}\n/**\r\n * @return A sorted array of fuel catalog model [number, code, label]\r\n */\n\nfunction list() {\n  return Array.from(Model.keys()).sort().map(key => [number(key), code(key), label(key)]);\n}\nfunction label(alias) {\n  return model(alias).label;\n}\n/**\r\n * @param {string} alias Alias map key string\r\n * @return Reference to the Fuel.Model with the 'alias',\r\n * or throws an Error if the alias does not exist.\r\n */\n\nfunction model(alias) {\n  if (!Alias.has(alias)) {\n    throw new Error(`Fuel catalog does not have fuel model key or alias '${alias}'`);\n  }\n\n  return Model.get(Alias.get(alias));\n}\n/**\r\n * @return An array of all the fuel catalog model objects.\r\n */\n\nfunction models() {\n  return Array.from(Model.values());\n}\nfunction number(alias) {\n  return model(alias).number;\n}\nfunction behaveDead1Load(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.dead1Load : 0;\n}\nfunction behaveDead1Savr(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.dead1Savr : 1;\n}\nfunction behaveDead10Load(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.dead10Load : 0;\n}\nfunction behaveDead100Load(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.dead100Load : 0;\n}\nfunction behaveDeadHeat(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.deadHeat : 0;\n}\nfunction behaveDeadMext(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.deadMext : 0.01;\n}\nfunction behaveDepth(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.depth : 0.01;\n}\nfunction behaveLiveHeat(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.liveHeat : 0;\n}\nfunction behaveLiveHerbSavr(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.liveHerbSavr : 1;\n}\nfunction behaveLiveStemLoad(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.liveStemLoad : 0;\n}\nfunction behaveLiveStemSavr(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.liveStemSavr : 1;\n}\nfunction behaveTotalHerbLoad(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'behave' ? fuel.totalHerbLoad : 0;\n}\nfunction chaparralDeadFraction(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'chaparral' ? fuel.deadFraction : 0;\n}\nfunction chaparralDepth(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'chaparral' ? fuel.depth : 0.01;\n}\nfunction chaparralFuelType(alias) {\n  const fuel = model(alias); // return fuel.domain === 'chaparral' ? fuel.fuelType : 'none'\n\n  return fuel.domain === 'chaparral' ? fuel.fuelType : 'chamise';\n}\nfunction chaparralTotalLoad(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'chaparral' ? fuel.totalLoad : 0;\n}\nfunction palmettoGallberryAge(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'palmettoGallberry' ? fuel.age : 0;\n}\nfunction palmettoGallberryBasalArea(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'palmettoGallberry' ? fuel.basalArea : 0;\n}\nfunction palmettoGallberryCover(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'palmettoGallberry' ? fuel.cover : 0;\n}\nfunction palmettoGallberryHeight(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'palmettoGallberry' ? fuel.height : 0;\n}\nfunction westernAspenCuringLevel(alias) {\n  const fuel = model(alias);\n  return fuel.domain === 'westernAspen' ? fuel.curingLevel : 0;\n}\nfunction westernAspenFuelType(alias) {\n  const fuel = model(alias); // return fuel.domain === 'westernAspen' ? fuel.fuelType : 'none'\n\n  return fuel.domain === 'westernAspen' ? fuel.fuelType : 'aspenShrub';\n}\n\nvar FuelCatalog = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  aliases: aliases,\n  code: code,\n  domain: domain,\n  hasAlias: hasAlias,\n  hasKey: hasKey,\n  keys: keys,\n  list: list,\n  label: label,\n  model: model,\n  models: models,\n  number: number,\n  behaveDead1Load: behaveDead1Load,\n  behaveDead1Savr: behaveDead1Savr,\n  behaveDead10Load: behaveDead10Load,\n  behaveDead100Load: behaveDead100Load,\n  behaveDeadHeat: behaveDeadHeat,\n  behaveDeadMext: behaveDeadMext,\n  behaveDepth: behaveDepth,\n  behaveLiveHeat: behaveLiveHeat,\n  behaveLiveHerbSavr: behaveLiveHerbSavr,\n  behaveLiveStemLoad: behaveLiveStemLoad,\n  behaveLiveStemSavr: behaveLiveStemSavr,\n  behaveTotalHerbLoad: behaveTotalHerbLoad,\n  chaparralDeadFraction: chaparralDeadFraction,\n  chaparralDepth: chaparralDepth,\n  chaparralFuelType: chaparralFuelType,\n  chaparralTotalLoad: chaparralTotalLoad,\n  palmettoGallberryAge: palmettoGallberryAge,\n  palmettoGallberryBasalArea: palmettoGallberryBasalArea,\n  palmettoGallberryCover: palmettoGallberryCover,\n  palmettoGallberryHeight: palmettoGallberryHeight,\n  westernAspenCuringLevel: westernAspenCuringLevel,\n  westernAspenFuelType: westernAspenFuelType,\n  Domains: Domains\n});\n\n/**\n * @file Fuel moisture estimates based on Fosberg and used by National Wildfire Coordinmating Group\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\n// Fosberg's Table A - Reference Fuel Moisture\nconst FosbergA = [// 4  9 14 19 24 29 34 39 44 49 54 59 64 69  74  79  84  89  94  99 100 Relative Humidity\n[1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 8, 9, 9, 10, 11, 12, 12, 13, 13, 14], // db < 30\n[1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 7, 8, 9, 9, 10, 10, 11, 12, 13, 13, 13], // 30 <= db < 50\n[1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11, 12, 12, 12, 13], // 50 <= db < 70\n[1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 8, 9, 10, 10, 11, 12, 12, 13], // 70 <= db < 90\n[1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 8, 9, 10, 10, 11, 12, 12, 13], // 90 <= db < 109\n[1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 8, 9, 10, 10, 11, 12, 12, 12] // 109 <= db < 200\n]; // Fosberg's Table B. 1-h Fuel Moisture Corrections - May, Jun, Jul\n\nconst FosbergBExposed = [// 0800-0959  1000-1159   1200-1359 1400-1559  1600-1759  1800-1959\n[// 0 = north\n[[2, 3, 4], [1, 1, 1], [0, 0, 1], [0, 0, 1], [1, 1, 1], [2, 3, 4]], // N <= 30%\n[[3, 4, 4], [1, 2, 2], [1, 1, 2], [1, 1, 2], [1, 2, 2], [3, 4, 4]] // N > 30%\n], [// 1 = east\n[[2, 2, 3], [1, 1, 1], [0, 0, 1], [0, 0, 1], [1, 1, 2], [3, 4, 4]], // E <= 30%\n[[1, 2, 2], [0, 0, 1], [0, 0, 1], [1, 1, 2], [2, 3, 4], [4, 5, 6]] // E > 30%\n], [// 2 = south\n[[2, 3, 3], [1, 1, 1], [0, 0, 1], [0, 0, 1], [1, 1, 1], [2, 3, 3]], // S <= 30%\n[[2, 3, 3], [1, 1, 2], [0, 1, 1], [0, 1, 1], [1, 1, 2], [2, 3, 3]] // S > 30%\n], [// 3 = west\n[[2, 3, 4], [1, 1, 2], [0, 0, 1], [0, 0, 1], [0, 1, 1], [2, 3, 3]], // W <= 30%\n[[4, 5, 6], [2, 3, 4], [1, 1, 2], [0, 0, 1], [0, 0, 1], [1, 2, 2]] // W > 30%\n]];\nconst FosbergBShaded = [// 0800-0959  1000-1159   1200-1359 1400-1559  1600-1759  1800-1959\n[[[4, 5, 5], [3, 4, 5], [3, 3, 4], [3, 3, 4], [3, 4, 5], [4, 5, 5]]], // N\n[[[4, 4, 5], [3, 4, 5], [3, 3, 4], [3, 4, 4], [3, 4, 5], [4, 5, 6]]], // S\n[[[4, 4, 5], [3, 4, 5], [3, 3, 4], [3, 3, 4], [3, 4, 5], [4, 5, 5]]], // E\n[[[4, 5, 6], [3, 4, 5], [3, 3, 4], [3, 3, 4], [3, 4, 5], [4, 4, 5]]] // W\n]; // Fosberg's Table C. 1-h Fuel Moisture Corrections - Feb, Mar, Apr and Aug, Sep, oct\n\nconst FosbergCExposed = [[// 0 = north\n// 0800-0959  1000-1159  1200-1359  1400-1559  1600-1759  1800-1959\n[[3, 4, 5], [1, 2, 3], [1, 1, 2], [1, 1, 2], [1, 2, 3], [3, 4, 5]], // N <= 30%\n[[3, 4, 5], [3, 3, 4], [2, 3, 4], [2, 3, 4], [3, 3, 4], [3, 4, 5]] // N > 30%\n], [// 1 = east\n[[3, 4, 5], [1, 2, 3], [1, 1, 1], [1, 1, 2], [1, 2, 4], [3, 4, 5]], // E <= 30%\n[[3, 3, 4], [1, 1, 1], [1, 1, 1], [1, 2, 3], [3, 4, 5], [4, 5, 6]] // E > 30%\n], [// 2 = south\n[[3, 4, 5], [1, 2, 2], [1, 1, 1], [1, 1, 1], [1, 2, 3], [3, 4, 5]], // S <= 30%\n[[3, 4, 5], [1, 2, 2], [0, 1, 1], [0, 1, 1], [1, 2, 2], [3, 4, 5]] // S > 30%\n], [// 3 = west\n[[3, 4, 5], [1, 2, 3], [1, 1, 1], [1, 1, 1], [1, 2, 3], [3, 4, 5]], // W <= 30%\n[[4, 5, 6], [3, 4, 5], [1, 2, 3], [1, 1, 1], [1, 1, 1], [3, 3, 4]] // W > 30%\n]];\nconst FosbergCShaded = [// 0800-0959  1000-1159   1200-1359 1400-1559  1600-1759  1800-1959\n[[[4, 5, 6], [4, 5, 5], [3, 4, 5], [3, 4, 5], [4, 5, 5], [4, 5, 6]]], // N\n[[[4, 5, 6], [3, 4, 5], [3, 4, 5], [3, 4, 5], [4, 5, 6], [4, 5, 6]]], // S\n[[[4, 5, 6], [3, 4, 5], [3, 4, 5], [3, 4, 5], [3, 4, 5], [4, 5, 6]]], // E\n[[[4, 5, 6], [4, 5, 6], [3, 4, 5], [3, 4, 5], [3, 4, 5], [4, 5, 6]]] // W\n]; // Fosberg's Table D. 1-h Fuel Moisture Corrections - Nov, Dec, Jan\n\nconst FosbergDExposed = [[// 0 = north\n// 0800-0959  1000-1159  1200-1359  1400-1559  1600-1759  1800-1959\n[[4, 5, 6], [3, 4, 5], [2, 3, 4], [2, 3, 4], [3, 4, 5], [4, 5, 6]], // N <= 30%\n[[4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6]] // N > 30%\n], [// 1 = east\n[[4, 5, 6], [3, 4, 4], [2, 3, 3], [2, 3, 3], [3, 4, 5], [4, 5, 6]], // E <= 30%\n[[4, 5, 6], [2, 3, 4], [2, 2, 3], [3, 4, 4], [4, 5, 6], [4, 5, 6]] // E > 30%\n], [// 2 = south\n[[4, 5, 6], [3, 4, 5], [2, 3, 3], [2, 2, 3], [3, 4, 4], [4, 5, 6]], // S <= 30%\n[[4, 5, 6], [2, 3, 3], [1, 1, 2], [1, 1, 2], [2, 3, 3], [4, 5, 6]] // S > 30%\n], [// 3 = west\n[[4, 5, 6], [3, 4, 5], [2, 3, 3], [2, 3, 3], [3, 4, 4], [4, 5, 6]], // W <= 30%\n[[4, 5, 6], [4, 5, 6], [3, 4, 4], [2, 2, 3], [2, 3, 4], [4, 5, 6]] // W > 30%\n]];\nconst FosbergDShaded = [// 0800-0959  1000-1159   1200-1359 1400-1559  1600-1759  1800-1959\n[[[4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 5], [4, 5, 6]]], // N\n[[[4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 5], [4, 5, 6]]], // E\n[[[4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 5], [4, 5, 6]]], // S\n[[[4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 6], [4, 5, 5], [4, 5, 6]]] // W\n];\nconst Correction = [[FosbergBExposed, FosbergBShaded], // 0 = Table B, May, Jun, Jul\n[FosbergCExposed, FosbergCShaded], // 1 = Table C, Feb, Mar, Apr and Aug, Sep, Oct\n[FosbergDExposed, FosbergDShaded] // 2 = Table D, Nov, Dec, Jan\n]; // Mapping from compass quadrant to aspect index\n\nconst Aspect = [0, 1, 1, 2, 2, 3, 3, 0, 0, 0]; // N=0, E=1, S=2, W=3\n// Mapping from month to correction table index\n//             x, J, F, M, A, M, J, J, A, S, O, N, D\n\nconst Month = [2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 2, 2];\n/**\n * Estimates 1-h fuel moisture from Fosberg's tables\n * @param {number} db Dry bulb temperature (oF)\n * @param {number} rh Relative humidity (ratio)\n * @param {number} month Month number (Jan=1, Dec = 12)\n * @param {number} shading Shading of surface fuels (shaded fraction)\n * @param {number} aspect Aspect (degrees from north)\n * @param {number} slope Slope steepness (ratio of rise / reach)\n * @param {number} hour Hour of the day (midnight=0, 6am=6, noon=12, 6pm = 18)\n * @param {number} elevDiff Elevation diff from db & rh obs to site (+- ft)\n * @returns {number} 1-h fuel moisture correction (ratio)\n */\n\nfunction fosbergDead1h(reference, correction) {\n  return reference + correction;\n}\nfunction fosbergDead10h(fm1) {\n  return fm1 + 0.02;\n}\nfunction fosbergDead100h(fm1) {\n  return fm1 + 0.04;\n}\n/**\n * Returns Fosberg's 'Reference Fuel Moisture'\n * @param {number} db Dry bulb temperature (oF)\n * @param {number} rh Relative humidity (ratio)\n * @returns {number} Reference fuel moisture (ratio)\n */\n\nfunction fosbergReference(db, rh) {\n  const dbIdx = Math.min(Math.max(0, Math.floor((db - 10) / 20)), 5);\n  const rhIdx = Math.min(Math.max(0, Math.floor(100 * rh / 5)), 19); // console.log('dbIdx', dbIdx, 'rhIdx', rhIdx)\n\n  return 0.01 * FosbergA[dbIdx][rhIdx];\n}\n/**\n * Returns Fosberg's 1-hr Fuel Moisture correction\n * @param {number} month Month number (Jan=1, Dec = 12)\n * @param {number} shading Shading of surface fuels (shaded fraction)\n * @param {number} aspect Aspect (degrees from north)\n * @param {number} slope Slope steepness (ratio of rise / reach)\n * @param {number} hour Hour of the day (midnight=0, 6am=6, noon=12, 6pm = 18)\n * @param {number} elevDiff Elevation diff from db & rh obs to site (+- ft)\n * @returns {number} 1-h fuel moisture correction (ratio)\n */\n\nfunction fosbergCorrection(month, shading, aspect, slope, hour, elevDiff) {\n  // First determine the appropriate seasonal-shading table to apply\n  const monthCat = Month[month]; // Crosswalk for seasonal correction tables\n  // Fine fuel may  be shaded by canopy, cloud cover, or nighttime\n\n  const shadeCat = shading < 0.5 && hour >= 8 && hour < 20 ? 0 : 1;\n  const table = Correction[monthCat][shadeCat]; // Crosswalk from compass quadrant to aspect index\n\n  const quadrant = Math.floor(aspect / 45);\n  const aspectCat = Aspect[quadrant]; // 2 slope categories for exposed, but just 1 for shaded conditions\n\n  const slopeCat = slope <= 0.3 ? 0 : shadeCat ? 0 : 1; // All hours outside 0800-2000 are assigned to idx 0 (0800-0959)\n\n  const hourCat = Math.min(Math.max(Math.floor((hour - 8) / 2), 0), 5);\n  const elevCat = elevDiff < -1000 ? 0 : elevDiff > 1000 ? 2 : 1; // console.log(`mon:${month}=${monthCat} shade:${shading}=${shadeCat} asp:${aspect}=${aspectCat} slp:${slope}=${slopeCat} hr:${hour}=${hourCat} elev:${elevDiff}=${elevCat}`)\n\n  return 0.01 * table[aspectCat][slopeCat][hourCat][elevCat];\n}\n\nvar FuelMoisture = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  FosbergA: FosbergA,\n  FosbergBExposed: FosbergBExposed,\n  FosbergBShaded: FosbergBShaded,\n  FosbergCExposed: FosbergCExposed,\n  FosbergCShaded: FosbergCShaded,\n  FosbergDExposed: FosbergDExposed,\n  FosbergDShaded: FosbergDShaded,\n  fosbergDead1h: fosbergDead1h,\n  fosbergDead10h: fosbergDead10h,\n  fosbergDead100h: fosbergDead100h,\n  fosbergReference: fosbergReference,\n  fosbergCorrection: fosbergCorrection\n});\n\n/**\n * @file Fuel particle equations as implemented by BehavePlus v6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Calculate and return a fuel particle diameter (ft+1)\n * from a surface area-to-volume ratio (ft-1).\n *\n * The diameter is derived using Rothermel (1972) equation 32 (p 14).\n *\n * @param float savr Fuel particle surface area-to-volume ratio (ft-1).\n *\n * @return float Fuel particle diameter (ft+1).\n */\n\nfunction cylindricalDiameter(savr) {\n  return divide(4, savr);\n}\n/**\n * Calculate and return the length (ft+1) of a hypothetical cylindrical\n * fuel particle given its diameter (ft+1) and volume (ft+3).\n *\n * @param float diam Fuel particle diameter (ft+1).\n * @param float volm Fuel particle volume (ft+3).\n *\n * @return float Fuel particle length (ft+1).\n */\n\nfunction cylindricalLength(diam, volm) {\n  const radius = diam / 2;\n  const area = Math.PI * radius * radius;\n  return divide(volm, area);\n}\n/**\n * Calculate and return a fuel particle effective heating number (fraction)\n * from a surface area-to-volume ratio (ft-1).\n *\n * The effective heating number is derived from Rothermel (1972) equation 14\n * (p 8, 26) and 77 (p 32).\n *\n * @param float savr Fuel particle surface area-to-volume ratio (ft-1).\n *\n * @return float Fuel particle effective heating number (fraction).\n */\n\nfunction effectiveHeatingNumber(savr) {\n  return savr <= 0 ? 0 : Math.exp(-138 / savr);\n}\n/**\n * Calculate and return the dead fuel particle `fine fuel load`.\n *\n * The `fine fuel load` is the portion of the fuel particle\n * load used to determine the life category fine fuel,\n * which in turn is used to determine the live category\n * moisture content of extinction.\n *\n * See Rothermel (1972) equation 88 on page 35.\n *\n * @param string life The fuel particle life category: 'dead' or 'live'.\n * @param real savr The fuel particle surface area-to-volume ratio (ft-1).\n * @param real load The fuel particle load (lb/ft2).\n *\n * @return real Fuel particle ignition fuel load (lb/ft2).\n */\n\nfunction effectiveFuelLoad(savr, load, life) {\n  return life === 'dead' ? effectiveFuelLoadDead(savr, load) : effectiveFuelLoadLive(savr, load);\n}\nfunction effectiveFuelLoadDead(savr, load) {\n  return savr <= 0 ? 0 : load * Math.exp(-138 / savr);\n} // Calculate and return the live fuel particle `fine fuel load`.\n\nfunction effectiveFuelLoadLive(savr, load) {\n  return savr <= 0 ? 0 : load * Math.exp(-500 / savr);\n} // Calculate and return the ignition fuel water load (lb water + 1 lb fuel -1)\n\nfunction effectiveFuelWaterLoad(effectiveFuelOvendryLoad, moistureContent) {\n  return effectiveFuelOvendryLoad * moistureContent;\n}\n/**\n * Calculate the fuel particle heat of pre-ignition.\n * @return real The fuel particle heat of pre-ignition (btu+1 lb-1).\n */\n\nfunction heatOfPreignition(mc, efhn) {\n  const qig = 250.0 + 1116.0 * mc;\n  return qig * efhn;\n}\nfunction netOvendryLoad(ovendryFuelLoad, totalMineralContent) {\n  return (1 - totalMineralContent) * ovendryFuelLoad;\n}\nfunction selectByDomain(domain, behave, chaparral, palmetto, waspen) {\n  if (domain === 'behave') {\n    return behave;\n  } else if (domain === 'chaparral') {\n    return chaparral;\n  } else if (domain === 'palmettoGallberry') {\n    return palmetto;\n  } else if (domain === 'westernAspen') {\n    return waspen;\n  }\n\n  throw new Error(`Unknown domain '${domain}'`);\n}\n/**\n * Calculate and return the fuel particle size class [0-5]\n * given its surface area-to-volume ratio (ft-1).\n *\n * The Rothermel fire spread model groups dead and down fuel particles into\n * one of 6 size classes based upon its diameter (or surface area-to-volume ratio)\n * as follows:\n *\n *<table>\n *<tr><td>Size Class</td><td>Diameter (in)</td><td>Surface Area-to-Vol</td><td>Time-lag</td></tr>\n *  <tr><td>0</td><td>0.00 - 0.04</td><td>&gt 1200</td><td>1</td></tr>\n *  <tr><td>1</td><td>0.04 - 0.25</td><td>192 - 1200</td><td>1</td></tr>\n *  <tr><td>2</td><td>0.25 - 0.50</td><td>96 - 192</td><td>10</td></tr>\n *  <tr><td>3</td><td>0.50 - 1.00</td><td>48 - 96</td><td>10</td></tr>\n *  <tr><td>4</td><td>1.00 - 3.00</td><td>16 - 48</td><td>100</td></tr>\n *  <tr><td>5</td><td>&gt 3.00</td><td>&lt 16</td><td>1000</td></tr>\n * </table>\n *\n * @param {number} savr Fuel particle surface area-to-volume ratio (ft-1).\n *\n * @return {integer} Fuel particle size class [0..5].\n */\n\nfunction sizeClass(savr) {\n  let size = 5; // 3.00+ \"\n\n  if (savr >= 1200.0) {\n    // 0.00 - 0.04\"\n    size = 0;\n  } else if (savr >= 192.0) {\n    // 0.04 - 0.25\"\n    size = 1;\n  } else if (savr >= 96.0) {\n    // 0.25 - 0.50\"\n    size = 2;\n  } else if (savr >= 48.0) {\n    // 0.50 - 1.00\"\n    size = 3;\n  } else if (savr >= 16.0) {\n    // 1.00 - 3.00\"\n    size = 4;\n  }\n\n  return size;\n}\nfunction sizeClassWeightingFactor(size, swtgArray) {\n  return swtgArray[size];\n}\n/**\n * Calculate and return the fuel particle surface area (ft+2)\n * given its load (lb+1 ft-2), surface area-to-volume ratio (ft-1),\n * and fiber density (lb+1 ft-3).\n *\n * @param float load Fuel particle load (lb+1 ft-2).\n * @param float savr Fuel particle surface area-to-volume ratio (ft-1).\n * @param float density Fuel particle fiber density (lb+1 ft-3).\n *\n * @return float Fuel particle surface area (ft+2).\n */\n\nfunction surfaceArea(load, savr, dens) {\n  return divide(load * savr, dens);\n}\nfunction surfaceAreaWeightingFactor(area, catArea) {\n  return fraction(divide(area, catArea));\n}\n/**\n * Calculate and return the fuel particle volume (ft3/ft2)\n * given its a load (lb/ft2) and fiber density (lb/ft3).\n *\n * @param {number} load Fuel particle ovendry load (lb/ft2).\n * @param {number} dens Fuel particle fiber density (lb/ft3).\n *\n * @return float Fuel particle volume per square foot of fuel bed (ft3/ft2).\n */\n\nfunction volume(load, dens) {\n  return divide(load, dens);\n}\n\nvar FuelParticle = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  cylindricalDiameter: cylindricalDiameter,\n  cylindricalLength: cylindricalLength,\n  effectiveHeatingNumber: effectiveHeatingNumber,\n  effectiveFuelLoad: effectiveFuelLoad,\n  effectiveFuelLoadDead: effectiveFuelLoadDead,\n  effectiveFuelLoadLive: effectiveFuelLoadLive,\n  effectiveFuelWaterLoad: effectiveFuelWaterLoad,\n  heatOfPreignition: heatOfPreignition,\n  netOvendryLoad: netOvendryLoad,\n  selectByDomain: selectByDomain,\n  sizeClass: sizeClass,\n  sizeClassWeightingFactor: sizeClassWeightingFactor,\n  surfaceArea: surfaceArea,\n  surfaceAreaWeightingFactor: surfaceAreaWeightingFactor,\n  volume: volume\n});\n\n/**\n * @file Surface fire and lightning strike ignition probability equations\n * as described by Latham () as described by Albini (1998) and\n * as implemented by BehavePlus v6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Calculates the probability of a surface fire firebrand starting a fire.\n *\n * @param {number} fuelTemperature  Dead surface fuel temperature (oF).\n * @param {number} fuelMoisture     Dead 1-hour time-lag surface fuel moisture content (lb/lb).\n * @return Probability of a firebrand starting a fire [0..1].\n */\n\nfunction firebrand(fuelTemperature, fuelMoisture) {\n  const c = (fuelTemperature - 32) * 5 / 9;\n  const qign = Math.min(144.51 - 0.266 * c - 0.00058 * c * c - c * fuelMoisture + 18.54 * (1 - Math.exp(-15.1 * fuelMoisture)) + 640 * fuelMoisture, 400);\n  const x = 0.1 * (400 - qign);\n  return fraction(0.000048 * Math.pow(x, 4.3) / 50);\n}\n/**\n * Calculates the fuel temperature using the BEHAVE FIRE2 subroutine CAIGN() algorithm.\n *\n *  @param airTemp        Air temperature (oF).\n *  @param shadeFraction  Fraction of sun shaded from the fuel.\n *  @return Fuel temperature (oF).\n */\n\nfunction fuelTemperature(airTemp, shadeFraction) {\n  const xincr = 25 - 20 * shadeFraction;\n  return airTemp + xincr;\n} // Probability of a continuing current by charge type (Latham)\n\nconst ccNeg = 0.2;\nconst ccPos = 0.9;\nconst lightningData = {\n  ponderosaPineLitter: {\n    label: 'Ponderosa pine litter',\n    positive: function (arg) {\n      return ccPos * (0.92 * Math.exp(-0.087 * arg.moisture));\n    },\n    negative: function (arg) {\n      return ccNeg * (1.04 * Math.exp(-0.054 * arg.moisture));\n    }\n  },\n  punkyWoodRottenChunky: {\n    label: 'Punky wood, rotten, chunky',\n    positive: function (arg) {\n      return ccPos * (0.44 * Math.exp(-0.11 * arg.moisture));\n    },\n    negative: function (arg) {\n      return ccNeg * (0.59 * Math.exp(-0.094 * arg.moisture));\n    }\n  },\n  punkyWoodPowderDeep: {\n    label: 'Punky wood powder, deep (4.8 cm)',\n    positive: function (arg) {\n      return ccPos * (0.86 * Math.exp(-0.06 * arg.moisture));\n    },\n    negative: function (arg) {\n      return ccNeg * (0.9 * Math.exp(-0.056 * arg.moisture));\n    }\n  },\n  punkyWoodPowderShallow: {\n    label: 'Punk wood powder, shallow (2.4 cm)',\n    positive: function (arg) {\n      return ccPos * (0.6 - 0.011 * arg.moisture);\n    },\n    negative: function (arg) {\n      return ccNeg * (0.73 - 0.011 * arg.moisture);\n    }\n  },\n  lodgepolePineDuff: {\n    label: 'Lodgepole pine duff',\n    positive: function (arg) {\n      return ccPos * (1 / (1 + Math.exp(5.13 - 0.68 * arg.depth)));\n    },\n    negative: function (arg) {\n      return ccNeg * (1 / (1 + Math.exp(3.84 - 0.6 * arg.depth)));\n    }\n  },\n  douglasFirDuff: {\n    label: 'Douglas-fir duff',\n    positive: function (arg) {\n      return ccPos * (1 / (1 + Math.exp(6.69 - 1.39 * arg.depth)));\n    },\n    negative: function (arg) {\n      return ccNeg * (1 / (1 + Math.exp(5.48 - 1.28 * arg.depth)));\n    }\n  },\n  highAltitudeMixed: {\n    label: 'High altitude mixed (mainly Engelmann spruce)',\n    positive: function (arg) {\n      return ccPos * (0.62 * Math.exp(-0.05 * arg.moisture));\n    },\n    negative: function (arg) {\n      return ccNeg * (0.8 - 0.014 * arg.moisture);\n    }\n  },\n  peatMoss: {\n    label: 'Peat moss (commercial)',\n    positive: function (arg) {\n      return ccPos * (0.71 * Math.exp(-0.07 * arg.moisture));\n    },\n    negative: function (arg) {\n      return ccNeg * (0.84 * Math.exp(-0.06 * arg.moisture));\n    }\n  }\n};\nconst LightningCharges = ['negative', 'positive', 'unknown'];\nconst LightningFuels = Object.keys(lightningData);\n/**\n * Calculates the probability of a lightning strike starting a fire.\n *\n *  @param fuelType Ignition fuel bed type:\n *  @param depth    Ignition fuel (duff & litter) bed depth (inches).\n *  @param duffMoisture Ignition fuel (duff & litter 100-h) moisture content (lb/lb).\n *  @param chargeType Lightning charge, one of 'positive', 'negative', or 'unknown'\n *  @return Probability of the lightning strike starting a fire [0..1].\n *\n *  \\note  The following assumptions are made by Latham:\n *  - 20% of negative flashes have continuing current\n *  - 90% of positive flashes have continuing current\n *  - Latham and Schlieter found a relative frequency of\n *    0.723 negative and 0.277 positive strikes\n *  - Unknown strikes are therefore p = 0.1446 neg + 0.2493 pos\n */\n\nfunction lightningStrike(fuelType, depth, moisture, chargeType) {\n  // Convert duff depth to cm and restrict to maximum of 10 cm.\n  // Convert duff moisture to percent and restrict to maximum of 40%.\n  const args = {\n    depth: Math.min(30.48 * depth, 10),\n    moisture: Math.min(100 * moisture, 40)\n  }; // If 'positive' or 'negative'...\n\n  if (chargeType === 'positive' || chargeType === 'negative') {\n    return fraction(lightningData[fuelType][chargeType](args));\n  } // Otherwise, return a positive/negative frequency-weighted value using\n  // Latham and Schlieter's relative frequency of a continuing current by charge type\n\n\n  const freqNeg = 0.723;\n  const freqPos = 0.277;\n  const pos = fraction(lightningData[fuelType].positive(args));\n  const neg = fraction(lightningData[fuelType].negative(args));\n  return fraction(freqPos * pos + freqNeg * neg);\n}\n\nvar IgnitionProbability$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  firebrand: firebrand,\n  fuelTemperature: fuelTemperature,\n  lightningData: lightningData,\n  LightningCharges: LightningCharges,\n  LightningFuels: LightningFuels,\n  lightningStrike: lightningStrike\n});\n\n/**\n * @file Palmetto-gallberry dynamic fuel model equations\n * as described by Hough and Albini (1978) and as implemented by BehavePlus V6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n\nfunction deadFineLoad$1(age, ht) {\n  return positive(-0.00121 + 0.00379 * Math.log(age) + 0.00118 * ht * ht);\n} // dead 0.25 to 1 inch\n\nfunction deadSmallLoad$1(age, cover) {\n  return positive(-0.00775 + 0.00021 * cover + 0.00007 * age * age);\n} // dead foliage\n\nfunction deadFoliageLoad(age, cover) {\n  return 0.00221 * age ** 0.51263 * Math.exp(0.02482 * cover);\n} // L layer\n\nfunction deadLitterLoad(age, basalArea) {\n  return (0.03632 + 0.0005336 * basalArea) * (1.0 - 0.25 ** age);\n}\nfunction fuelDepth(ht) {\n  return Math.max(0.01, 2.0 * ht / 3.0);\n} // live 0 to 0.25 inch\n\nfunction liveFineLoad(age, ht) {\n  return positive(0.00546 + 0.00092 * age + 0.00212 * ht * ht);\n} // live 0.25 to 1 inch\n\nfunction liveSmallLoad(age, ht) {\n  return positive(-0.02128 + 0.00014 * age * age + 0.00314 * ht * ht);\n} // live foliage\n\nfunction liveFoliageLoad(age, cover, ht) {\n  return positive(-0.0036 + 0.00253 * age + 0.00049 * cover + 0.00282 * ht * ht);\n}\n\nvar PalmettoGallberryFuel = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  deadFineLoad: deadFineLoad$1,\n  deadSmallLoad: deadSmallLoad$1,\n  deadFoliageLoad: deadFoliageLoad,\n  deadLitterLoad: deadLitterLoad,\n  fuelDepth: fuelDepth,\n  liveFineLoad: liveFineLoad,\n  liveSmallLoad: liveSmallLoad,\n  liveFoliageLoad: liveFoliageLoad\n});\n\n/**\n * @file Exported WFSP equations for spotting distance from a burning pile,\n * torching trees, and surface fire as implemented by BehavePlus V6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n// Spot distance terrain location parameters\nconst Location = {\n  midslopeWindward: {\n    factor: 0,\n    label: 'Midslope, Windward'\n  },\n  valleyBottom: {\n    factor: 1,\n    label: 'Valley Bottom'\n  },\n  midslopeLeeward: {\n    factor: 2,\n    label: 'Midslope, Leeward'\n  },\n  ridgeTop: {\n    factor: 3,\n    label: 'Ridge Top'\n  }\n};\nconst locations = () => Object.keys(Location);\n/**\n * Torching tree spotting distance supported species parameters\n *\n * The primary key is the 4-5 character FOFEM5 genus-species code.\n * The tree species properties are:\n * - common: common name,\n * - scientific: scientific name,\n * - height: flame height computation parameter,\n * - duration: flame duration computation parameter,\n */\n\nconst TorchingTreeSpecies = ['ABBA', 'ABGR', 'ABLA', 'PICO', 'PIEC2', 'PIEL', 'PIEN', 'PIMO3', 'PIPA2', 'PIPO', 'PISE', 'PITA', 'PSME', 'TSHE', 'LAOC', 'THPL'];\nconst TorchingSteadyFlame = {\n  ABBA: {\n    common: 'balsam fir',\n    scientific: 'Abies balsamea',\n    height: [16.5, 0.515],\n    duration: [10.7, -0.278]\n  },\n  ABGR: {\n    common: 'grand fir',\n    scientific: 'Abies grandis',\n    height: [16.5, 0.515],\n    duration: [10.7, -0.278]\n  },\n  ABLA: {\n    common: 'subalpine fir',\n    scientific: 'Abies lasiocarpa',\n    height: [15.7, 0.451],\n    duration: [10.7, -0.278]\n  },\n  PICO: {\n    common: 'lodgepole pine',\n    scientific: 'Pinus contorta',\n    height: [12.9, 0.453],\n    duration: [12.6, -0.256]\n  },\n  PIEC2: {\n    common: 'shortleaf pine',\n    scientific: 'Pinus echinata',\n    height: [2.71, 1.0],\n    duration: [7.91, -0.344]\n  },\n  PIEL: {\n    common: 'slash pine',\n    scientific: 'Pinus elliottii',\n    height: [2.71, 1.0],\n    duration: [11.9, -0.389]\n  },\n  PIEN: {\n    common: 'Engelmann spruce',\n    scientific: 'Picea engelmannii',\n    height: [15.7, 0.451],\n    duration: [12.6, -0.256]\n  },\n  PIMO3: {\n    common: 'western white pine',\n    scientific: 'Pinus monticola',\n    height: [12.9, 0.453],\n    duration: [10.7, -0.278]\n  },\n  PIPA2: {\n    common: 'longleaf pine',\n    scientific: 'Pinus palustrus',\n    height: [2.71, 1.0],\n    duration: [11.9, -0.389]\n  },\n  PIPO: {\n    common: 'ponderosa pine',\n    scientific: 'Pinus ponderosa',\n    height: [12.9, 0.453],\n    duration: [12.6, -0.256]\n  },\n  PISE: {\n    common: 'pond pine',\n    scientific: 'Pinus serotina',\n    height: [2.71, 1.0],\n    duration: [7.91, -0.344]\n  },\n  PITA: {\n    common: 'loblolly pine',\n    scientific: 'Pinus taeda',\n    height: [2.71, 1.0],\n    duration: [13.5, -0.544]\n  },\n  PSME: {\n    common: 'Douglas-fir',\n    scientific: 'Pseudotsuga menziesii',\n    height: [15.7, 0.451],\n    duration: [10.7, -0.278]\n  },\n  TSHE: {\n    common: 'western hemlock',\n    scientific: 'Tsuga heterophylla',\n    height: [15.7, 0.451],\n    duration: [6.3, -0.249]\n  },\n  // This is an estimated guess,\n  // using the height parms used by PICO, PIPO, and PIMO3\n  // and the duration parms used by TSHE\n  LAOC: {\n    common: 'western larch',\n    scientific: '\"Larix occidentalis (guess)',\n    height: [12.9, 0.453],\n    duration: [6.3, -0.249]\n  },\n  // This is an estimated guess,\n  // using the height parms used by ABLA, PIEN, PSME, and TSHE\n  // and the duration parms used by PICO, PIEN, and PIPO\n  THPL: {\n    scientific: 'Thuja plicata',\n    common: 'western red cedar (guess)',\n    height: [15.7, 0.451],\n    duration: [12.6, -0.256]\n  }\n};\n/**\n * Adjusts down-wind canopy height based upon down-wind canopy cover\n * Added in BP6 by Issue #028FAH - Downwind Canopy Open/Closed\n *\n * @param {real} downWindCoverHt (ft+1)\n * @param {real} downWindCanopyIsOpen TRUE if down-wind canopy is open\n */\n\nfunction appliedDownWindCoverHeight(downWindCoverHt, downWindCanopyIsOpen) {\n  return downWindCanopyIsOpen ? 0.5 * downWindCoverHt : downWindCoverHt;\n}\n/**\n * \\brief Calculates maximum firebrand height (ft+1)\n * from a burning pile\n *\n * \\param flameHt Flame height (ft+1) from the burning pile\n * \\return Maximum firebrand height (ft+1) from a burning pile\n */\n\nfunction burningPileFirebrandHeight(flameHt) {\n  return Math.max(0.0, 12.2 * flameHt);\n}\n/**\n * \\brief Calculates minimum value of cover height\n * used in calculation of flat terrain spotting distance\n * using logarithmic variation with height.\n *\n * Used for burning pile and surface fire spotting distances.\n *\n * \\param firebrandHt Maximum firebrand height (ft+1)\n * \\param appliedDownWindCoverHeight Adjusted down-wind canopy height\n *   based upon down-wind canopy cover (ft+1)\n * \\return Minimum value of cover ht (ft+1) used in calculation\n * of flat terrain spotting distance.\n */\n\nfunction criticalCoverHeight(firebrandHt, appliedDownWindCoverHeight) {\n  const criticalHt = firebrandHt > 0 ? 2.2 * Math.pow(firebrandHt, 0.337) - 4 : 0;\n  return Math.max(appliedDownWindCoverHeight, criticalHt);\n}\n/**\n * \\brief Calculates maximum spotting distance over flat terrain\n * for burning piles, torching trees, and surface fires.\n *\n * \\param firebrandHt Maximum firebrand height (ft+1)\n * \\param criticalCoverHeight Downwind tree/vegetation cover height (ft)\n * \\param u20 Wind speed at 20 ft (ft+1 min-1)\n *\n * \\return Maximum spotting distance (ft+1) over flat terrain\n */\n\nfunction distanceFlatTerrain(firebrandHt, criticalCoverHeight, u20) {\n  // Wind speed must be converted to mi/h\n  return criticalCoverHeight <= 0 || firebrandHt <= 0 ? 0 : 5280 * 0.000718 * (u20 / 88) * Math.sqrt(criticalCoverHeight) * (0.362 + Math.sqrt(firebrandHt / criticalCoverHeight) / 2 * Math.log(firebrandHt / criticalCoverHeight));\n}\nfunction distanceFlatTerrainWithDrift(flatDistance, drift) {\n  return flatDistance + drift;\n}\n/*\n * \\brief Calculates maximum spotting distance adjusted for mountain terrain.\n *\n * \\param flatDistFt Maximum spotting distance over flat terrain (ft+1).\n * \\param locationKey location property name\n *  ('midslopeWindward', 'valleyBottom', 'midslopeLeeward', 'ridgetop').\n * \\param rvDist Horizontal distance from ridge top to valley bottom (ft+1).\n * \\param rvElev Vertical distance from ridge top to valley bottom (ft+1).\n *\n * \\return Maximum spotting distance (ft+1) over mountainous terrain\n */\n\nfunction distanceMountainTerrain(flatDistFt, locationKey, rvDistFt, rvElev) {\n  const flatDist = flatDistFt / 5280;\n  const rvDist = rvDistFt / 5280;\n  let mtnDist = flatDist;\n\n  if (rvElev > 0 && rvDist > 0) {\n    const a1 = flatDist / rvDist;\n    const b1 = rvElev / (10 * Math.PI) / 1000;\n    const factor = Location[locationKey].factor;\n    let x = a1;\n\n    for (let i = 0; i < 6; i++) {\n      x = a1 - b1 * (Math.cos(Math.PI * x - factor * Math.PI / 2) - Math.cos(factor * Math.PI / 2));\n    }\n\n    mtnDist = x * rvDist;\n  }\n\n  return mtnDist * 5280;\n}\n/**\n * \\brief Calculates critical down-wind cover height (ft+1)\n * for a surface fire.\n *\n * \\param firebrandHt Maximum firebrand height (ft+1)\n * \\param appliedDownWindCoverHeight Adjusted down-wind canopy height\n *   based upon down-wind canopy cover (ft+1)\n * \\return Critical down-wind cover height (ft+1)\n */\n\nfunction surfaceFirecriticalCoverHeight(firebrandHt, appliedDownWindCoverHeight) {\n  return criticalCoverHeight(firebrandHt, appliedDownWindCoverHeight);\n}\n/**\n * Calculates surface fire firebrand down-wind drift distance (ft+1).\n * @param {real} firebrandHt  Firebrand loft hight (ft+1)\n * @param {real} u20 Wind speed at 20-ft (ft+1 min-1).\n */\n\nfunction surfaceFireFirebrandDrift(firebrandHt, u20) {\n  return firebrandHt <= 0 ? 0 : 5280 * 0.000278 * (u20 / 88) * Math.pow(firebrandHt, 0.643);\n}\n/**\n * \\brief Calculates maximum firebrand height (ft+1) from a surface fire\n *\n * \\param firelineIntensity Surface fireline intensity (btu+1 ft-1 s-1)\n * \\param u20 Wind speed at 20-ft (ft+1 min-1)\n *\n * \\return Maximum firebrand height (ft+1)\n */\n\nfunction surfaceFireFirebrandHeight(firelineIntensity, u20) {\n  if (u20 > 0 && firelineIntensity > 0) {\n    // f is a function relating thermal energy to windspeed.\n    const f = 322 * Math.pow(0.474 * (u20 / 88), -1.01); // Initial firebrand height (ft).\n\n    return 1.055 * Math.sqrt(f * firelineIntensity);\n  }\n\n  return 0;\n}\n/**\n * Torching trees firebrand ht (ft+1)\n *\n * \\param treeHt Tree height (ft+1) of the torching trees\n * \\param flameHt Steady flame height (ft+1) of the toching trees\n *  as calculated by torchingTreesSteadyFlameHeight()\n * \\param flameDur Steady flame duration (min+1) of the toching trees\n *  as calculated by torchingTreesSteadyFlameDuration()\n *\n * \\return Maximum firebrand height (ft+1)\n */\n\nfunction torchingTreesFirebrandHeight(treeHt, flameHt, flameDur) {\n  const parms = [{\n    a: 4.24,\n    b: 0.332\n  }, {\n    a: 3.64,\n    b: 0.391\n  }, {\n    a: 2.78,\n    b: 0.418\n  }, {\n    a: 4.7,\n    b: 0.0\n  }];\n  const ratio = flameHt <= 0 ? 0 : treeHt / flameHt;\n  let idx = 3;\n\n  if (ratio >= 1) {\n    idx = 0;\n  } else if (ratio >= 0.5) {\n    idx = 1;\n  } else if (flameDur < 3.5) {\n    idx = 2;\n  }\n\n  return parms[idx].a * Math.pow(flameDur, parms[idx].b) * flameHt + 0.5 * treeHt;\n}\n/**\n * \\brief Calculates steady state flame duration (min+1) of the toching trees\n *\n * \\param species Species label of the torching trees\n * \\param dbh Dbh of the torching trees (in+1)\n * \\param trees Number of torching trees\n *\n * \\return Flame duration (min+1) of torching trees\n */\n\nfunction torchingTreesSteadyFlameDuration(species, dbh, trees) {\n  return TorchingSteadyFlame[species].duration[0] * Math.pow(dbh, TorchingSteadyFlame[species].duration[1]) * Math.pow(trees, -0.2);\n}\n/**\n * \\brief Calculates steady state flame height (ft+1) of the torching trees\n *\n * \\param species Species label of the torching trees\n * \\param dbh Dbh (in+1) of the torching trees\n * \\param trees Number of torching trees\n * \\return Steady state flame height (ft+1) of the torching trees\n */\n\nfunction torchingTreesSteadyFlameHeight(species, dbh, trees) {\n  return TorchingSteadyFlame[species].height[0] * Math.pow(dbh, TorchingSteadyFlame[species].height[1]) * Math.pow(trees, 0.4);\n}\n\nvar Spotting = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Location: Location,\n  locations: locations,\n  TorchingTreeSpecies: TorchingTreeSpecies,\n  TorchingSteadyFlame: TorchingSteadyFlame,\n  appliedDownWindCoverHeight: appliedDownWindCoverHeight,\n  burningPileFirebrandHeight: burningPileFirebrandHeight,\n  criticalCoverHeight: criticalCoverHeight,\n  distanceFlatTerrain: distanceFlatTerrain,\n  distanceFlatTerrainWithDrift: distanceFlatTerrainWithDrift,\n  distanceMountainTerrain: distanceMountainTerrain,\n  surfaceFirecriticalCoverHeight: surfaceFirecriticalCoverHeight,\n  surfaceFireFirebrandDrift: surfaceFireFirebrandDrift,\n  surfaceFireFirebrandHeight: surfaceFireFirebrandHeight,\n  torchingTreesFirebrandHeight: torchingTreesFirebrandHeight,\n  torchingTreesSteadyFlameDuration: torchingTreesSteadyFlameDuration,\n  torchingTreesSteadyFlameHeight: torchingTreesSteadyFlameHeight\n});\n\n/**\r\n * @file Surface fire functions as described by Rothermel 1972.\r\n *\r\n * Library of algorithms implementing the Rothermel (1972) mathematical model\r\n * of surface fire spread rate and direction of maximum spread from upslope.\r\n *\r\n * It also includes a few of the fundamental Byram and Thomas equations for\r\n * fireline intensity, flame length, and scorch height.  All equations\r\n * relating to fire elliptical growth are in BpxLibFireEllipse.\r\n *\r\n * All algorithms in this class are implemented as pure export function methods,\r\n * returning a single property.\r\n *\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n **/\nfunction arithmeticMeanSpreadRate(cover1, ros1, ros2) {\n  return cover1 * ros1 + (1 - cover1) * ros2;\n}\n/**\r\n * Calculate the `effective wind speed` of a combined slope-plus-wind spread rate coefficient.\r\n *\r\n * The `effective` wind speed is the theoretical wind speed that yields the same\r\n * spread rate coefficient as the combined slope-plus-wind spread rate coefficient.\r\n *\r\n * @param phiew The sum of the slope and wind coefficients.\r\n * @param windB Fuel bed wind factor B.\r\n * @param windI Fuel bed wind factor I.\r\n * @return The effective wind speed for the slope-plus-wind coefficient (ft+1 min-1).\r\n */\n\nfunction effectiveWindSpeed(phiew, windB, windI) {\n  let ews = 0;\n\n  if (phiew > 0 && windB > 0 && windI > 0) {\n    const a = phiew * windI;\n    const b = 1.0 / windB;\n    ews = Math.pow(a, b);\n  }\n\n  return ews;\n}\n/**\r\n * Calculate the effective wind speed (ft+1 min-1) from the length-to-width ratio.\r\n *\r\n * This uses Anderson's (1983) equation.\r\n *\r\n * @param lwr The fire ellipse length-to-width ratio (ratio).\r\n * @return The effective wind speed (ft+1 min-1).\r\n */\n\nfunction effectiveWindSpeedFromLwr(lwr) {\n  return 88 * (4 * (lwr - 1));\n}\n/**\r\n * Calculate the maximum effective wind speed limit\r\n * as per Rothermel (1972) equation 86 on page 33.\r\n *\r\n * @param rxi Fire reaction intensity (btu+1 ft-2 min-1).\r\n * @return The maximum effective wind speed limit (ft+1 min-1).\r\n */\n\nfunction effectiveWindSpeedLimit(rxi) {\n  return 0.9 * rxi;\n}\nfunction expectedValueSpreadRateMOCK(cover1, ros1, ros2) {\n  return 0.5 * (arithmeticMeanSpreadRate(cover1, ros1, ros2) + harmonicMeanSpreadRate(cover1, ros1, ros2));\n}\n/**\r\n * Calculate the fire heading direction (degrees clockwise from north).\r\n *\r\n * @param upslopeFromNorth Upslope direction (degrees clockwise from north).\r\n * @param headingFromUpslope Fire heading direction (degrees clockwise from the upslope direction).\r\n * @return The fire heading direction (degrees clockwise from north).\r\n */\n// export function headingFromNorth(upslopeFromNorth, headingFromUpslope) {\n//   return compass.constrain(upslopeFromNorth + headingFromUpslope)\n// }\n\n/**\r\n * Calculate the fireline intensity (btu+1 ft-1 s-1) from spread rate,\r\n * reaction intensity, and residence time.\r\n *\r\n * @param ros The fire spread rate (ft+1 min-1).\r\n * @param rxi The reaction intensity (btu+1 ft-2 min-1).\r\n * @param taur The flame residence time (min+1)\r\n * @return The fireline intensity (btu+1 ft-1 s-1).\r\n */\n\nfunction firelineIntensity(ros, rxi, taur) {\n  return ros * rxi * taur / 60;\n}\n/**\r\n * Calculate the fireline intensity (btu+1 ft-1 s-1) from flame length.\r\n *\r\n * @param flame The flame length (ft+1).\r\n * @return The fireline intensity (btu+1 ft-1 s-1).\r\n */\n\nfunction firelineIntensityFromFlameLength(flame) {\n  return flame <= 0 ? 0 : Math.pow(flame / 0.45, 1 / 0.46);\n}\n/**\r\n * Calculate Byram's (1959) flame length (ft+1) given a fireline intensity.\r\n *\r\n * @param fli Fireline intensity (btu+1 ft-1 s-1).\r\n * @return Byram's (1959) flame length (ft+1).\r\n */\n\nfunction flameLength(fli) {\n  return fli <= 0 ? 0 : 0.45 * Math.pow(fli, 0.46);\n}\nfunction harmonicMeanSpreadRate(cover1, ros1, ros2) {\n  if (cover1 === 0 || ros1 === 0) {\n    return ros2;\n  } else if (ros2 === 0) {\n    return ros1;\n  }\n\n  return 1 / (cover1 / ros1 + (1 - cover1) / ros2);\n}\n/**\r\n * Calculate the fire ellipse length-to-width ratio from the\r\n * effective wind speed (ft+1 min-1).\r\n *\r\n * This uses Anderson's (1983) equation.\r\n *\r\n * @param effectiveWindSpeed The effective wind speed (ft+1 min-1).\r\n * @return The fire ellipse length-to-width ratio (ratio).\r\n */\n\nfunction lengthToWidthRatio(effectiveWindSpeed) {\n  // Wind speed MUST be in miles per hour\n  return 1 + 0.25 * (effectiveWindSpeed / 88);\n}\n/**\r\n * Calculate the maximum fire spread rate under slope & wind conditions.\r\n *\r\n * @param ros0 No-wind, no-slope spread rate (ft+1 min-1).\r\n * @param phiEw Rothermel's (1972) `phiEw` wind-slope coefficient (ratio).\r\n * @return The maximum fire spread rate (ft+1 min-1).\r\n */\n\nfunction maximumSpreadRate(ros0, phiEw) {\n  return ros0 * (1 + phiEw);\n}\n/**\r\n * Calculate the wind-slope coefficient (phiEw = phiW + phiS)\r\n * from the individual slope (phiS) and wind (phiW) coefficients.\r\n *\r\n * @param phiW Rothermel (1972) wind coefficient `phiW` (ratio)\r\n * @param phiS Rothermel (1972) slope coefficient `phiS` (ratio)\r\n * @return Rothermel's (1972) wind-slope coefficient `phiEw` (ratio).\r\n */\n\nfunction phiEffectiveWind(phiW, phiS) {\n  return phiW + phiS;\n}\n/**\r\n * Calculate the wind-slope coefficient (phiEw = phiW + phiS)\r\n * from the no-wind, no-slope spread rate and an actual spread rate.\r\n *\r\n * There are 3 ways to calculate the wind-slope coefficient `phiEw`:\r\n * - from `phiS` and `phiW`: see phiEw(phiS,phiW)\r\n * - from `ros0` and `rosHead`: see phiEwInferred(ros0,rosHead)\r\n * - from `ews`, `windB`, and `windK`: see phiEwFromEws(ews, windB, windK)\r\n *\r\n * @param ros0 No-wind, no-slope spread rate (ft+1 min-1).\r\n * @param rosHead The actual spread rate (ft+1 min-1) at the fire head\r\n *    (possibly under cross-slope wind conditions).\r\n * @return Rothermel's (1972) wind-slope coefficient `phiEw` (ratio).\r\n */\n\nfunction phiEffectiveWindInferred(ros0, rosHead) {\n  return ros0 <= 0 ? 0 : rosHead / ros0 - 1;\n}\n/**\r\n * Calculate the wind-slope coefficient (phiEw = phiW + phiS)\r\n * from the effective wind speed.\r\n *\r\n * There are 3 ways to calculate the wind-slope coefficient `phiEw`:\r\n * - from `phiS` and `phiW`: see phiEw(phiS,phiW)\r\n * - from `ros0` and `rosHead`: see phiEwInferred(ros0,rosHead)\r\n * - from `ews`, `windB`, and `windK`: see phiEwFromEws(ews, windB, windK)\r\n *\r\n * @param ews The theoretical wind speed that produces\r\n *  the same spread rate coefficient as the current slope-wind combination.\r\n * @param windB\r\n * @param windK\r\n * @return Rothermel's (1972) wind-slope coefficient `phiEw` (ratio).\r\n */\n\nfunction phiEwFromEws(ews, windB, windK) {\n  return ews <= 0 ? 0 : windK * ews ** windB;\n}\n/** Calculate the fire spread rate slope coefficient (ratio).\r\n *\r\n * This returns Rothermel's (1972) `phiS' as per equation 51 (p 24, 26).\r\n *\r\n * @param slopeRatio Slope steepness ratio (vertical rise / horizontal reach).\r\n * @param slopeK Fuel Bed slope factor.\r\n * @return The fire spread rate slope coefficient (ratio).\r\n */\n\nfunction phiSlope(slopeRatio, slopeK) {\n  return slopeK * slopeRatio * slopeRatio;\n}\n/** Calculate the fire spread rate wind coefficient (ratio).\r\n *\r\n * This returns Rothermel's (1972) `phiW' as per equation 47 (p 23, 26).\r\n *\r\n * @param midflameWind Wind speed at midflame height (ft+1 min-1).\r\n * @param windB Fuel Bed wind factor `B`.\r\n * @param windK Fuel Bed wind factor `K`.\r\n * @return The fire spread rate wind coefficient (ratio).\r\n */\n\nfunction phiWind(midflameWind, windB, windK) {\n  return midflameWind <= 0 ? 0 : windK * Math.pow(midflameWind, windB);\n}\n/**\r\n * Calculate the maximum fire spread rate under cross-slope wind conditions.\r\n *\r\n * If the wind is blowing up-slope (or, if there is no slope, or if there is no wind),\r\n * then spreadRateMaximumUpSlopeWind() == spreadRateMaximumCrossSlopeWind().\r\n *\r\n * @param ros0 No-wind, no-slope spread rate (ft+1 min-1).\r\n * @param spreadDirVectorRate Additional spread reate (ft+1 min-1)\r\n *    along the cross-slope vector of maximum spread.\r\n * @return The maximum fire spread rate (ft+1 min-1).\r\n */\n\nfunction spreadRateWithCrossSlopeWind(ros0, spreadDirVectorRate) {\n  return ros0 + spreadDirVectorRate;\n}\n/**\r\n * Calculate the maximum spread rate after applying the effective wind speed limit.\r\n *\r\n * If the effective wind speed does not exceed the limit,\r\n * then spreadRateMaximumCrossSlopeWind() == spreadRateMaximumEffectiveWindSpeedLimitApplied().\r\n *\r\n * @param ros0 The no-wind, no-slope spread rate (ft+1 min-1).\r\n * @param phiEwLimited Rothermel's (1972) `phiEw` wind-slope coefficient (ratio)\r\n * AFTER applying the effective wind speed limit.\r\n */\n// export function rosMaxEwslApplied(ros0, phiEwLimited) {\n//   return ros0 * (1 + phiEwLimited)\n// }\n\n/**\r\n * Calculate the maximum spread rate after applying the effective wind speed upper limit.\r\n *\r\n * If the spread rate exceeds the effective wind speed\r\n * AND the effective wind speed exceeds 1 mph, then the\r\n * spread rate is reduced back to the effective wind speed.\r\n *\r\n * @param rosMax The fire maximum spread rate (ft+1 min-1)\r\n * @param ews The effective wind speed (ft+1 min-1).\r\n * @return The maximum spread rate (ft+1 min-1) after applying any effective wind speed limit.\r\n */\n\nfunction spreadRateWithRosLimitApplied(rosMax, ews) {\n  return rosMax > ews && ews > 88 ? ews : rosMax;\n}\n/**\r\n * Calculate the scorch height (ft+1) estimated from Byram's fireline\r\n * intensity, wind speed, and air temperature.\r\n *\r\n * @param fli Byram's fireline intensity (btu+1 ft-1 s-1).\r\n * @param windSpeed Wind speed (ft+1 min-1).\r\n * @param airTemp (oF).\r\n * @return The scorch height (ft+1).\r\n */\n\nfunction scorchHeight(fli, windSpeed, airTemp) {\n  const mph = windSpeed / 88;\n  return fli <= 0 ? 0 : 63 / (140 - airTemp) * Math.pow(fli, 1.166667) / Math.sqrt(fli + mph * mph * mph);\n}\n/**\r\n * Calculate the scorch height (ft+1) estimated from flame length,\r\n * wind speed, and air temperature.\r\n *\r\n * @param flame Flame length (ft+1).\r\n * @param windSpeed Wind speed (ft+1 min-1).\r\n * @param airTemp (oF).\r\n * @return The scorch height (ft+1)\r\n */\n\nfunction scorchHtFromFlame(flame, windSpeed, airTemp) {\n  const fli = firelineIntensityFromFlameLength(flame);\n  return scorchHeight(fli, windSpeed, airTemp);\n}\n/**\r\n * Calculate the direction of maximum spread as degrees clockwise from up-slope.\r\n *\r\n * @param xComp Vector x-component returned by spreadDirectionXComponent()\r\n * @param yComp Vector y-component as returned by spreadDirectionYComponent().\r\n * @param rosv Spread rate in the vector of maximum spread (ft+1 min-1).\r\n * @return The direction of maximum fire spread (degrees from upslope)\r\n */\n\nfunction spreadDirectionFromUpslope(xComp, yComp, rosv) {\n  const pi = Math.PI;\n  const al = rosv <= 0 ? 0 : Math.asin(Math.abs(yComp) / rosv);\n  const radians = xComp >= 0 ? yComp >= 0 ? al : pi + pi - al : yComp >= 0 ? pi - al : pi + al;\n  const degrees = radians * 180 / pi;\n  return degrees;\n}\n/**\r\n * Calculate the slope contribution to the spread rate.\r\n *\r\n * @param ros0 No-wind, no-wlope fire spread rate (ft+1 min-1)\r\n * @param phiS Slope coefficient (factor)\r\n * @return The slope contribution to the fire spread rate (ft+1 min-1)\r\n */\n\nfunction maximumDirectionSlopeSpreadRate(ros0, phiS) {\n  return ros0 * phiS;\n}\n/**\r\n * Calculate the wind contribution to the spread rate.\r\n *\r\n * @param ros0 No-wind, no-wlope fire spread rate (ft+1 min-1)\r\n * @param phiW Wind coefficient (factor)\r\n * @return The wind contribution to the fire spread rate (ft+1 min-1)\r\n */\n\nfunction maximumDirectionWindSpreadRate(ros0, phiW) {\n  return ros0 * phiW;\n}\n/**\r\n * Calculate the additional spread rate (ft+1 min-1) in the direction of maximum\r\n * spread under cross-slope wind condtions.\r\n *\r\n * @param xComp Vector x-component returned by spreadDirXComp()\r\n * @param yComp Vector y-component as returned by spreadDirYComp().\r\n * @return Cross wind - cross slope spread rate (ft+1 min-1)\r\n */\n\nfunction maximumDirectionSpreadRate(xComp, yComp) {\n  return Math.sqrt(xComp * xComp + yComp * yComp);\n}\n/**\r\n * Calculate the x-component of the spread rate vector under cross-slope wind conditions.\r\n *\r\n * @param windRate\r\n * @param slopeRate\r\n * @param windHdgAzUp Wind heading in degrees clockwise from the up-slope direction.\r\n */\n\nfunction maximumDirectionXComponent(windRate, slopeRate, windHdgAzUp) {\n  const radians = windHdgAzUp * Math.PI / 180;\n  return slopeRate + windRate * Math.cos(radians);\n}\n/**\r\n * Calculate the y-component of the spread rate vector under cross-slope wind conditions.\r\n *\r\n * @param windRate\r\n * @param windHdgAzUp Wind heading in degrees clockwise from the up-slope direction.\r\n */\n\nfunction maximumDirectionYComponent(windRate, windHdgAzUp) {\n  const radians = windHdgAzUp * Math.PI / 180;\n  return windRate * Math.sin(radians);\n}\n/**\r\n * Calculates the midflame wind speed required to attain a target fire spread rate.\r\n *\r\n * @param rosTarget Target fire spread rate (ft+1 min-1)\r\n * @param ros0 The fuel bed no-wind, no-slope fire spread rate (ft+1 min-1)\r\n * @param windB The fuel bed wind factor B\r\n * @param windK The fuel bed wind factor K\r\n * @param phiS The fuel bed slope coefficient (phi slope)\r\n * @return The midflame wind speed (ft+1 min-1) required to attain the target fire spread rate.\r\n */\n// export function windSpeedAtRosTarget(rosTarget, ros0, windB, windK, phiS) {\n//   if (ros0 <= 0 || windK <= 0) {\n//     return 0\n//   }\n//   const numerator = (rosTarget / ros0) - 1 - phiS\n//   const term = numerator / windK\n//   return Math.pow(term, (1/windB))\n// }\n\n/**\r\n * Calculates the midflame wind speed required to attain a target fire spread rate.\r\n *\r\n * @param rosTarget Target fire spread rate (ft+1 min-1)\r\n * @param ros0 The fuel bed no-wind, no-slope fire spread rate (ft+1 min-1)\r\n * @param beta The fuel bed packing ratio\r\n * @param bedSavr The fuel bed characteristic surface area-to-volume ratio (ft-1)\r\n * @param slopeRatio The fuel bed slope (ratio)\r\n * @return The midflame wind speed (ft+1 min-1) required to attain the target fire spread rate.\r\n */\n// export function windSpeedAtRosTarget2(rosTarget, ros0, beta, bedSavr, slopeRatio) {\n//   const windB = BpxLibFuelBed.windB(bedSavr)\n//   const windC = BpxLibFuelBed.windC(bedSavr)\n//   const windE = BpxLibFuelBed.windE(bedSavr)\n//   const betaOpt = BpxLibFuelBed.beto(bedSavr)\n//   const betaRatio = beta / betaOpt\n//   const windK = BpxLibFuelBed.windK(betaRatio, windE, windC)\n//   const slopeK = BpxLibFuelBed.slopeK(beta)\n//   const phiS = BpxLibSurfaceFire.phiS(slopeRatio, slopeK)\n//   return BpxLibSurfaceFire.windSpeedAtRosTarget(rosTarget, ros0, windB, windK, phiS)\n// }\n\nvar SurfaceFire = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  arithmeticMeanSpreadRate: arithmeticMeanSpreadRate,\n  effectiveWindSpeed: effectiveWindSpeed,\n  effectiveWindSpeedFromLwr: effectiveWindSpeedFromLwr,\n  effectiveWindSpeedLimit: effectiveWindSpeedLimit,\n  expectedValueSpreadRateMOCK: expectedValueSpreadRateMOCK,\n  firelineIntensity: firelineIntensity,\n  firelineIntensityFromFlameLength: firelineIntensityFromFlameLength,\n  flameLength: flameLength,\n  harmonicMeanSpreadRate: harmonicMeanSpreadRate,\n  lengthToWidthRatio: lengthToWidthRatio,\n  maximumSpreadRate: maximumSpreadRate,\n  phiEffectiveWind: phiEffectiveWind,\n  phiEffectiveWindInferred: phiEffectiveWindInferred,\n  phiEwFromEws: phiEwFromEws,\n  phiSlope: phiSlope,\n  phiWind: phiWind,\n  spreadRateWithCrossSlopeWind: spreadRateWithCrossSlopeWind,\n  spreadRateWithRosLimitApplied: spreadRateWithRosLimitApplied,\n  scorchHeight: scorchHeight,\n  scorchHtFromFlame: scorchHtFromFlame,\n  spreadDirectionFromUpslope: spreadDirectionFromUpslope,\n  maximumDirectionSlopeSpreadRate: maximumDirectionSlopeSpreadRate,\n  maximumDirectionWindSpreadRate: maximumDirectionWindSpreadRate,\n  maximumDirectionSpreadRate: maximumDirectionSpreadRate,\n  maximumDirectionXComponent: maximumDirectionXComponent,\n  maximumDirectionYComponent: maximumDirectionYComponent\n});\n\n/**\n * Calculates the dew point temperature.\n *\n * @param {number} dbf Dry bulb air temperature (oF).\n * @param {number} wbf Wet bulb air temperature (oF).\n * @param {number} elev Elevation above mean sea level (ft).\n * @returns {number} Dew point temperature (oF).\n */\nfunction dewPoint(dbf, wbf, elev = 0) {\n  const dbc = (dbf - 32) * 5 / 9;\n  const wbc = Math.min((wbf - 32) * 5 / 9, dbc); // const e1 = 6.1121 * Math.exp(17.502 * dbc / (240.97 + dbc))\n\n  const e2 = wbc < 0 ? 6.1115 * Math.exp(22.452 * wbc / (272.55 + wbc)) : 6.1121 * Math.exp(17.502 * wbc / (240.97 + wbc));\n  const p = 1013 * Math.exp(-0.0000375 * elev);\n  const d = 0.66 * (1 + 0.00115 * wbc) * (dbc - wbc);\n  const e3 = Math.max(0.001, e2 - d * p / 1000);\n  const dpc = -240.97 / (1 - 17.502 / Math.log(e3 / 6.1121));\n  const dpf = Math.max(-40, 32 + dpc * 9 / 5); // console.log(`dewPoint(${dbf}, ${wbf}, ${elev}) => ${dpf}`)\n\n  return dpf;\n}\n/**\n * Calculates dew point temperature per the REA HVAC site.\n * http://www.reahvac.com/tools/humidity-formulas/\n * @param {number} dbf Dry bulb temperature (oF)\n * @param {number} rh Relative humidity (fraction [0..1])\n * @returns {number} Dew point temperature (oF)\n */\n\nfunction reaDewPoint(dbf, rh) {\n  const dbc = (dbf - 32) * 5 / 9;\n  const es = 6.11 * Math.pow(10, 7.5 * dbc / (237.3 + dbc));\n  const e = rh * es;\n  const dpc = (-430.22 + 237.7 * Math.log(e)) / (-Math.log(e) + 19.08);\n  const dpf = 32 + dpc * 9 / 5;\n  return Math.max(-40, dpf);\n}\n/**\n * Calculates the relative humidity per BehavePlus.\n *\n * @param {number} dbf Dry bulb temperature (oF).\n * @param {number} dpf Dew point temperature (oF).\n * @returns {number} Relative humidity (fraction [0..1]).\n */\n\nfunction relativeHumidity(dbf, dpf) {\n  const rh = dpf >= dbf ? 1 : Math.exp(-7469 / (dpf + 398) + 7469 / (dbf + 398)); // console.log(`relativeHumidity(${dbf}, ${dpf}) => ${rh}`)\n\n  return rh;\n}\n/**\n * Calculates relative humidity per the REA HVAC site.\n * http://www.reahvac.com/tools/humidity-formulas/\n *\n * @param {number} dbf Dry bulb temperature (oF).\n * @param {number} dpf Dew point temperature (oF).\n * @returns {number} Relative humidity (fraction, [0..1])\n */\n\nfunction reaRh(dbf, dpf) {\n  const dbc = (dbf - 32) * 5 / 9;\n  const dpc = Math.min(dbc, (dpf - 32) * 5 / 9);\n  const es = 6.11 * Math.pow(10, 7.5 * dbc / (237.3 + dbc));\n  const e = 6.11 * Math.pow(10, 7.5 * dpc / (237.3 + dpc));\n  const rh = e / es;\n  return rh;\n}\n/**\n * Calculates the Heat Index per NOAA (https://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml)\n *\n * The Heat Index is the apparent temperature after factoring in humidity under shady, light wind conditions.\n *\n * @param {*} db Air temperature (oF) [80..110]\n * @param {*} rh Relative humidity (%) [40, 100]\n * @returns {number} The heat index (oF). A value above 137 is generally unreliable.\n */\n\nfunction heatIndex(db, rh) {\n  // The computation of the heat index is a refinement of a result obtained by\n  // multiple regression analysis carried out by Lans P. Rothfusz and described in\n  // a 1990 National Weather Service (NWS) Technical Attachment (SR 90-23).\n  // The Rothfusz regression is not appropriate when conditions of temperature and\n  // humidity warrant a heat index value below about 80 degrees F. In those cases,\n  // a simpler formula is applied to calculate values consistent with Steadman's results:\n  // In practice, the simple formula is computed first and the result averaged with the temperature.\n  // If this heat index value is 80 degrees F or higher, the full regression equation\n  // along with any adjustment as described below is applied.\n  let hi = 0.5 * (db + 61.0 + (db - 68.0) * 1.2 + rh * 0.094);\n\n  if ((db + hi) / 2 < 80) {\n    return hi;\n  } // The regression equation of Rothfusz is:\n\n\n  hi = -42.379 + 2.04901523 * db + 10.14333127 * rh - 0.22475541 * db * rh - 0.00683783 * db * db - 0.05481717 * rh * rh + 0.00122874 * db * db * rh + 0.00085282 * db * rh * rh - 0.00000199 * db * db * rh * rh; // hi is the heat index expressed as an apparent temperature in degrees F.\n  // If the rh is less than 13% and the temperature is between 80 and 112 degrees F,\n  // then the following adjustment is subtracted from the heat index:\n\n  if (rh < 13 && db >= 80 && db <= 112) {\n    const less = (13 - rh) / 4 * Math.sqrt((17 - Math.abs(db - 95)) / 17);\n    hi -= less;\n  } // On the other hand, if the rh is greater than 85% and the temperature is between\n  // 80 and 87 degrees F, then the following adjustment is added to the heat index:\n\n\n  if (rh > 85 && db >= 80 && db <= 97) {\n    const more = (rh - 85) / 10 * ((87 - db) / 5);\n    hi += more;\n  }\n\n  return hi; // The Rothfusz regression is not valid for extreme temperature and relative\n  // humidity conditions beyond the range of data considered by Steadman.\n}\n/**\n * Calculates the summer simmer index (used for overnight low temperatures) using the\n * algorithm from https://ncalculators.com/meteorology/summer-simmer-index-calculator.htm\n *\n * @param {number} at Air temperature (oF).\n * @param {number} rh Relative humidity(%).\n * @returns {number} Summer simmer index (dl).\n */\n\nfunction summerSimmerIndex(at, rh) {\n  return 1.98 * (at - (0.55 - 0.0055 * rh) * (at - 58)) - 56.83;\n}\nfunction wetBulbDepression(db, wb) {\n  return db - wb;\n}\n/**\n * Calculates the wind chill temperature.\n *\n * This uses the most recently (Nov 1, 2001) adopted formula\n * used by the US NOAA and Canadian MSC and is now part of AWIPS.\n * A new version in 2002 may add solar radiation effects.\n *\n * @param {number} at Air temperature (oF) [-45..40]\n * @param {number} ws Wind speed at 10m (mi/h) [0..60].\n * @returns {number} Wind chill temperature (oF) [-98 - +36].\n */\n\nfunction windChill(at, ws) {\n  const ws5 = ws > 0 ? Math.pow(ws, 0.16) : 0; // wind speed at 5 ft from 33 ft\n\n  const wcf = 35.74 + 0.6215 * at - 35.75 * ws5 + 0.4275 * at * ws5;\n  return wcf;\n}\n\nvar TemperatureHumidity = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  dewPoint: dewPoint,\n  reaDewPoint: reaDewPoint,\n  relativeHumidity: relativeHumidity,\n  reaRh: reaRh,\n  heatIndex: heatIndex,\n  summerSimmerIndex: summerSimmerIndex,\n  wetBulbDepression: wetBulbDepression,\n  windChill: windChill\n});\n\n/**\n * @file Tree mortality data as implemented by BehavePlus V6 and FOFEM v6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n// ------------------------------------------------------------------------------\n//  FOFEM tree species and equations\n//  These are used in the bark thickness and tree mortality functions.\n//\n//  NOTE: FOFEM v6 introduced new species codes for all species, and also\n// introduced 13 new species and dropped 2 other species.\n//\n// The FOFEM 6 genus-species abbreviations are the object key.\n//  The species object properties are:\n//  - 'fofem5' FOFEM 5 genus-species codes (deprecated),\n//  - 'mortEq' Index to mortality equation (base 1): 1, 3, and 10-20\n//      - Through BP5, there were only mortality equations 1 and 3.\n//      - BP6 introduces mortality equations 10 through 20.\n//  - 'barkEq' Index to single bark thickness equation (base 1)\n//  - 'regions' Region list (any combination of 1, 2, 3, and/or 4, where\n//      - 1 = Interior West,\n//      - 2 = Pacific West,\n//      - 3 = NorthEast,\n//      - 4 = SouthEast).\n//  - 'scientific' Scientific name\n//  - 'common' Common name\n// ------------------------------------------------------------------------------\n// Fofem factors for determining Single Bark Thickness.\n// Each FOFEM species has a SBT equation index \"barkEq\" [1-39] into this array.\nconst fofemSingleBarkThicknessFactor = [\n/* 00 */\n0.0, // Not used\n\n/* 01 */\n0.019, // Not used\n\n/* 02 */\n0.022,\n/* 03 */\n0.024,\n/* 04 */\n0.025,\n/* 05 */\n0.026,\n/* 06 */\n0.027,\n/* 07 */\n0.028,\n/* 08 */\n0.029,\n/* 09 */\n0.03,\n/* 10 */\n0.031,\n/* 11 */\n0.032,\n/* 12 */\n0.033,\n/* 13 */\n0.034,\n/* 14 */\n0.035,\n/* 15 */\n0.036,\n/* 16 */\n0.037,\n/* 17 */\n0.038,\n/* 18 */\n0.039,\n/* 19 */\n0.04,\n/* 20 */\n0.041,\n/* 21 */\n0.042,\n/* 22 */\n0.043,\n/* 23 */\n0.044,\n/* 24 */\n0.045,\n/* 25 */\n0.046,\n/* 26 */\n0.047,\n/* 27 */\n0.048,\n/* 28 */\n0.049,\n/* 29 */\n0.05,\n/* 30 */\n0.052,\n/* 31 */\n0.055,\n/* 32 */\n0.057, // Not used\n\n/* 33 */\n0.059,\n/* 34 */\n0.06,\n/* 35 */\n0.062,\n/* 36 */\n0.063, // Changed from 0.065 to 0.063 in Build 606\n\n/* 37 */\n0.068,\n/* 38 */\n0.072,\n/* 39 */\n0.081,\n/* 40 */\n0.0 // Reserved for Pinus palustrus (longleaf pine)\n];\nconst data = {\n  ABAM: {\n    fofem5: 'ABIAMA',\n    mortEq: 1,\n    barkEq: 26,\n    regions: 2,\n    scientific: 'Abies amabilis',\n    common: 'Pacific silver fir'\n  },\n  ABBA: {\n    fofem5: 'ABIBAL',\n    mortEq: 1,\n    barkEq: 10,\n    regions: 134,\n    scientific: 'Abies balsamea',\n    common: 'Balsam fir'\n  },\n  ABCO: {\n    fofem5: 'ABICON',\n    mortEq: 10,\n    barkEq: 27,\n    regions: 12,\n    scientific: 'Abies concolor',\n    common: 'White fir'\n  },\n  ABGR: {\n    fofem5: 'ABIGRA',\n    mortEq: 11,\n    barkEq: 25,\n    regions: 12,\n    scientific: 'Abies grandis',\n    common: 'Grand fir'\n  },\n  ABLA: {\n    fofem5: 'ABILAS',\n    mortEq: 11,\n    barkEq: 20,\n    regions: 12,\n    scientific: 'Abies lasiocarpa',\n    common: 'Subalpine fir'\n  },\n  ABMA: {\n    fofem5: 'ABIMAG',\n    mortEq: 16,\n    barkEq: 18,\n    regions: 12,\n    scientific: 'Abies magnifica',\n    common: 'Red fir'\n  },\n  ABPR: {\n    fofem5: 'ABIPRO',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 2,\n    scientific: 'Abies procera',\n    common: 'Noble fir'\n  },\n  ABISPP: {\n    fofem5: 'ABISPP',\n    mortEq: 1,\n    barkEq: 30,\n    regions: 34,\n    scientific: 'Abies species',\n    common: 'Firs'\n  },\n  ACBA3: {\n    fofem5: 'ACEBAR',\n    mortEq: 1,\n    barkEq: 8,\n    regions: 4,\n    scientific: 'Acer barbatum',\n    common: 'Southern sugar maple'\n  },\n  ACLE: {\n    fofem5: 'ACELEU',\n    mortEq: 1,\n    barkEq: 8,\n    regions: 4,\n    scientific: 'Acer leucoderme',\n    common: 'Chalk maple'\n  },\n  ACMA3: {\n    fofem5: 'ACEMAC',\n    mortEq: 1,\n    barkEq: 3,\n    regions: 2,\n    scientific: 'Acer macrophyllum',\n    common: 'Bigleaf maple'\n  },\n  ACNE2: {\n    fofem5: 'ACENEG',\n    mortEq: 1,\n    barkEq: 13,\n    regions: 34,\n    scientific: 'Acer negundo',\n    common: 'Boxelder'\n  },\n  ACNI5: {\n    fofem5: 'ACENIG',\n    mortEq: 1,\n    barkEq: 14,\n    regions: 34,\n    scientific: 'Acer nigrum',\n    common: 'Black maple'\n  },\n  ACPE: {\n    fofem5: 'ACEPEN',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 34,\n    scientific: 'Acer pensylvanicum',\n    common: 'Striped maple'\n  },\n  ACRU: {\n    fofem5: 'ACERUB',\n    mortEq: 1,\n    barkEq: 7,\n    regions: 34,\n    scientific: 'Acer rubrum',\n    common: 'Red maple'\n  },\n  ACSA2: {\n    fofem5: 'ACESACI',\n    mortEq: 1,\n    barkEq: 10,\n    regions: 34,\n    scientific: 'Acer saccharinum',\n    common: 'Silver maple'\n  },\n  ACSA3: {\n    fofem5: 'ACESACU',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 34,\n    scientific: 'Acer saccharum',\n    common: 'Sugar maple'\n  },\n  ACESPP: {\n    fofem5: 'ACESPI',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 3,\n    scientific: 'Acer spicatum',\n    common: 'Mountain maple'\n  },\n  ACSP2: {\n    fofem5: 'ACESPP',\n    mortEq: 1,\n    barkEq: 8,\n    regions: 34,\n    scientific: 'Acer species',\n    common: 'Maples'\n  },\n  AEGL: {\n    fofem5: 'AESGLA',\n    mortEq: 1,\n    barkEq: 15,\n    regions: 34,\n    scientific: 'Aesculus glabra',\n    common: 'Ohio buckeye'\n  },\n  AEOC2: {\n    fofem5: 'AESOCT',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 34,\n    scientific: 'Aesculus octandra',\n    common: 'Yellow buckeye'\n  },\n  AIAL: {\n    fofem5: 'AILALT',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 34,\n    scientific: 'Ailanthus altissima',\n    common: 'Ailanthus'\n  },\n  ALRH2: {\n    fofem5: 'ALNRHO',\n    mortEq: 1,\n    barkEq: 35,\n    regions: 2,\n    scientific: 'Alnus rhombifolia',\n    common: 'White alder'\n  },\n  ALRU2: {\n    fofem5: 'ALNRUB',\n    mortEq: 1,\n    barkEq: 5,\n    regions: 2,\n    scientific: 'Alnus rubra',\n    common: 'Red alder'\n  },\n  AMAR3: {\n    fofem5: 'AMEARB',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 34,\n    scientific: 'Amelanchier arborea',\n    common: 'Common serviceberry'\n  },\n  ARME: {\n    fofem5: 'ARBMEN',\n    mortEq: 1,\n    barkEq: 34,\n    regions: 2,\n    scientific: 'Arbutus menziesii',\n    common: 'Pacific madrone'\n  },\n  BEAL2: {\n    fofem5: 'BETALL',\n    mortEq: 1,\n    barkEq: 10,\n    regions: 34,\n    scientific: 'Betula alleghaniensis',\n    common: 'Yellow birch'\n  },\n  BELE: {\n    fofem5: 'BETLEN',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 4,\n    scientific: 'Betula lenta',\n    common: 'Sweet birch'\n  },\n  BENI: {\n    fofem5: 'BETNIG',\n    mortEq: 1,\n    barkEq: 8,\n    regions: 34,\n    scientific: 'Betula nigra',\n    common: 'River birch'\n  },\n  BEOC2: {\n    fofem5: 'BETOCC',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 34,\n    scientific: 'Betula occidentalis',\n    common: 'Water birch'\n  },\n  BEPA: {\n    fofem5: 'BETPAP',\n    mortEq: 1,\n    barkEq: 6,\n    regions: 234,\n    scientific: 'Betula papyrifera',\n    common: 'Paper birch'\n  },\n  BETSPP: {\n    fofem5: 'BETSPP',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 234,\n    scientific: 'Betula species ',\n    common: 'Birches'\n  },\n  CEOC: {\n    fofem5: 'CELOCC',\n    mortEq: 1,\n    barkEq: 14,\n    regions: 34,\n    scientific: 'Celtis occidentalis',\n    common: 'Common hackberry'\n  },\n  CAAQ2: {\n    fofem5: 'CARAQU',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Carya aquatica',\n    common: 'Water hickory'\n  },\n  CACA18: {\n    fofem5: 'CARCAR',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 34,\n    scientific: 'Carpinus caroliniana',\n    common: 'American hornbeam'\n  },\n  CACOL3: {\n    fofem5: 'CARCOR',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 34,\n    scientific: 'Carya cordiformis',\n    common: 'Bitternut hickory'\n  },\n  CAGL8: {\n    fofem5: 'CARGLA',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 34,\n    scientific: 'Carya glabra',\n    common: 'Pignut hickory'\n  },\n  CAIL2: {\n    fofem5: 'CARILL',\n    mortEq: 1,\n    barkEq: 15,\n    regions: 34,\n    scientific: 'Carya illinoensis',\n    common: 'Pecan'\n  },\n  CALA21: {\n    fofem5: 'CARLAC',\n    mortEq: 1,\n    barkEq: 22,\n    regions: 34,\n    scientific: 'Carya laciniosa',\n    common: 'Shellbark hickory'\n  },\n  CAOV2: {\n    fofem5: 'CAROVA',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Carya ovata',\n    common: 'Shagbark hickory'\n  },\n  CARSPP: {\n    fofem5: 'CARSPP',\n    mortEq: 1,\n    barkEq: 23,\n    regions: 34,\n    scientific: 'Carya species',\n    common: 'Hickories'\n  },\n  CATE9: {\n    fofem5: 'CARTEX',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 4,\n    scientific: 'Carya texana',\n    common: 'Black hickory'\n  },\n  CATO6: {\n    fofem5: 'CARTOM',\n    mortEq: 1,\n    barkEq: 22,\n    regions: 34,\n    scientific: 'Carya tomentosa',\n    common: 'Mockernut hickory'\n  },\n  CACHM: {\n    fofem5: 'CASCHR',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 2,\n    scientific: 'Castanopsis chrysophylla',\n    common: 'Giant chinkapin'\n  },\n  CADE12: {\n    fofem5: 'CASDEN',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 3,\n    scientific: 'Castanea dentata',\n    common: 'American chestnut'\n  },\n  CATSPP: {\n    fofem5: 'CATSPP',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 4,\n    scientific: 'Catalpa species',\n    common: 'Catalpas'\n  },\n  CELA: {\n    fofem5: 'CELLAE',\n    mortEq: 1,\n    barkEq: 15,\n    regions: 34,\n    scientific: 'Celtis laevigata',\n    common: 'Sugarberry'\n  },\n  CECA4: {\n    fofem5: 'CERCAN',\n    mortEq: 1,\n    barkEq: 14,\n    regions: 34,\n    scientific: 'Cercis canadensis',\n    common: 'Eastern redbud'\n  },\n  CHLA: {\n    fofem5: 'CHALAW',\n    mortEq: 1,\n    barkEq: 39,\n    regions: 2,\n    scientific: 'Chamaecyparis lawsoniana',\n    common: 'Port Orford cedar'\n  },\n  CHNO: {\n    fofem5: 'CHANOO',\n    mortEq: 1,\n    barkEq: 2,\n    regions: 2,\n    scientific: 'Chamaecyparis nootkatenis',\n    common: 'Alaska cedar'\n  },\n  CHTH2: {\n    fofem5: 'CHATHY',\n    mortEq: 1,\n    barkEq: 4,\n    regions: 34,\n    scientific: 'Chamaecyparis thyoides',\n    common: 'Atlantic white cedar'\n  },\n  COFL2: {\n    fofem5: 'CORFLO',\n    mortEq: 1,\n    barkEq: 20,\n    regions: 34,\n    scientific: 'Cornus florida',\n    common: 'Flowering dogwood'\n  },\n  CONU4: {\n    fofem5: 'CORNUT',\n    mortEq: 1,\n    barkEq: 35,\n    regions: 2,\n    scientific: 'Cornus nuttallii',\n    common: 'Pacific dogwood'\n  },\n  CORSPP: {\n    fofem5: 'CORSPP',\n    mortEq: 1,\n    barkEq: 10,\n    regions: 34,\n    scientific: 'Cornus species',\n    common: 'Dogwoods'\n  },\n  CRDO2: {\n    fofem5: 'CRADOU',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 4,\n    scientific: 'Crataegus douglasii',\n    common: 'Black hawthorn'\n  },\n  CRASPP: {\n    fofem5: 'CRASPPW',\n    mortEq: 1,\n    barkEq: 35,\n    regions: 2,\n    scientific: 'Crataegus species (western)',\n    common: 'Hawthorns (western)'\n  },\n  DIVI5: {\n    fofem5: 'DIOVIR',\n    mortEq: 1,\n    barkEq: 20,\n    regions: 34,\n    scientific: 'Diospyros virginiana',\n    common: 'Persimmon'\n  },\n  FAGR: {\n    fofem5: 'FAGGRA',\n    mortEq: 1,\n    barkEq: 4,\n    regions: 34,\n    scientific: 'Fagus grandifolia',\n    common: 'American beech'\n  },\n  FRAM2: {\n    fofem5: 'FRAAMA',\n    mortEq: 1,\n    barkEq: 21,\n    regions: 34,\n    scientific: 'Fraxinus americana',\n    common: 'White ash'\n  },\n  FRNI: {\n    fofem5: 'FRANIG',\n    mortEq: 1,\n    barkEq: 14,\n    regions: 34,\n    scientific: 'Fraxinus nigra',\n    common: 'Black ash'\n  },\n  FRPE: {\n    fofem5: 'FRAPEN',\n    mortEq: 1,\n    barkEq: 18,\n    regions: 34,\n    scientific: 'Fraxinus pennsylvanica',\n    common: 'Green ash'\n  },\n  FRPR: {\n    fofem5: 'FRAPRO',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 34,\n    scientific: 'Fraxinus profunda',\n    common: 'Pumpkin ash'\n  },\n  FRQU: {\n    fofem5: 'FRAQUA',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 34,\n    scientific: 'Fraxinus quadrangulata',\n    common: 'Blue ash'\n  },\n  FRASPP: {\n    fofem5: 'FRASPP',\n    mortEq: 1,\n    barkEq: 21,\n    regions: 34,\n    scientific: 'Fraxinus species',\n    common: 'Ashes'\n  },\n  GLTR: {\n    fofem5: 'GLETRI',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 34,\n    scientific: 'Gleditsia triacanthos',\n    common: 'Honeylocust'\n  },\n  GOLA: {\n    fofem5: 'GORLAS',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 4,\n    scientific: 'Gordonia lasianthus',\n    common: 'Loblolly bay'\n  },\n  GYDI: {\n    fofem5: 'GYMDIO',\n    mortEq: 1,\n    barkEq: 10,\n    regions: 34,\n    scientific: 'Gymnocladus dioicus',\n    common: 'Kentucky coffeetree'\n  },\n  HALSPP: {\n    fofem5: 'HALSPP',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 4,\n    scientific: 'Halesia species',\n    common: 'Silverbells'\n  },\n  ILOP: {\n    fofem5: 'ILEOPA',\n    mortEq: 1,\n    barkEq: 21,\n    regions: 34,\n    scientific: 'Ilex opaca',\n    common: 'American holly'\n  },\n  JUCI: {\n    fofem5: 'JUGCIN',\n    mortEq: 1,\n    barkEq: 20,\n    regions: 34,\n    scientific: 'Juglans cinerea',\n    common: 'Butternut'\n  },\n  JUNI: {\n    fofem5: 'JUGNIG',\n    mortEq: 1,\n    barkEq: 20,\n    regions: 34,\n    scientific: 'Juglans nigra',\n    common: 'Black walnut'\n  },\n  JUOC: {\n    fofem5: 'JUNOCC',\n    mortEq: 1,\n    barkEq: 4,\n    regions: 2,\n    scientific: 'Juniperus occidentalis',\n    common: 'Western juniper'\n  },\n  JUNSPP: {\n    fofem5: 'JUNSPP',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 34,\n    scientific: 'Juniperus species',\n    common: 'Junipers/Redcedars'\n  },\n  JUVI: {\n    fofem5: 'JUNVIR',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 34,\n    scientific: 'Juniperus virginiana',\n    common: 'Eastern red cedar'\n  },\n  LALA: {\n    fofem5: 'LARLAR',\n    mortEq: 1,\n    barkEq: 10,\n    regions: 34,\n    scientific: 'Larix laricina',\n    common: 'Tamarack'\n  },\n  LALY: {\n    fofem5: 'LARLYA',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 2,\n    scientific: 'Larix lyallii',\n    common: 'Subalpine larch'\n  },\n  LAOC: {\n    fofem5: 'LAROCC',\n    mortEq: 14,\n    barkEq: 36,\n    regions: 12,\n    scientific: 'Larix occidentalis',\n    common: 'Western larch'\n  },\n  LIDE: {\n    fofem5: 'LIBDEC',\n    mortEq: 12,\n    barkEq: 34,\n    regions: 2,\n    scientific: 'Libocedrus decurrens',\n    common: 'Incense cedar'\n  },\n  LIST2: {\n    fofem5: 'LIQSTY',\n    mortEq: 1,\n    barkEq: 15,\n    regions: 34,\n    scientific: 'Liquidambar styraciflua',\n    common: 'Sweetgum'\n  },\n  LITU: {\n    fofem5: 'LIRTUL',\n    mortEq: 1,\n    barkEq: 20,\n    regions: 34,\n    scientific: 'Liriodendron tulipifera',\n    common: 'Yellow poplar'\n  },\n  LIDE3: {\n    fofem5: 'LITDEN',\n    mortEq: 1,\n    barkEq: 30,\n    regions: 2,\n    scientific: 'Lithocarpus densiflorus',\n    common: 'Tanoak'\n  },\n  MAPO: {\n    fofem5: 'MACPOM',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 4,\n    scientific: 'Maclura pomifera',\n    common: 'Osage orange'\n  },\n  MAAC: {\n    fofem5: 'MAGACU',\n    mortEq: 1,\n    barkEq: 15,\n    regions: 34,\n    scientific: 'Magnolia acuminata',\n    common: 'Cucumber tree'\n  },\n  MAGR4: {\n    fofem5: 'MAGGRA',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 4,\n    scientific: 'Magnolia grandiflora',\n    common: 'Southern magnolia'\n  },\n  MAMA2: {\n    fofem5: 'MAGMAC',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 4,\n    scientific: 'Magnolia macrophylla',\n    common: 'Bigleaf magnolia'\n  },\n  MAGSPP: {\n    fofem5: 'MAGSPP',\n    mortEq: 1,\n    barkEq: 18,\n    regions: 34,\n    scientific: 'Magnolia species',\n    common: 'Magnolias'\n  },\n  MAVI2: {\n    fofem5: 'MAGVIR',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Magnolia virginiana',\n    common: 'Sweetbay'\n  },\n  MALPRU: {\n    fofem5: 'MALPRU',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 4,\n    scientific: 'Prunus species',\n    common: 'Apples/Cherries'\n  },\n  MALSPP: {\n    fofem5: 'MALSPP',\n    mortEq: 1,\n    barkEq: 22,\n    regions: 34,\n    scientific: 'Malus species',\n    common: 'Apples'\n  },\n  MOAL: {\n    fofem5: 'MORALB',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 4,\n    scientific: 'Morus alba',\n    common: 'White mulberry'\n  },\n  MORU2: {\n    fofem5: 'MORRUB',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 4,\n    scientific: 'Morus rubra',\n    common: 'Red mulberry'\n  },\n  MORSPP: {\n    fofem5: 'MORSPP',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 34,\n    scientific: 'Morus species',\n    common: 'Mulberries'\n  },\n  NYAQ2: {\n    fofem5: 'NYSAQU',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 4,\n    scientific: 'Nyssa aquatica',\n    common: 'Water tupelo'\n  },\n  NYOG: {\n    fofem5: 'NYSOGE',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 4,\n    scientific: 'Nyssa ogache',\n    common: 'Ogeechee tupelo'\n  },\n  NYSSPP: {\n    fofem5: 'NYSSPP',\n    mortEq: 1,\n    barkEq: 4,\n    regions: 34,\n    scientific: 'Nyssa species',\n    common: 'Tupelos'\n  },\n  NYSY: {\n    fofem5: 'NYSSYL',\n    mortEq: 1,\n    barkEq: 18,\n    regions: 34,\n    scientific: 'Nyssa sylvatica',\n    common: 'Black gum, Black tupelo'\n  },\n  NYBI: {\n    fofem5: 'NYSSYLB',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 4,\n    scientific: 'Nyssa biflora',\n    common: 'Swamp tupelo'\n  },\n  OSVI: {\n    fofem5: 'OSTVIR',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 34,\n    scientific: 'Ostrya virginiana',\n    common: 'Hophornbeam'\n  },\n  OXAR: {\n    fofem5: 'OXYARB',\n    mortEq: 1,\n    barkEq: 15,\n    regions: 34,\n    scientific: 'Oxydendrum arboreum',\n    common: 'Sourwood'\n  },\n  PATO2: {\n    fofem5: 'PAUTOM',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 34,\n    scientific: 'Paulownia tomentosa',\n    common: 'Princess tree'\n  },\n  PEBO: {\n    fofem5: 'PERBOR',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 4,\n    scientific: 'Persea borbonia',\n    common: 'Redbay'\n  },\n  PIAB: {\n    fofem5: 'PICABI',\n    mortEq: 3,\n    barkEq: 8,\n    regions: 34,\n    scientific: 'Picea abies',\n    common: 'Norway spruce'\n  },\n  PIEN: {\n    fofem5: 'PICENG',\n    mortEq: 15,\n    barkEq: 15,\n    regions: 12,\n    scientific: 'Picea engelmannii',\n    common: 'Engelmann spruce'\n  },\n  PIGL: {\n    fofem5: 'PICGLA',\n    mortEq: 3,\n    barkEq: 4,\n    regions: 123,\n    scientific: 'Picea glauca',\n    common: 'White spruce'\n  },\n  PIMA: {\n    fofem5: 'PICMAR',\n    mortEq: 3,\n    barkEq: 11,\n    regions: 234,\n    scientific: 'Picea mariana',\n    common: 'Black spruce'\n  },\n  PIPU: {\n    fofem5: 'PICPUN',\n    mortEq: 3,\n    barkEq: 10,\n    regions: 1,\n    scientific: 'Picea pungens',\n    common: 'Blue spruce'\n  },\n  PIRU: {\n    fofem5: 'PICRUB',\n    mortEq: 3,\n    barkEq: 13,\n    regions: 34,\n    scientific: 'Picea rubens',\n    common: 'Red spruce'\n  },\n  PISI: {\n    fofem5: 'PICSIT',\n    mortEq: 3,\n    barkEq: 6,\n    regions: 2,\n    scientific: 'Picea sitchensis',\n    common: 'Sitka spruce'\n  },\n  PICSPP: {\n    fofem5: 'PICSPP',\n    mortEq: 3,\n    barkEq: 13,\n    regions: 34,\n    scientific: 'Picea species',\n    common: 'Spruces'\n  },\n  PIAL: {\n    fofem5: 'PINALB',\n    mortEq: 17,\n    barkEq: 9,\n    regions: 12,\n    scientific: 'Pinus albicaulis',\n    common: 'Whitebark pine'\n  },\n  PIAT: {\n    fofem5: 'PINATT',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 2,\n    scientific: 'Pinus attenuata',\n    common: 'Knobcone pine'\n  },\n  PIBA2: {\n    fofem5: 'PINBAN',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 3,\n    scientific: 'Pinus banksiana',\n    common: 'Jack pine'\n  },\n  PICL: {\n    fofem5: 'PINCLA',\n    mortEq: 1,\n    barkEq: 14,\n    regions: 4,\n    scientific: 'Pinus clausa',\n    common: 'Sand pine'\n  },\n  PICO: {\n    fofem5: 'PINCON',\n    mortEq: 17,\n    barkEq: 7,\n    regions: 12,\n    scientific: 'Pinus contorta',\n    common: 'Lodgepole pine'\n  },\n  PIEC2: {\n    fofem5: 'PINECH',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 34,\n    scientific: 'Pinus echinata',\n    common: 'Shortleaf pine'\n  },\n  PIEL: {\n    fofem5: 'PINELL',\n    mortEq: 1,\n    barkEq: 31,\n    regions: 4,\n    scientific: 'Pinus elliottii',\n    common: 'Slash pine'\n  },\n  PIFL2: {\n    fofem5: 'PINFLE',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 1,\n    scientific: 'Pinus flexilis',\n    common: 'Limber pine'\n  },\n  PIGL2: {\n    fofem5: 'PINGLA',\n    mortEq: 1,\n    barkEq: 14,\n    regions: 4,\n    scientific: 'Pinus glabra',\n    common: 'Spruce pine'\n  },\n  PIJE: {\n    fofem5: 'PINJEF',\n    mortEq: 19,\n    barkEq: 37,\n    regions: 12,\n    scientific: 'Pinus jeffreyi',\n    common: 'Jeffrey pine'\n  },\n  PILA: {\n    fofem5: 'PINLAM',\n    mortEq: 18,\n    barkEq: 38,\n    regions: 12,\n    scientific: 'Pinus lambertiana',\n    common: 'Sugar pine'\n  },\n  PIMO3: {\n    fofem5: 'PINMON',\n    mortEq: 1,\n    barkEq: 14,\n    regions: 12,\n    scientific: 'Pinus monticola',\n    common: 'Western white pine'\n  },\n  PIPA2: {\n    fofem5: 'PINPAL',\n    mortEq: 5,\n    barkEq: 40,\n    regions: 4,\n    scientific: 'Pinus palustrus',\n    common: 'Longleaf pine'\n  },\n  PIPO: {\n    fofem5: 'PINPON',\n    mortEq: 19,\n    barkEq: 36,\n    regions: 12,\n    scientific: 'Pinus ponderosa',\n    common: 'Ponderosa pine'\n  },\n  PIPU5: {\n    fofem5: 'PINPUN',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Pinus pungens',\n    common: 'Table mountain pine'\n  },\n  PIRE: {\n    fofem5: 'PINRES',\n    mortEq: 1,\n    barkEq: 22,\n    regions: 34,\n    scientific: 'Pinus resinosa',\n    common: 'Red pine'\n  },\n  PIRI: {\n    fofem5: 'PINRIG',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 34,\n    scientific: 'Pinus rigida',\n    common: 'Pitch pine'\n  },\n  PISA2: {\n    fofem5: 'PINSAB',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 2,\n    scientific: 'Pinus sabiniana',\n    common: 'Gray (Digger) pine'\n  },\n  PISE: {\n    fofem5: 'PINSER',\n    mortEq: 1,\n    barkEq: 35,\n    regions: 34,\n    scientific: 'Pinus serotina',\n    common: 'Pond pine'\n  },\n  PINSPP: {\n    fofem5: 'PINSPP',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 34,\n    scientific: 'Pinus species',\n    common: 'Pines'\n  },\n  PIST: {\n    fofem5: 'PINSTR',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 34,\n    scientific: 'Pinus strobus',\n    common: 'Eastern white pine'\n  },\n  PISY: {\n    fofem5: 'PINSYL',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 34,\n    scientific: 'Pinus sylvestris',\n    common: 'Scots pine'\n  },\n  PITA: {\n    fofem5: 'PINTAE',\n    mortEq: 1,\n    barkEq: 30,\n    regions: 34,\n    scientific: 'Pinus taeda',\n    common: 'Loblolly pine'\n  },\n  PIVI2: {\n    fofem5: 'PINVIR',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 34,\n    scientific: 'Pinus virginiana',\n    common: 'Virginia pine'\n  },\n  PLOC: {\n    fofem5: 'PLAOCC',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 34,\n    scientific: 'Plantus occidentalis',\n    common: 'American sycamore'\n  },\n  POBA2: {\n    fofem5: 'POPBAL',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Populus balsamifera',\n    common: 'Balsam poplar'\n  },\n  PODE3: {\n    fofem5: 'POPDEL',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Populus deltoides',\n    common: 'Eastern cottonwood'\n  },\n  POGR4: {\n    fofem5: 'POPGRA',\n    mortEq: 1,\n    barkEq: 18,\n    regions: 34,\n    scientific: 'Populus grandidentata',\n    common: 'Bigtooth aspen'\n  },\n  POHE4: {\n    fofem5: 'POPHET',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 34,\n    scientific: 'Populus heterophylla',\n    common: 'Swamp cottonwood'\n  },\n  POPSPP: {\n    fofem5: 'POPSPP',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 34,\n    scientific: 'Populus species',\n    common: 'Poplars'\n  },\n  POTR15: {\n    fofem5: 'POPTRI',\n    mortEq: 1,\n    barkEq: 23,\n    regions: 2,\n    scientific: 'Populus trichocarpa',\n    common: 'Black cottonwood'\n  },\n  PRAM: {\n    fofem5: 'PRUAME',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 3,\n    scientific: 'Prunus americana',\n    common: 'American plum'\n  },\n  PREM: {\n    fofem5: 'PRUEMA',\n    mortEq: 1,\n    barkEq: 35,\n    regions: 2,\n    scientific: 'Prunus emarginata',\n    common: 'Bitter cherry'\n  },\n  PRPE2: {\n    fofem5: 'PRUDEN',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 34,\n    scientific: 'Prunus pensylvanica',\n    common: 'Pin cherry'\n  },\n  PRSE2: {\n    fofem5: 'PRUSER',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 34,\n    scientific: 'Prunus serotina',\n    common: 'Black cherry'\n  },\n  PRVI: {\n    fofem5: 'PRUVIR',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 3,\n    scientific: 'Prunus virginiana',\n    common: 'Chokecherry'\n  },\n  PSME: {\n    fofem5: 'PSEMEN',\n    mortEq: 20,\n    barkEq: 36,\n    regions: 12,\n    scientific: 'Pseudotsuga menziesii',\n    common: 'Douglas-fir'\n  },\n  QUAG: {\n    fofem5: 'QUEAGR',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 2,\n    scientific: 'Quercus agrifolia',\n    common: 'California live oak'\n  },\n  QUAL: {\n    fofem5: 'QUEALB',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Quercus alba',\n    common: 'White oak'\n  },\n  QUBI: {\n    fofem5: 'QUEBIC',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 34,\n    scientific: 'Quercus bicolor',\n    common: 'Swamp white oak'\n  },\n  QUCH2: {\n    fofem5: 'QUECHR',\n    mortEq: 1,\n    barkEq: 3,\n    regions: 2,\n    scientific: 'Quercus chrysolepis',\n    common: 'Canyon live oak'\n  },\n  QUOC2: {\n    fofem5: 'QUEOCC',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Quercus coccinea',\n    common: 'Scarlet oak'\n  },\n  QUDU: {\n    fofem5: 'QUEDOU',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 2,\n    scientific: 'Quercus douglasii',\n    common: 'Blue oak'\n  },\n  QUEL: {\n    fofem5: 'QUEELL',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 34,\n    scientific: 'Quercus ellipsoidalis',\n    common: 'Northern pin oak'\n  },\n  QUEN: {\n    fofem5: 'QUEENG',\n    mortEq: 1,\n    barkEq: 33,\n    regions: 2,\n    scientific: 'Quercus engelmannii',\n    common: 'Engelmann oak'\n  },\n  QUFA: {\n    fofem5: 'QUEFAL',\n    mortEq: 1,\n    barkEq: 23,\n    regions: 34,\n    scientific: 'Quercus falcata',\n    common: 'Southern red oak'\n  },\n  QUGA4: {\n    fofem5: 'QUEGAR',\n    mortEq: 1,\n    barkEq: 8,\n    regions: 2,\n    scientific: 'Quercus garryana',\n    common: 'Oregon white oak'\n  },\n  QUIM: {\n    fofem5: 'QUEIMB',\n    mortEq: 1,\n    barkEq: 20,\n    regions: 34,\n    scientific: 'Quercus imbricaria',\n    common: 'Shingle oak'\n  },\n  QUIN: {\n    fofem5: 'QUEINC',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 4,\n    scientific: 'Quercus incana',\n    common: 'Bluejack oak'\n  },\n  QUKE: {\n    fofem5: 'QUEKEL',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 2,\n    scientific: 'Quercus kellogii',\n    common: 'Califonia black oak'\n  },\n  QULA2: {\n    fofem5: 'QUELAE',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 4,\n    scientific: 'Quercus laevis',\n    common: 'Turkey oak'\n  },\n  QULA3: {\n    fofem5: 'QUELAU',\n    mortEq: 1,\n    barkEq: 15,\n    regions: 4,\n    scientific: 'Quercus laurifolia',\n    common: 'Laurel oak'\n  },\n  QULO: {\n    fofem5: 'QUELOB',\n    mortEq: 1,\n    barkEq: 22,\n    regions: 2,\n    scientific: 'Quercus lobata',\n    common: 'Valley oak'\n  },\n  QULY: {\n    fofem5: 'QUELYR',\n    mortEq: 1,\n    barkEq: 18,\n    regions: 34,\n    scientific: 'Quercus lyrata',\n    common: 'Overcup oak'\n  },\n  QUMA2: {\n    fofem5: 'QUEMAC',\n    mortEq: 1,\n    barkEq: 21,\n    regions: 34,\n    scientific: 'Quercus macrocarpa',\n    common: 'Bur oak'\n  },\n  QUMA3: {\n    fofem5: 'QUEMAR',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 34,\n    scientific: 'Quercus marilandica',\n    common: 'Blackjack oak'\n  },\n  QUMI: {\n    fofem5: 'QUEMIC',\n    mortEq: 1,\n    barkEq: 25,\n    regions: 34,\n    scientific: 'Quercus michauxii',\n    common: 'Swamp chestnut oak'\n  },\n  QUMU: {\n    fofem5: 'QUEMUE',\n    mortEq: 1,\n    barkEq: 21,\n    regions: 34,\n    scientific: 'Quercus muehlenbergii',\n    common: 'Chinkapin oak'\n  },\n  QUNI: {\n    fofem5: 'QUENIG',\n    mortEq: 1,\n    barkEq: 15,\n    regions: 34,\n    scientific: 'Quercus nigra',\n    common: 'Water oak'\n  },\n  QUNU: {\n    fofem5: 'QUENUT',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 4,\n    scientific: 'Quercus nuttallii',\n    common: 'Nuttall oak'\n  },\n  QUPA2: {\n    fofem5: 'QUEPAL',\n    mortEq: 1,\n    barkEq: 20,\n    regions: 34,\n    scientific: 'Quercus palustris',\n    common: 'Pin oak'\n  },\n  QUPH: {\n    fofem5: 'QUEPHE',\n    mortEq: 1,\n    barkEq: 20,\n    regions: 34,\n    scientific: 'Quercus phellos',\n    common: 'Willow oak'\n  },\n  QUPR2: {\n    fofem5: 'QUEPRI',\n    mortEq: 1,\n    barkEq: 28,\n    regions: 34,\n    scientific: 'Quercus prinus',\n    common: 'Chestnut oak'\n  },\n  QURU: {\n    fofem5: 'QUERUB',\n    mortEq: 1,\n    barkEq: 21,\n    regions: 34,\n    scientific: 'Quercus rubra',\n    common: 'Northern red oak'\n  },\n  QUSH: {\n    fofem5: 'QUESHU',\n    mortEq: 1,\n    barkEq: 16,\n    regions: 34,\n    scientific: 'Quercus shumardii',\n    common: 'Shumard oak'\n  },\n  QUESPP: {\n    fofem5: 'QUESPP',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 34,\n    scientific: 'Quercus species',\n    common: 'Oaks'\n  },\n  QUST: {\n    fofem5: 'QUESTE',\n    mortEq: 1,\n    barkEq: 23,\n    regions: 34,\n    scientific: 'Quercus stellata',\n    common: 'Post oak'\n  },\n  QUVE: {\n    fofem5: 'QUEVEL',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 34,\n    scientific: 'Quercus velutina',\n    common: 'Black oak'\n  },\n  QUVI: {\n    fofem5: 'QUEVIR',\n    mortEq: 1,\n    barkEq: 22,\n    regions: 4,\n    scientific: 'Quercus virginiana',\n    common: 'Live oak'\n  },\n  QUWI2: {\n    fofem5: 'QUEWIS',\n    mortEq: 1,\n    barkEq: 13,\n    regions: 2,\n    scientific: 'Quercus wislizenii',\n    common: 'Interior live oak'\n  },\n  ROPS: {\n    fofem5: 'ROBPSE',\n    mortEq: 1,\n    barkEq: 28,\n    regions: 34,\n    scientific: 'Robinia pseudoacacia',\n    common: 'Black locust'\n  },\n  SABE2: {\n    fofem5: 'SALDIA',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 3,\n    scientific: 'Salix bebbiana',\n    common: 'Diamond willow'\n  },\n  SANI: {\n    fofem5: 'SALNIG',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Salix nigra',\n    common: 'Black willow'\n  },\n  SALSPP: {\n    fofem5: 'SALSPP',\n    mortEq: 1,\n    barkEq: 20,\n    regions: 234,\n    scientific: 'Salix species',\n    common: 'Willows'\n  },\n  SAAL5: {\n    fofem5: 'SASALB',\n    mortEq: 1,\n    barkEq: 14,\n    regions: 34,\n    scientific: 'Sassafras albidum',\n    common: 'Sassafras'\n  },\n  SEGI2: {\n    fofem5: 'SEQGIG',\n    mortEq: 1,\n    barkEq: 39,\n    regions: 2,\n    scientific: 'Sequoiadendron gigantea',\n    common: 'Giant sequoia'\n  },\n  SESE3: {\n    fofem5: 'SEQSEM',\n    mortEq: 1,\n    barkEq: 39,\n    regions: 2,\n    scientific: 'Sequoia sempervirens',\n    common: 'Redwood'\n  },\n  SOAM3: {\n    fofem5: 'SORAME',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 3,\n    scientific: 'Sorbus americana',\n    common: 'American mountain ash'\n  },\n  TABR2: {\n    fofem5: 'TAXBRE',\n    mortEq: 1,\n    barkEq: 4,\n    regions: 12,\n    scientific: 'Taxus brevifolia',\n    common: 'Pacific yew'\n  },\n  TADI2: {\n    fofem5: 'TAXDIS',\n    mortEq: 1,\n    barkEq: 4,\n    regions: 34,\n    scientific: 'Taxodium distichum',\n    common: 'Bald cypress'\n  },\n  TAAS: {\n    fofem5: 'TAXDISN',\n    mortEq: 1,\n    barkEq: 21,\n    regions: 4,\n    scientific: 'Taxodium distictum var. nutans',\n    common: 'Pond cypress'\n  },\n  THOC2: {\n    fofem5: 'THUOCC',\n    mortEq: 1,\n    barkEq: 4,\n    regions: 34,\n    scientific: 'Thuja occidentalis',\n    common: 'Northern white cedar'\n  },\n  THPL: {\n    fofem5: 'THUPLI',\n    mortEq: 1,\n    barkEq: 14,\n    regions: 12,\n    scientific: 'Thuja plicata',\n    common: 'Western red cedar'\n  },\n  THUSPP: {\n    fofem5: 'THUSPP',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 34,\n    scientific: 'Thuju species',\n    common: 'Arborvitae'\n  },\n  TIAM: {\n    fofem5: 'TILAME',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 34,\n    scientific: 'Tilia americana',\n    common: 'American basswood'\n  },\n  TIHE: {\n    fofem5: 'TILHET',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 34,\n    scientific: 'Tilia heterophylla',\n    common: 'White basswood'\n  },\n  TSCA: {\n    fofem5: 'TSUCAN',\n    mortEq: 1,\n    barkEq: 18,\n    regions: 34,\n    scientific: 'Tsuga canadensis',\n    common: 'Eastern hemlock'\n  },\n  TSHE: {\n    fofem5: 'TSUHET',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 12,\n    scientific: 'Tsuga heterophylla',\n    common: 'Western hemlock'\n  },\n  TSME: {\n    fofem5: 'TSUMER',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 12,\n    scientific: 'Tsuga mertensiana',\n    common: 'Mountain hemlock'\n  },\n  ULAL: {\n    fofem5: 'ULMALA',\n    mortEq: 1,\n    barkEq: 10,\n    regions: 34,\n    scientific: 'Ulmus alata',\n    common: 'Winged elm'\n  },\n  ULAM: {\n    fofem5: 'ULMAME',\n    mortEq: 1,\n    barkEq: 10,\n    regions: 34,\n    scientific: 'Ulmus americana',\n    common: 'American elm'\n  },\n  ULPU: {\n    fofem5: 'ULMPUM',\n    mortEq: 1,\n    barkEq: 17,\n    regions: 34,\n    scientific: 'Ulmus pumila',\n    common: 'Siberian elm'\n  },\n  ULRU: {\n    fofem5: 'ULMRUB',\n    mortEq: 1,\n    barkEq: 11,\n    regions: 34,\n    scientific: 'Ulmus rubra',\n    common: 'Slippery elm'\n  },\n  ULMSPP: {\n    fofem5: 'ULMSPP',\n    mortEq: 1,\n    barkEq: 18,\n    regions: 34,\n    scientific: 'Ulmus species',\n    common: 'Elms'\n  },\n  ULTH: {\n    fofem5: 'ULMTHO',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 34,\n    scientific: 'Ulmus thomasii',\n    common: 'Rock elm'\n  },\n  UMCA: {\n    fofem5: 'UMBCAL',\n    mortEq: 1,\n    barkEq: 5,\n    regions: 2,\n    scientific: 'Umbellularia californica',\n    common: 'California laurel'\n  },\n  ABLO: {\n    fofem5: 'ABLO',\n    mortEq: 10,\n    barkEq: 27,\n    regions: 12,\n    scientific: 'Abies lowiana',\n    common: 'Sierra white fir'\n  },\n  ABNO: {\n    fofem5: 'ABNO',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 12,\n    scientific: 'Abies nobilis',\n    common: 'Noble fir'\n  },\n  AEFL: {\n    fofem5: 'AEFL',\n    mortEq: 1,\n    barkEq: 29,\n    regions: 34,\n    scientific: 'Aesculus flava',\n    common: 'Yellow buckeye'\n  },\n  CANO9: {\n    fofem5: 'CANO9',\n    mortEq: 1,\n    barkEq: 2,\n    regions: 2,\n    scientific: 'Callitropsis nootkatensis',\n    common: 'Alaska cedar'\n  },\n  CADE27: {\n    fofem5: 'CADE27',\n    mortEq: 12,\n    barkEq: 34,\n    regions: 12,\n    scientific: 'Calocedrus decurrens',\n    common: 'Incense cedar'\n  },\n  CAAL27: {\n    fofem5: 'CAAL27',\n    mortEq: 1,\n    barkEq: 22,\n    regions: 34,\n    scientific: 'Carya alba',\n    common: 'Mockernut hickory'\n  },\n  CACA38: {\n    fofem5: 'CACA38',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Carya carolinae septentrionalis',\n    common: 'Shagbark hickory'\n  },\n  CAAM29: {\n    fofem5: 'CAAM29',\n    mortEq: 1,\n    barkEq: 19,\n    regions: 34,\n    scientific: 'Castenea Americana',\n    common: 'American chestnut'\n  },\n  CHCHC4: {\n    fofem5: 'CHCHC4',\n    mortEq: 1,\n    barkEq: 24,\n    regions: 34,\n    scientific: 'Chrysolepis chrysophylla',\n    common: 'Giant chinkapin'\n  },\n  CUNO: {\n    fofem5: 'CUNO',\n    mortEq: 1,\n    barkEq: 2,\n    regions: 2,\n    scientific: 'Cupressus nootkatensis',\n    common: 'Nootka cypress'\n  },\n  CUTH: {\n    fofem5: 'CUTH',\n    mortEq: 1,\n    barkEq: 4,\n    regions: 2,\n    scientific: 'Cupressus thyoides',\n    common: 'Atlantic white cedar'\n  },\n  QUTE: {\n    fofem5: 'QUTE',\n    mortEq: 1,\n    barkEq: 9,\n    regions: 34,\n    scientific: 'Quercus texana',\n    common: 'Texas red oak'\n  },\n  ULRA: {\n    fofem5: 'ULRA',\n    mortEq: 1,\n    barkEq: 12,\n    regions: 34,\n    scientific: 'Ulmus racemosa',\n    common: 'Rock elm'\n  }\n};\n\n/* eslint-disable brace-style */\n\n/*! \\brief Calculates the aspen mortality rate.\n *\n *  \\param severity Fire severity level: 0 = low severity, 1= moderate+ severity\n *  \\param flameLength Flame length of the fire at the tree (ft).\n *  \\param dbh          Aspen diameter at breast height (in).\n *\n *  \\return Aspen mortality rate (fraction).\n */\n\nfunction aspenMortality(severity, flameLength, dbh) {\n  const ch = flameLength / 1.8;\n  return severity < 1 ? fraction(1 / (1 + Math.exp(-4.407 + 0.638 * dbh - 2.134 * ch))) : fraction(1 / (1 + Math.exp(-2.157 + 0.218 * dbh - 3.6 * ch)));\n}\nfunction barkThickness(fofem6Code, dbh) {\n  ensureFofem6Code(fofem6Code);\n  const equationIdx = data[fofem6Code].barkEq;\n  ensureEquationIdx(fofem6Code, equationIdx); // In FOFEM 6, longleaf pine has its own bark thickness formula and uses dbh in cm\n\n  if (equationIdx === 40) {\n    const dbhCm = 2.54 * dbh; // dbh in cm\n\n    const barkCm = 0.435 + 0.031 * dbhCm; // bark thickness in cm\n\n    return barkCm / 2.54; // bark thickness in inches\n  }\n\n  return fofemSingleBarkThicknessFactor[equationIdx] * dbh;\n}\n/**\n * Calculates fraction of crown length scorched.\n * @param {real} treeHt Tree height (ft)\n * @param {real} baseHt Tree crown base height (ft)\n * @param {real} scorchHt Scorch height (ft)\n * @return {real} Fraction of crown length that was scorched (ft/ft)\n */\n\nfunction crownLengthScorched(treeHt, baseHt, scorchHt) {\n  // Tree crown length (ft) and base height (ft)\n  const crownLength = treeHt - baseHt; // Tree crown length scorched (ft)\n\n  const scorchLength = positive(Math.min(scorchHt, treeHt) - baseHt); // Fraction of the crown length scorched (ft/ft)\n\n  return divide(scorchLength, crownLength);\n}\n/**\n * Calculates fraction of crown volume scorched.\n * @param {real} treeHt Tree height (ft)\n * @param {real} baseHt Tree crown base height (ft)\n * @param {real} scorchHt Scorch height (ft)\n * @return {real} Fraction of crown volume that was scorched (ft3/ft3)\n */\n\nfunction crownVolumeScorched(treeHt, baseHt, scorchHt) {\n  // Tree crown length (ft) and base height (ft)\n  const crownLength = treeHt - baseHt; // Tree crown length scorched (ft)\n\n  const scorchLength = positive(Math.min(scorchHt, treeHt) - baseHt); // Fraction of the crown volume scorched (ft3/ft3)\n\n  return divide(scorchLength * (2 * crownLength - scorchLength), crownLength * crownLength);\n}\nfunction ensureEquationIdx(fofem6Code, equationIdx) {\n  if (equationIdx < 0 || equationIdx >= fofemSingleBarkThicknessFactor.length) {\n    throw new Error(`Tree Mortality Fofem6 species code '${fofem6Code}' bark thickness index '${equationIdx}' is invalid`);\n  }\n}\nfunction ensureFofem6Code(fofem6Code) {\n  if (!hasFofem6Code(fofem6Code)) {\n    throw new Error(`Tree Mortality Fofem6 species code '${fofem6Code}' is invalid`);\n  }\n}\nfunction commonNames() {\n  return fofem6Codes().map(key => data[key].common);\n}\nfunction fofem5Codes() {\n  return fofem6Codes().map(key => data[key].fofem5);\n}\nfunction fofem6Codes() {\n  return Object.keys(data);\n}\nfunction scientificNames() {\n  return fofem6Codes().map(key => data[key].scientific);\n}\nfunction hasFofem6Code(fofem6Code) {\n  return Object.prototype.hasOwnProperty.call(data, fofem6Code);\n}\n/**\n *  Calculates probability of tree mortality using the FOFEM 6.0\n *  equations for trees with dbh >= 1.\n *\n *  This is only a partial implementation of the FOFEM mortality algorithm.\n *  Specifically, it only implements those cases where the tree dbh >= 1\".\n *  It also excludes the FOFEM special case of \\e Populus \\e tremuloides,\n *  which requires additional inputs (namely, flame height and fire severity).\n *\n * @param {string} fofem6Code FOFEM 6 tree species code\n * @param {number} dbh Tree diameter at breast height (in)\n * @param {number} treeHt Tree total height (ft)\n * @param {number} baseHt Tree crown base height (ft)\n * @param {number} scorchHt Scorch height (ft)\n */\n\nfunction mortalityRate(fofem6Code, dbh, treeHt, baseHt, scorchHt) {\n  const clsFraction = crownLengthScorched(treeHt, baseHt, scorchHt);\n  const cvsFraction = crownVolumeScorched(treeHt, baseHt, scorchHt);\n  const clsPercent = 100 * clsFraction;\n  const cvsPercent = 100 * cvsFraction;\n  const equationId = data[fofem6Code].mortEq;\n  let mr = 0; // Pat requested that if scorch ht is zero, then mortality is zero\n\n  if (scorchHt <= 0) {\n    return mr;\n  } // Equation 5 is specifically for Pinus palustris (longleaf pine)\n  // Note that bark thickness is in cm\n\n\n  if (equationId === 5) {\n    // This equation uses crown volume scorched as a scale of 1-10\n    const cvsScale = cvsPercent / 10;\n    const barkCm = 2.54 * barkThickness(fofem6Code, dbh);\n    mr = 0.169 + 5.136 * barkCm + 14.492 * barkCm * barkCm - 0.348 * cvsScale * cvsScale;\n    mr = 1 / (1 + Math.exp(mr));\n  } // Equation 10 is specifically for Abies concolor (white fir)\n  else if (equationId === 10) {\n      mr = -3.5083 + 0.0956 * clsPercent - 0.00184 * clsPercent * clsPercent + 0.000017 * clsPercent * clsPercent * clsPercent;\n      mr = 1 / (1 + Math.exp(-mr));\n    } // Equation 11 is specifically for Abies lasiocarpa (subalpine fir)\n    // and Abies grandis (grad fir)\n    else if (equationId === 11) {\n        mr = -1.695 + 0.2071 * cvsPercent - 0.0047 * cvsPercent * cvsPercent + 0.000035 * cvsPercent * cvsPercent * cvsPercent;\n        mr = 1 / (1 + Math.exp(-mr));\n      } // Equation 12 is specifically for Libocedrus decurrens (incense cedar)\n      else if (equationId === 12) {\n          mr = -4.2466 + 0.000007172 * clsPercent * clsPercent * clsPercent;\n          mr = 1 / (1 + Math.exp(-mr));\n        } // Equation 14 is specifically for Larix occidentalis (western larch)\n        // Note that this is from Hood, so dbh is in cm\n        else if (equationId === 14) {\n            mr = -1.6594 + 0.0327 * cvsPercent - 0.0489 * (2.54 * dbh);\n            mr = 1 / (1 + Math.exp(-mr));\n          } // Equation 15 is specifically for Picea engelmannii (Englemann spruce)\n          else if (equationId === 15) {\n              mr = 0.0845 + 0.0445 * cvsPercent;\n              mr = 1 / (1 + Math.exp(-mr));\n            } // Equation 16 is specifically for Abies magnifica (red fir)\n            else if (equationId === 16) {\n                mr = -2.3085 + 0.000004059 * clsPercent * clsPercent * clsPercent;\n                mr = 1 / (1 + Math.exp(-mr));\n              } // Equation 17 is specifically for Pinus albicaulis (whitebark pine)\n              // and Pinus contorta (lodgepole pine)\n              // Note that this is from Hood, so dbh is in cm\n              else if (equationId === 17) {\n                  mr = -0.3268 + 0.1387 * cvsPercent - 0.0033 * cvsPercent * cvsPercent + 0.000025 * cvsPercent * cvsPercent * cvsPercent - 0.0266 * (2.54 * dbh);\n                  mr = 1 / (1 + Math.exp(-mr));\n                } // Equation 18 is specifically for Pinus lambertiana (sugar pine)\n                else if (equationId === 18) {\n                    mr = -2.0588 + 0.000814 * clsPercent * clsPercent;\n                    mr = 1 / (1 + Math.exp(-mr));\n                  } // Equation 19 is specifically for Pinus ponderosa (ponderosa pine)\n                  // and Pinus jeffreyi (Jeffry pine)\n                  else if (equationId === 19) {\n                      mr = -2.7103 + 0.000004093 * cvsPercent * cvsPercent * cvsPercent;\n                      mr = 1 / (1 + Math.exp(-mr));\n                    } // Equation 20 is specifically for Pseudotsuga menziesii (Douglas-fir)\n                    else if (equationId === 20) {\n                        mr = -2.0346 + 0.0906 * cvsPercent - 0.0022 * cvsPercent * cvsPercent + 0.000019 * cvsPercent * cvsPercent * cvsPercent;\n                        mr = 1 / (1 + Math.exp(-mr));\n                      } // Equation 1 is the default mortality equation for all species with dbh > 1\"\n                      // Equation 3 is for spruce species\n                      // its the same as Equation 1 but with a minimum value of 0.8\n                      else {\n                          // if (equationId === 1 || equationId === 3) {\n                          const bark = barkThickness(fofem6Code, dbh);\n                          mr = -1.941 + 6.316 * (1 - Math.exp(-bark)) - 5.35 * cvsFraction * cvsFraction;\n                          mr = 1 / (1 + Math.exp(mr));\n                          mr = equationId === 3 ? Math.max(0.8, mr) : mr;\n                        }\n\n  return fraction(mr);\n}\n\nvar TreeMortality = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  aspenMortality: aspenMortality,\n  barkThickness: barkThickness,\n  crownLengthScorched: crownLengthScorched,\n  crownVolumeScorched: crownVolumeScorched,\n  ensureEquationIdx: ensureEquationIdx,\n  ensureFofem6Code: ensureFofem6Code,\n  commonNames: commonNames,\n  fofem5Codes: fofem5Codes,\n  fofem6Codes: fofem6Codes,\n  scientificNames: scientificNames,\n  hasFofem6Code: hasFofem6Code,\n  mortalityRate: mortalityRate\n});\n\n/**\n * @file Western aspen dynamic fuel model equations\n * as described by Brown and Simmerman (1986) and implemented by BehavePlus V6.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins\n * @license MIT\n */\nconst ppsf = 2000 / 43560; // Array curing levels are [0, 0.3, 0.5, 0.7 0.9, 1]\n\nconst Table = {\n  aspenShrub: {\n    depth: 0.65,\n    dead1Load: [0.8, 0.893, 1.056, 1.218, 1.379, 1.4595],\n    dead1Savr: [1440.0, 1620.0, 1910.0, 2090.0, 2220.0, 2285.0],\n    dead10Load: 0.975,\n    liveHerbLoad: [0.335, 0.234, 0.167, 0.1, 0.033, 0.0],\n    liveStemLoad: [0.403, 0.403, 0.333, 0.283, 0.277, 0.274],\n    liveStemSavr: [2440.0, 2440.0, 2310.0, 2090.0, 1670.0, 1670.0]\n  },\n  aspenTallForb: {\n    depth: 0.3,\n    dead1Load: [0.738, 0.93, 1.056, 1.183, 1.309, 1.372],\n    dead1Savr: [1480.0, 1890.0, 2050.0, 2160.0, 2240.0, 2280.0],\n    dead10Load: 0.475,\n    liveHerbLoad: [0.665, 0.465, 0.332, 0.199, 0.067, 0.0],\n    liveStemLoad: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    liveStemSavr: [2440.0, 2440.0, 2440.0, 2440.0, 2440.0, 2440.0]\n  },\n  aspenLowForb: {\n    depth: 0.18,\n    dead1Load: [0.601, 0.645, 0.671, 0.699, 0.73, 0.7455],\n    dead1Savr: [1400.0, 1540.0, 1620.0, 1690.0, 1750.0, 1780.0],\n    dead10Load: 1.035,\n    liveHerbLoad: [0.15, 0.105, 0.075, 0.045, 0.015, 0.0],\n    liveStemLoad: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    liveStemSavr: [2440.0, 2440.0, 2440.0, 2440.0, 2440.0, 2440.0]\n  },\n  mixedShrub: {\n    depth: 0.5,\n    dead1Load: [0.88, 0.906, 1.037, 1.167, 1.3, 1.3665],\n    dead1Savr: [1350.0, 1420.0, 1710.0, 1910.0, 2060.0, 2135.0],\n    dead10Load: 1.34,\n    liveHerbLoad: [0.1, 0.07, 0.05, 0.03, 0.01, 0.0],\n    liveStemLoad: [0.455, 0.455, 0.364, 0.29, 0.261, 0.2465],\n    liveStemSavr: [2530.0, 2530.0, 2410.0, 2210.0, 1800.0, 1800.0]\n  },\n  mixedForb: {\n    depth: 0.18,\n    dead1Load: [0.754, 0.797, 0.825, 0.854, 0.884, 0.899],\n    dead1LoadDEPRECATED: [0.754, 0.797, 0.825, 1.167, 0.884, 0.899],\n    dead1Savr: [1420.0, 1540.0, 1610.0, 1670.0, 1720.0, 1745.0],\n    dead10Load: 1.115,\n    liveHerbLoad: [0.15, 0.105, 0.075, 0.045, 0.015, 0.0],\n    liveStemLoad: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    liveStemSavr: [2440.0, 2440.0, 2440.0, 2440.0, 2440.0, 2440.0]\n  }\n};\nconst Types = Object.keys(Table);\nfunction interpolate(curingLevel, valueAtLevel) {\n  const Curing = [0.0, 0.3, 0.5, 0.7, 0.9, 1.000000001];\n  const cl = fraction(curingLevel);\n  let fraction$1 = 0;\n\n  for (let idx = 1; idx <= 4; idx += 1) {\n    if (cl <= Curing[idx]) {\n      fraction$1 = 1 - (Curing[idx] - cl) / (Curing[idx] - Curing[idx - 1]);\n      return valueAtLevel[idx - 1] + fraction$1 * (valueAtLevel[idx] - valueAtLevel[idx - 1]);\n    }\n  }\n\n  return valueAtLevel[5];\n}\nfunction deadMext() {\n  return 0.25;\n}\nfunction has(fuelType) {\n  return Object.keys(Table).includes(fuelType);\n}\nfunction depth(fuelType) {\n  return has(fuelType) ? Table[fuelType].depth : 0.01;\n}\nfunction deadFineLoad(fuelType, curingLevel) {\n  return has(fuelType) ? ppsf * interpolate(curingLevel, Table[fuelType].dead1Load) : 0;\n}\nfunction deadFineSavr(fuelType, curingLevel) {\n  return has(fuelType) ? interpolate(curingLevel, Table[fuelType].dead1Savr) : 1;\n}\nfunction deadSmallLoad(fuelType) {\n  return has(fuelType) ? ppsf * Table[fuelType].dead10Load : 0;\n}\nfunction fuelTypes() {\n  return Object.keys(Table);\n} // Live herb\n\nfunction liveHerbLoad(fuelType, curingLevel) {\n  return has(fuelType) ? ppsf * interpolate(curingLevel, Table[fuelType].liveHerbLoad) : 0;\n} // Live stem\n\nfunction liveStemLoad(fuelType, curingLevel) {\n  return has(fuelType) ? ppsf * interpolate(curingLevel, Table[fuelType].liveStemLoad) : 0;\n}\nfunction liveStemSavr(fuelType, curingLevel) {\n  return has(fuelType) ? interpolate(curingLevel, Table[fuelType].liveStemSavr) : 1;\n}\n\nvar WesternAspenFuel = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Types: Types,\n  interpolate: interpolate,\n  deadMext: deadMext,\n  has: has,\n  depth: depth,\n  deadFineLoad: deadFineLoad,\n  deadFineSavr: deadFineSavr,\n  deadSmallLoad: deadSmallLoad,\n  fuelTypes: fuelTypes,\n  liveHerbLoad: liveHerbLoad,\n  liveStemLoad: liveStemLoad,\n  liveStemSavr: liveStemSavr\n});\n\n/**\r\n * @file Wind functions as implemented by BehavePlus v6.\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n */\nfunction speedAt10m(ws20ft) {\n  return 1.13 * ws20ft;\n}\nfunction speedAt20ft(ws10m) {\n  return ws10m / 1.13;\n}\nfunction speedAt20ftFromMidflame(wsmid, mwaf) {\n  return mwaf > 0 ? divide(wsmid, mwaf) : wsmid;\n}\nfunction speedAtMidflame(ws20ft, mwaf) {\n  return mwaf * ws20ft;\n}\n\nvar Wind = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  speedAt10m: speedAt10m,\n  speedAt20ft: speedAt20ft,\n  speedAt20ftFromMidflame: speedAt20ftFromMidflame,\n  speedAtMidflame: speedAtMidflame\n});\n\nvar Lib = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BehaveFuel: BehaveFuel,\n  Calc: Calc,\n  Canopy: Canopy,\n  ChaparralFuel: ChaparralFuel,\n  Compass: Compass,\n  CrownFire: CrownFire,\n  CrownSpotting: CrownSpotting,\n  Dag: Dag$1,\n  FireEllipse: FireEllipse,\n  FuelBed: FuelBed,\n  FuelCatalog: FuelCatalog,\n  FuelMoisture: FuelMoisture,\n  FuelParticle: FuelParticle,\n  IgnitionProbability: IgnitionProbability$1,\n  PalmettoGallberryFuel: PalmettoGallberryFuel,\n  Spotting: Spotting,\n  SurfaceFire: SurfaceFire,\n  TemperatureHumidity: TemperatureHumidity,\n  TreeMortality: TreeMortality,\n  WesternAspenFuel: WesternAspenFuel,\n  Wind: Wind\n});\n\n/**\n * @file ValidationResult returned by validateNativeValue()\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\nclass ValidationResult {\n  constructor(valid, value, message = '') {\n    return {\n      valid: valid,\n      value: value,\n      message: message\n    };\n  }\n\n}\n\n/**\n * @file Abstract base _Variant class from which _Numeric, Text, and Option classes are extended.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n  * _Variant is an ABSTRACT class and should never be instantiated by the client.\n  *\n  * _Variant is extended by:\n  * - _Blob\n  * - Bool\n  * - _Numeric\n  *   - Float\n  *     - Quantity\n  *   - Integer\n  *     - Count\n  *     - Size\n  * - Option\n  *   - Config\n  * - Text\n  *\n  * New Methods:\n  * - defaultValue()\n  * - key()\n  */\n\nclass _Variant {\n  constructor(key, defaultValue) {\n    const signature = `new _Variant(${key}, ${defaultValue})`;\n\n    if (typeof key !== 'string') {\n      throw new Error(signature + ' requires arg 1 \\'key\\' to be of type \\'string\\'');\n    } else if (typeof defaultValue === 'undefined') {\n      throw new Error(signature + ' requires arg 2 \\'defaultValue\\' of \\'any\\' type');\n    } else if (key === '') {\n      throw new Error(signature + ' requires arg 1 \\'key\\' to be non-empty string');\n    }\n\n    this._key = key;\n    this._value = {\n      _default: defaultValue\n    };\n  } // FINAL - implemented only here\n\n\n  key() {\n    return this._key;\n  }\n\n  defaultValue() {\n    return this._value._default;\n  }\n  /**\n   * @returns {string} The Variable's label.\n   */\n\n\n  label() {\n    return keyLabel(this._key);\n  } // Overridden by EVERY _Variant subclass\n\n\n  defaultDisplayString() {\n    return this.displayString(this._value._default);\n  }\n\n  defaultDisplayValue() {\n    return this.displayValue(this._value._default);\n  }\n\n  displayString(value) {\n    return value.toString();\n  }\n\n  displayValue(value) {\n    return value.toString();\n  }\n\n  inputHint() {\n    return '';\n  }\n\n  isValidDisplayValue(inputText) {\n    return this.validateDisplayValue(inputText).valid;\n  }\n\n  isValidNativeValue(value) {\n    return this.validateNativeValue(value).valid;\n  }\n\n  validateDisplayValue(inputText) {\n    const inputValue = inputText;\n    return this.validateNativeValue(inputValue);\n  }\n\n  validateNativeValue(value) {\n    return new ValidationResult(false, value, 'Must be reimplemented by _Variant subclass');\n  } // Overriden and final by _Variant => _Numeric\n\n\n  maximumValue() {\n    return this._value._default;\n  }\n\n  minimumValue() {\n    return this._value._default;\n  }\n\n  stepValue() {\n    return this._value._default;\n  } // Overriden and final by _Variant => _Numeric => Float\n\n\n  maximumDisplayValue() {\n    return this.maximumValue().toString();\n  }\n\n  minimumDisplayValue() {\n    return this.minimumValue().toString();\n  }\n\n  stepDisplayValue() {\n    return this.stepValue().toString();\n  }\n\n  setDisplayDecimals() {\n    return this;\n  }\n\n  setDisplayToExponential() {\n    return this;\n  }\n\n  setDisplayToFixed() {\n    return this;\n  }\n\n  setDisplayToPrecision() {\n    return this;\n  } // Overriden and final by _Variant => _Numeric => Float => Quantity\n\n\n  displayUnits() {\n    return '';\n  }\n\n  displayValueToNativeValue(value) {\n    return value;\n  }\n\n  maximumDisplayString() {\n    return this.maximumDisplayValue();\n  }\n\n  minimumDisplayString() {\n    return this.minimumDisplayValue();\n  }\n\n  stepDisplayString() {\n    return this.stepDisplayValue();\n  }\n\n  nativeUnits() {\n    return '';\n  }\n\n  nativeValueToDisplayValue(value) {\n    return value;\n  }\n\n  setDisplayUnits() {\n    return this;\n  } // Overridden and final by Option\n\n\n  hasOption() {\n    return false;\n  }\n\n  options() {\n    return [];\n  }\n\n  optionText() {\n    return '';\n  }\n\n  optionTexts() {\n    return [];\n  }\n\n  prompt() {\n    return this.inputHint();\n  }\n\n}\n\n/**\n * @file Abstract _Numeric Variant class from which Float and Integer classes are extended\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * _Numeric is an ABSTRACT CLASS and should never be instantiated by the client.\n *\n * _Numeric extends _Variant by\n * - enforcing numeric values within a specified range\n * - validating input text as valid numbers\n *\n * New methods:\n * - inputHint()\n * - isValidDisplayValue(inputText)\n * - maximumValue()\n * - minimumValue()\n * - stepValue()\n * - validateDisplayValue(inputText)\n * - validateNativeValue(value)\n */\n\nclass _Numeric extends _Variant {\n  constructor(key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1) {\n    const signature = `new _Numeric(${key}, ${defaultValue}, ${minValue}, ${maxValue}, ${stepValue})`;\n\n    if (typeof defaultValue !== 'number') {\n      throw new Error(signature + ' requires arg 2 \\'defaultValue\\' to be a \\'number\\'');\n    } else if (typeof minValue !== 'number') {\n      throw new Error(signature + ' requires arg 3 \\'minValue\\' to be a \\'number\\'');\n    } else if (typeof maxValue !== 'number') {\n      throw new Error(signature + ' requires arg 4 \\'maxValue\\' to be a \\'number\\'');\n    } else if (typeof stepValue !== 'number') {\n      throw new Error(signature + ' requires arg 5 \\'stepValue\\' to be a \\'number\\'');\n    } else if (minValue > maxValue) {\n      throw new Error(signature + 'requires arg 3 \\'minValue\\' to be less than arg 3 \\'maxValue\\'');\n    } else if (defaultValue < minValue) {\n      throw new Error(signature + 'requires arg 2 \\'defaultValue\\' to be greater than arg 3 \\'minValue\\'');\n    } else if (defaultValue > maxValue) {\n      throw new Error(signature + 'requires arg 2 \\'defaultValue\\' to be less than arg 4 \\'maxValue\\'');\n    }\n\n    super(key, defaultValue);\n    this._value._minimum = minValue;\n    this._value._maximum = maxValue;\n    this._value._step = stepValue;\n  } // defaultDisplayString() { return this.defaultDisplayValue() }\n  // defaultDisplayValue() { return this.displayString('Numeric '+this.defaultValue()) }\n\n\n  displayString(value) {\n    return value.toString();\n  }\n\n  displayValue(value) {\n    return value.toString();\n  }\n\n  inputHint() {\n    return `${this.minimumValue()} - ${this.maximumValue()}`;\n  }\n\n  isValidDisplayValue(inputText) {\n    return this.validateDisplayValue(inputText).valid;\n  }\n\n  isValidNativeValue(value) {\n    if (typeof value !== 'number') return false;\n    return this.validateNativeValue(value).valid;\n  }\n\n  maximumValue() {\n    return this._value._maximum;\n  }\n\n  minimumValue() {\n    return this._value._minimum;\n  }\n\n  stepValue() {\n    return this._value._step;\n  }\n\n  validateDisplayValue(inputText) {\n    // filter invalid characters from input text\n    const filtered = filterNumeric(inputText); // cast from text to number, boolean, object, or some other string\n\n    const inputValue = parseFloat(filtered);\n\n    if (isNaN(inputValue)) {\n      return new ValidationResult(false, filtered, 'Not a valid number');\n    } // Now we have a number value to convert to native units\n\n\n    return this.validateNativeValue(inputValue);\n  }\n\n  validateNativeValue(value) {\n    if (value < this._value._minimum) {\n      return new ValidationResult(false, value, `Less than minimum value of ${this._value._minimum}`);\n    } else if (value > this._value._maximum) {\n      return new ValidationResult(false, value, `Greater than maximum value of ${this._value._maximum}`);\n    }\n\n    return new ValidationResult(true, value);\n  }\n\n}\n\n/**\n * @file Integer Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Integer is a Numeric Variant whose value is an integer.\n */\n\nclass Integer extends _Numeric {\n  constructor(key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1) {\n    const signature = `new Integer(${key}, ${defaultValue}, ${minValue}, ${maxValue}, ${stepValue})`;\n\n    if (typeof defaultValue !== 'number' || Number.isInteger(defaultValue) === false) {\n      throw new Error(signature + ' requires arg 2 \\'defaultValue\\' to be an integer');\n    } else if (typeof minValue !== 'number' || Number.isInteger(minValue) === false) {\n      throw new Error(signature + ' requires arg 3 \\'minValue\\' to be an integer');\n    } else if (typeof maxValue !== 'number' || Number.isInteger(maxValue) === false) {\n      throw new Error(signature + ' requires arg 4 \\'maxValue\\' to be an integer');\n    } else if (typeof stepValue !== 'number' || Number.isInteger(stepValue) === false) {\n      throw new Error(signature + ' requires arg 5 \\'stepValue\\' to be an integer');\n    }\n\n    super(key, defaultValue, minValue, maxValue, stepValue);\n  }\n\n  _formatValue(value) {\n    const int = Math.round(value); // Decorate with commas, prefix, suffix...\n\n    return int.toString();\n  }\n\n  displayString(nativeValue) {\n    return this.displayValue(nativeValue);\n  }\n\n  displayValue(nativeValue) {\n    return this._formatValue(nativeValue);\n  }\n\n  validateDisplayValue(inputText) {\n    // filter invalid characters from input text\n    const filtered = filterInteger(inputText); // cast from text to number, boolean, object, or some other string\n\n    const inputValue = parseInt(filtered);\n\n    if (isNaN(inputValue)) {\n      return new ValidationResult(false, filtered, 'Not a valid number');\n    } // Now we have a number value to convert to native units\n\n\n    return this.validateNativeValue(inputValue);\n  }\n\n}\n\n/**\n * @file Count Variant classes\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Count is an Integer Variant whose minimum value is 0.\n */\n\nclass Count extends Integer {\n  constructor(key, defaultValue = 0, maxValue = Number.MAX_VALUE, stepValue = 1) {\n    super(key, defaultValue, 0, maxValue, stepValue);\n  }\n\n}\n\n/**\n * @file ArrayIndex Variant classes\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * ArrayIndex is an Count Variant whose maximum value is size-1.\n */\n\nclass ArrayIndex extends Count {\n  constructor(key, maxSize = 1) {\n    super(key, 0, maxSize - 1, 1);\n    this._value._maxSize = maxSize;\n  }\n\n}\n\n/**\n * @file Bool Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Bool is a Variant whose value is a Javascript boolean primitive\n */\n\nclass Bool extends _Variant {\n  /**\n   * @param {bool} defaultValue\n   * @param {string} falseText\n   * @param {string} trueText\n   * @param {string} prompt Input prompt text\n   */\n  constructor(key, defaultValue = false, falseText = 'false', trueText = 'true', prompt = '') {\n    const signature = `new Bool('${key}', '${defaultValue}', '${falseText}', '${trueText}', '${prompt}') `;\n\n    if (typeof defaultValue !== 'boolean') {\n      throw new Error(signature + 'arg 2 \\'defaultValue\\' must be a boolean');\n    } else if (typeof falseText !== 'string') {\n      throw new Error(signature + 'arg 3 \\'falseText\\' must be a string');\n    } else if (typeof trueText !== 'string') {\n      throw new Error(signature + 'arg 4 \\'trueText\\' must be a string');\n    }\n\n    super(key, defaultValue);\n    this._value._false = falseText;\n    this._value._true = trueText;\n    this._value._prompt = prompt;\n  }\n\n  defaultDisplayString() {\n    return this.displayString(this.defaultValue());\n  }\n\n  defaultDisplayValue() {\n    return this.displayValue(this.defaultValue());\n  }\n\n  displayString(bool) {\n    return this.displayValue(bool);\n  }\n\n  displayValue(bool) {\n    return bool ? this._value._true : this._value._false;\n  }\n\n  hasOption(inputText) {\n    return inputText === this._value._false || inputText === this._value._true;\n  }\n\n  inputHint() {\n    return `'${this._value._false}' or '${this._value._true}'`;\n  }\n\n  isValidDisplayValue(inputText) {\n    return this.validateDisplayValue(inputText).valid;\n  }\n\n  isValidNativeValue(value) {\n    // For now, allow truthy and falsey\n    // if (typeof value !== 'boolean') return false\n    return this.validateNativeValue(value).valid;\n  }\n\n  maximumValue() {\n    return true;\n  }\n\n  maximumDisplayValue() {\n    return this._value._true;\n  }\n\n  minimumValue() {\n    return false;\n  }\n\n  minimumDisplayValue() {\n    return this._value._false;\n  }\n\n  stepValue() {\n    return 1;\n  }\n\n  stepDisplayValue() {\n    return '';\n  }\n\n  options() {\n    return [false, true];\n  }\n\n  optionText(bool) {\n    return bool ? this._value._true : this._value._false;\n  }\n\n  optionTexts() {\n    return [this._value._false, this._value._true];\n  }\n\n  prompt() {\n    return this._value._prompt;\n  }\n\n  validateDisplayValue(inputText) {\n    if (!this.hasOption(inputText)) {\n      return new ValidationResult(false, inputText, 'Invalid option');\n    }\n\n    const bool = inputText === this._value._true;\n    return this.validateNativeValue(bool);\n  }\n\n  validateNativeValue(bool) {\n    const b = !!bool;\n    return new ValidationResult(true, b);\n  }\n\n}\n\n/**\n * @file Option Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Option is a Variant whose value is a Javascript string primitive\n * that is a member of a predefined set of strings.\n */\n\nclass Option extends _Variant {\n  /**\n   * @param {string} prompt Input prompt text\n   * @param {array} optionsArray A simple array, or an array of value-display pairs\n   * @param {number} defaultOptionIndex Index of the default option (0 if omitted)\n   */\n  constructor(key, prompt, optionsArray, defaultOptionIndex = 0) {\n    const signature = `new Option(${key}, ${prompt}, ${optionsArray}, ${defaultOptionIndex}) `;\n\n    if (typeof prompt !== 'string') {\n      throw new Error(signature + 'arg 2 \\'prompt\\' must be a string');\n    } else if (!(optionsArray instanceof Array)) {\n      throw new Error(signature + 'arg 2 \\'optionasArray\\' must be an Array');\n    } else if (defaultOptionIndex < 0 || defaultOptionIndex >= optionsArray.length) {\n      throw new Error(signature + `arg 3 defaultOptionIndex must be 0 - ${optionsArray.length}`);\n    }\n\n    const dflt = optionsArray[defaultOptionIndex];\n    super(key, Array.isArray(dflt) ? dflt[0] : dflt);\n    const map = new Map();\n    optionsArray.forEach(opt => {\n      if (Array.isArray(opt)) {\n        map.set(opt[0], opt[1]);\n      } else {\n        map.set(opt, opt);\n      }\n    });\n    this._value._options = map;\n    this._value._prompt = prompt;\n  }\n\n  _ensureOption(optionKey) {\n    if (!this.hasOption(optionKey)) {\n      throw new Error(`Option '${this.key()}' has no option '${optionKey}'`);\n    }\n\n    return this;\n  }\n\n  defaultDisplayString() {\n    return this.displayString(this.defaultValue());\n  }\n\n  defaultDisplayValue() {\n    return this.displayValue(this.defaultValue());\n  }\n\n  displayString(optionKey) {\n    return this.displayValue(optionKey);\n  }\n\n  displayValue(optionKey) {\n    this._ensureOption(optionKey);\n\n    return this.optionText(optionKey);\n  }\n\n  hasOption(optionKey) {\n    return this._value._options.has(optionKey);\n  }\n\n  inputHint() {\n    return this._value._prompt;\n  }\n\n  isValidDisplayValue(inputText) {\n    return this.validateDisplayValue(inputText).valid;\n  }\n\n  isValidNativeValue(value) {\n    return this.validateNativeValue(value).valid;\n  }\n\n  maximumValue() {\n    return 0;\n  }\n\n  maximumDisplayValue() {\n    return '';\n  }\n\n  minimumValue() {\n    return 0;\n  }\n\n  minimumDisplayValue() {\n    return '';\n  }\n\n  stepValue() {\n    return 1;\n  }\n\n  stepDisplayValue() {\n    return '';\n  }\n\n  options() {\n    return Array.from(this._value._options.keys());\n  }\n\n  optionText(optionKey) {\n    return this._value._options.get(optionKey);\n  }\n\n  optionTexts() {\n    return Array.from(this._value._options.values());\n  }\n\n  prompt() {\n    return this._value._prompt;\n  }\n\n  validateDisplayValue(optionKey) {\n    return this.validateNativeValue(optionKey);\n  }\n\n  validateNativeValue(optionKey) {\n    if (!this.hasOption(optionKey)) {\n      return new ValidationResult(false, optionKey, 'Invalid option');\n    }\n\n    return new ValidationResult(true, optionKey);\n  }\n\n}\n\n/**\n * @file Config Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Config is a Option used for DAG configuration.\n * Its sole purpose is to check if a DAG Node is a Config via (someObject instanceof Config) === true\n */\n\nclass Config extends Option {\n  constructor(key, prompt, optionsArray, defaultOptionIndex = 0) {\n    super(key, prompt, optionsArray, defaultOptionIndex);\n  }\n\n}\n\n/**\n * @file Float Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Float adds the notion of a 'displayValue' to floating point numbers, including\n * - display mode; 'toFixed(), toExponential(), or toPrecision()\n * - display decimal places\n *\n * New Methods:\n * - _setDisplayMode(mode, decimals) {\n * - _formatValue(value)\n * - displayString(nativeValue)\n * - displayValue(nativeValue)\n * - setDisplayDecimals(decimals)\n * - setDisplayToExponential(decimals=null)\n * - setDisplayToFixed(decimals=null)\n * - setDisplayToPrecision(decimals=null)\n * - maximumDisplayValue()\n * - minimumDisplayValue()\n * - stepDisplayValue()\n *\n * Overrides methods:\n * - inputHint()\n */\n\nclass Float extends _Numeric {\n  constructor(key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1) {\n    super(key, defaultValue, minValue, maxValue, stepValue);\n    this._display = {\n      _mode: 'fixed',\n      _decimals: 2\n    };\n  }\n\n  _formatValue(value) {\n    let str;\n\n    if (this._display._mode === 'precision') {\n      str = value.toPrecision(Math.max(1, this._display._decimals));\n    } else if (this._display._mode === 'exponential') {\n      str = value.toExponential(this._display._decimals);\n    } else {\n      str = value.toFixed(this._display._decimals);\n    } // Decorate with commas, prefix, suffix...\n\n\n    return str;\n  }\n\n  _setDisplayMode(mode, decimals) {\n    this._display._mode = mode;\n\n    if (typeof decimals === 'number') {\n      this._display._decimals = Math.max(Math.min(decimals, 16), 0);\n    }\n\n    return this;\n  }\n\n  defaultDisplayValue() {\n    return this._formatValue(this._value._default);\n  }\n\n  displayString(nativeValue) {\n    return this.displayValue(nativeValue);\n  }\n\n  displayValue(nativeValue) {\n    return this._formatValue(nativeValue);\n  }\n\n  displayValueToNativeValue(displayValue) {\n    return parseFloat(displayValue);\n  }\n\n  nativeValueToDisplayValue(nativeValue) {\n    return this.displayValue(nativeValue);\n  } // Overrides Numeric.inputHint() to perform floating point formatting\n\n\n  inputHint() {\n    return `${this.minimumDisplayValue()} - ${this.maximumDisplayValue()}`;\n  }\n\n  maximumDisplayValue() {\n    return this._formatValue(this._value._maximum);\n  }\n\n  minimumDisplayValue() {\n    return this._formatValue(this._value._minimum);\n  }\n\n  stepDisplayValue() {\n    return this._formatValue(this._value._step);\n  }\n\n  setDisplayDecimals(decimals) {\n    return this._setDisplayMode(this._display._mode, decimals);\n  }\n\n  setDisplayToExponential(decimals = null) {\n    return this._setDisplayMode('exponential', decimals);\n  }\n\n  setDisplayToFixed(decimals = null) {\n    return this._setDisplayMode('fixed', decimals);\n  }\n\n  setDisplayToPrecision(decimals = null) {\n    return this._setDisplayMode('precision', decimals);\n  }\n\n}\n\n/**\r\n * @file Converter units-of-measure definitions\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n */\n// Defines the set of units signature fields\nconst baseSet = new Set(['_d', // distance, length (m)\n'_m', // mass (kg)\n'_t', // time (s)\n'_T', // thermodynamic temperature (oK)\n'_r', // ratio, dimensionless\n'_e', // electric current (A)\n'_i', // luminous intensity (cd)\n'_s' // amount of substance (mole)\n]); // Prototype units signature\n\nconst protoSignature = {\n  coeff: 1,\n  _d: 0,\n  _m: 0,\n  _t: 0,\n  _T: 0,\n  _r: 0,\n  _e: 0,\n  _i: 0,\n  _s: 0\n}; // Array of [string:unitsKey, array:triplet, array:aliases] elements,\n// where triplet is [number:coeff, string|array:base, number:power]\n\nconst unitDefs = [// base units (IMPORTANT: power MUST BE 0 for base units!!)\n['dl', [1, '_r', 0], ['ratio', '']], ['m', [1, '_d', 0], ['meter', 'metre', 'meters', 'metres']], ['kg', [1, '_m', 0], ['kilogram', 'kilograms', 'kgs']], ['s', [1, '_t', 0], ['sec', 'secs', 'second', 'seconds']], ['oC', [1, '_T', 0], ['Celsius', 'celsius', 'centigrade', '\\u2103']], ['A', [1, '_e', 0], ['ampere', 'amp', 'amperes', 'amps']], ['cd', [1, '_i', 0], ['candela', 'candelas']], ['mol', [1, '_s', 0], ['mole', 'moles', 'mols']], // SI derived units with special names and symbols\n['rad', [1, [[1, 'm', 1], [1, 'm', -1]], 1], ['radian', 'radians', 'rads']], ['sr', [1, [[1, 'm', 2], [1, 'm', -2]], 1], ['steridian', 'steridians', 'srs']], ['Hz', [1, 's', -1], ['Hertz', 'hertz', 'hz']], ['N', [1, [[1, 'kg', 1], [1, 'm', 1], [1, 's', -2]], 1], ['Newton', 'Newtons', 'newton', 'newtons']], ['Pa', [1, [[1, 'kg', 1], [1, 'm', -1], [1, 's', -2]], 1], ['Pascal', 'Pascals', 'Pas', 'pascal', 'pascals']], ['J', [1, [[1, 'kg', 1], [1, 'm', 2], [1, 's', -2]], 1], ['Joule', 'Joules', 'Js', 'joule', 'joules', 'j']], ['W', [1, [[1, 'J', 1], [1, 's', -1]], 1], ['Watt', 'Watts', 'Ws', 'watt', 'watts', 'w']], ['C', [1, [[1, 's', 1], [1, 'A', 1]], 1], ['coulomb', 'coulombs', 'Coulomb', 'Coulombs']], ['V', [1, [[1, 'kg', 1], [1, 'm', 2], [1, 's', -3], [1, 'A', -1]], 1], ['volt', 'volts', 'v', 'Volt', 'Volts']], ['F', [1, [[1, 'kg', -1], [1, 'm', -2], [1, 's', 4], [1, 'A', 2]], 1], ['farad', 'farads', 'Farad', 'Farads']], ['Ohm', [1, [[1, 'kg', 1], [1, 'm', 2], [1, 's', -3], [1, 'A', -2]], 1], ['ohm', 'ohms', 'Ohms', '\\u2126']], ['S', [1, [[1, 'kg', -1], [1, 'm', -2], [1, 's', 3], [1, 'A', 2]], 1], ['siemens', 'Siemens']], ['Wb', [1, [[1, 'kg', 1], [1, 'm', 2], [1, 's', -2], [1, 'A', -1]], 1], ['weber', 'webers', 'Weber', 'Webers']], ['T', [1, [[1, 'kg', 1], [1, 's', -2], [1, 'A', -1]], 1], ['tesla', 'teslas', 'Tesla', 'Teslas']], ['H', [1, [[1, 'kg', 1], [1, 'm', 2], [1, 's', -2], [1, 'A', -2]], 1], ['henry', 'henrys', 'Henry', 'Henrys']], ['lm', [1, [[1, 'cd', 1], [1, 'sr', 2]], 1], ['lumen', 'lumens']], ['lx', [1, [[1, 'cd', 1], [1, 'sr', 2], [1, 'm', -2]], 1], ['lux']], ['Bq', [1, [[1, 's', -1]], 1], ['becquerel', 'Becquerel', 'becquerels', 'Becquerels']], ['Gy', [1, [[1, 'm', 2], [1, 's', -2]], 1], ['gray', 'grays', 'Gray', 'Grays']], ['Sv', [1, [[1, 'm', 2], [1, 's', -2]], 1], ['sievert', 'sieverts', 'Sievert', 'Sieverts']], ['kat', [1, [[1, 'mol', 1], [1, 's', -1]], 1], ['katal', 'katals']], // Non-SI units accepted for use with SI units\n// length\n['mm', [0.001, 'm', 1], ['millimeter', 'millimeters', 'millimetre', 'millimetres']], ['cm', [0.01, 'm', 1], ['centimeter', 'centimeters', 'centimetre', 'centrimetres']], ['dm', [0.1, 'm', 1], ['decimeter', 'decimeters', 'decimetre', 'decimetres']], ['km', [1000, 'm', 1], ['kms', 'kilometer', 'kilometre', 'kilometers', 'kilometres']], ['au', [149597870700, 'm', 1], ['astronomical unit']], // time\n['ms', [0.001, 's', 1], ['millisec', 'millisecs', 'millisecond', 'milliseconds']], ['min', [60, 's', 1], ['minute', 'minutes']], ['h', [60 * 60, 's', 1], ['hour', 'hours', 'hr', 'hrs']], ['day', [24 * 60 * 60, 's', 1], ['d', 'days']], ['y', [365 * 24 * 60 * 60, 's', 1], ['year', 'years', 'yr']], // temperature\n['oK', [1, 'oC', 1], ['K', '\\u212a']], // plane and phase angle\n['degree', [Math.PI / 180, 'rad', 1], ['degrees', 'deg', 'degs', 'o', '\\u00b0']], [\"'\", [Math.PI / 10800, 'rad', 1], []], ['\"', [Math.PI / 648000, 'rad', 1], []], // area\n['ha', [10000, 'm', 2], ['hectare', 'hectares']], // volume\n['l', [1000, 'cm', 3], ['litre', 'liter', 'litres', 'liters', 'L']], // mass\n['gm', [0.001, 'kg', 1], ['gram', 'grams', 'ms', 'g']], ['tonne', [1000, 'kg', 1], ['t', 'tonnes']], // energy\n['eV', [1.602176634e-19, 'J', 1], ['electronvolt', 'eVs']], ['MJ', [1000000, 'J', 1], ['megaJ', 'mJ', 'mj', 'megaJoules']], // dimensionless\n['percent', [0.01, 'dl', 1], ['%', 'pct', 'pph']], ['ppt', [0.001, 'dl', 1], ['partsPerThousand']], ['ppm', [0.000001, 'dl', 1], ['partsPerMillion']], // US Customary units\n// length  // derived distance units\n['ft', [0.3048, 'm', 1], ['foot', 'feet']], ['in', [1 / 12, 'ft', 1], ['inch', 'inches']], ['yd', [3, 'ft', 1], ['yard', 'yards']], ['rd', [16.5, 'ft', 1], ['rod', 'rods']], ['ch', [66, 'ft', 1], ['chain', 'chains']], ['mi', [5280, 'ft', 1], ['mile', 'miles']], // mass\n['lb', [1 / 2.20462262184878, 'kg', 1], ['pound', 'pounds', 'lbs']], ['oz', [1 / 16, 'lb', 1], ['ounce', 'ounces', 'ozs']], ['ton', [2000, 'lb', 1], ['tons', 'shortton', 'shorttons']], // temperature\n['oF', [5 / 9, 'oC', 1], ['\\u2109', 'Fahrenheit', 'fahrenheit']], // area\n['ac', [10, 'ch', 2], ['acre', 'acres']], // energy\n['Btu', [1.055870000000e+03, 'J', 1], ['Btus', 'btu', 'btus']], ['Btu_x', [1.055870000000e+03, 'J', 1], ['btu_x']], // mean BTU\n['Btu_i', [1.055056000000e+03, 'J', 1], ['btu_i']], // international table BTU (after 1956)\n['Btu_39', [1.059670000000e+03, 'J', 1], ['btu_39']], // BTU at 39 oF\n['Btu_59', [1.054800000000e+03, 'J', 1], ['btu_59']], // BTU at 59 oF\n['Btu_60', [1.054680000000e+03, 'J', 1], ['btu_60']], // BTU at 60 oF\n['Btu_tc', [1.054350000000e+03, 'J', 1], ['btu_tc']] // thermochemical BTU\n]; // From https://en.wikipedia.org/wiki/International_System_of_Units\n\nconst quantity = [// SI base units\n['dimensionless', ['']], ['distance', ['m']], ['length', ['m']], ['mass', ['kg']], ['time', ['s']], ['thermodynamic temperature', ['oC']], ['electric current', ['A']], ['luminous intensity', ['cd']], ['amount of substance', ['mol']], // Fire behavior\n['fireline intensity', ['m kg s-3', 'W/m']], ['fire heat per unit area', ['kg s-2', 'N/m']], ['fire reaction intensity', ['kg s-3', 'W/m2']], ['surface area-to-volume ratio', ['m-1']], // SI derived units woth special names and symbols\n['plane angle', ['m m-1', 'rad']], ['solid angle', ['m2 m-2', 'sr']], ['frequency', ['s-1', 'Hz']], ['force', ['kg m s-2', 'N']], ['weight', ['kg m s-2', 'N']], ['pressure', ['kg m-1 s-2', 'Pa', 'N/m2']], ['stress', ['kg m-1 s-2', 'Pa', 'N/m2']], ['energy', ['kg m2 s-2', 'J', 'N m', 'Pa m3']], ['work', ['kg m2 s-2', 'J', 'N m', 'Pa m3']], ['heat', ['kg m2 s-2', 'J', 'N m', 'Pa m3']], ['power', ['kg m2 s-3', 'W', 'J/s']], ['radiant flux', ['kg m2 s-3', 'W', 'J/s']], ['electric charge', ['s A', 'C']], ['electric potential difference (voltage)', ['kg m2 s-3 A-1', 'V', 'W/A', 'J/C']], ['voltage', ['kg m2 s-3 A-1', 'V', 'W/A', 'J/C']], ['emf', ['kg m2 s-3 A-1', 'V', 'W/A', 'J/C']], ['capacitance', ['kg-1 m-2 s4 A2', 'F', 'C/V']], ['resistance', ['kg m2 s-3 A-2', 'ohm', 'V/A']], ['impedance', ['kg m2 s-3 A-2', 'ohm', 'V/A']], ['reactance', ['kg m2 s-3 A-2', 'ohm', 'V/A']], ['electrical conductance', ['kg-1 m-2 s3 A2', 'S', 'ohm-1']], ['magnetic flux', ['kg m2 s-2 A-1', 'Wb', 'V s']], ['magnetic flux density', ['kg s-2 A-1', 'T', 'Wb/m2']], ['inductance', ['kg m2 s-2 A-2', 'H', 'Wb/A']], ['luminous flux', ['cd sr', 'lm']], ['illuminance', ['cd sr m-2', 'lx', 'lm/m2']], ['radioactivity (decays per unit time)', ['s-1', 'Bq']], ['absorbed dose (of ionising radiation)', ['m2 s-2', 'Gy', 'J/kg']], ['equivalent dose (of ionising radiation)', ['m2 s-2', 'Sv', 'J/kg']], ['catalytic activity', ['mol s-1', 'kat']], // examples of coherent derived units\n['area', ['m2']], ['volume', ['m3']], ['speed', ['m s-1']], ['velocity', ['m s-1']], ['acceleration', ['m s-2']], ['wavenumber', ['m-1']], ['vergence (optics)', ['m-1']], ['density', ['kg m-3']], ['load', ['kg m-2']], ['surface density', ['kg m-2']], ['specific volume', ['m3 kg-1']], ['current density', ['A m-2']], ['magnetic field strength', ['A m-1']], ['concentration', ['mol m-3']], ['mass concentration', ['kg m-3']], ['luminance', ['cd m-2']], // Examples of derived units that include units with special name\n['dynamic viscosity', ['m-1 kg s-1', 'Pa s']], ['moment of force', ['m2 kg s-2', 'N m']], ['surface tension', ['kg s-2', 'N/m']], ['angular velocity', ['s-1', 'rad/s']], ['angular frequency', ['s-1', 'rad/s']], ['angular acceleration', ['s-2', 'rad/s2']], ['heat flux density', ['kg s-3', 'W/m2']], ['irradiance', ['kg s-3', 'W/m2']], ['entropy', ['m2 kg s-2 oC-1', 'J/oC']], ['heat capacity', ['m2 kg s-2 oC-1', 'J/oC']], ['specific heat capacity', ['m2 s-2 oC-1', 'J/kg oC']], ['specific entropy', ['m2 s-2 oC-1', 'J/kg oC']], ['specific energy', ['m2 s-2', 'J/kg']], ['thermal conductivity', ['m kg s-3 oC-1', 'W/m oC']], ['energy density', ['m-1 kg s-2', 'J/m3']], ['electric field strength', ['m kg s-3 A-1', 'V/m']], ['electric charge density', ['m-3 s A', 'C/m3']], ['surface charge density', ['m-2 s A', 'C/m2']], ['electric flux density', ['m-2 s A', 'C/m2']], ['electric displacement', ['m-2 s A', 'C/m2']], ['permittivity', ['m-3 kg-1 s4 A2', 'F/m']], ['molar energy', ['m2 kg s-2 mol-1', 'J/mol']], ['molar entropy', ['m2 kg s-2 oC-1 mol-1', 'J/mol oC']], ['molar heat capacity', ['m2 kg s-2 oC-1 mol-1', 'J/mol oC']], ['exposure (x- and y-rays)', ['kg-1 s A', 'C/kg']], ['absorbed dose rate', ['m2 s-3', 'Gy/s']], ['radiant intensity', ['m2 kg s-3', 'W/sr']], ['radiance', ['kg s-3', 'W/m2 sr']], ['catalytic activity concentration', ['m-2 s-1 mol', 'kat/m3']]];\n/**\r\n * Btu definitions\r\n    - International Table British thermal unit (after 1956)\r\n        1.055056000000e+03,\r\n    - thermochemical British thermal unit\r\n        1.054350000000e+03,\r\n    - mean British thermal unit [Btu]\r\n        1.055870000000e+03,\r\n    - British thermal unit (39 F)\r\n        1.059670000000e+03,\r\n    - British thermal unit (59 F)\r\n        1.054800000000e+03,\r\n    - British thermal unit (60 F)\r\n        1.054680000000e+03,\r\n */\n\n/**\r\n * @file Units-of-measure compiler\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n */\nclass Compiler {\n  /**\r\n   * @param {array} unitDefs The units definitions array\r\n   */\n  constructor(unitDefs) {\n    this._unitMap = this._createUnitsMap(unitDefs);\n  }\n\n  _createUnitsMap(unitDefs) {\n    const map = new Map();\n    unitDefs.forEach(([key, uom]) => {\n      map.set(key, uom);\n    });\n    return map;\n  }\n  /**\r\n   * Compiles a previously parsed and de-aliased units-of-measure triplet into a units Signature.\r\n   *\r\n   * @param {array} triplet [numberf:coeff, string|array:uom, integer:power]\r\n   * @return {object} The units' signature for the triplet\r\n  */\n\n\n  compile(triplet) {\n    let sig = { ...protoSignature\n    };\n    const [coeff, uom, power] = triplet;\n\n    if (Array.isArray(uom)) {\n      // then this is a compound unit-of-measure (such as W = J/s)\n      uom.forEach((uomTriplet, idx) => {\n        const [,, p] = uomTriplet;\n        const sig2 = this.compile(uomTriplet);\n        baseSet.forEach(base => {\n          sig[base] += sig2[base];\n        });\n        sig.coeff *= p > 0 ? sig2.coeff : 1 / sig2.coeff;\n      });\n      sig.coeff *= coeff;\n    } else if (baseSet.has(uom)) {\n      // then this is a Base unit\n      sig[uom] = sig[uom] + 1;\n    } else if (this._unitMap.has(uom)) {\n      // then this is a derived unit\n      // continue recursing until we reach a base\n      sig = this.compile(this._unitMap.get(uom));\n\n      if (power !== 1) {\n        baseSet.forEach(base => {\n          if (sig[base]) sig[base] *= power;\n        });\n        sig.coeff = sig.coeff ** Math.abs(power);\n      }\n\n      sig.coeff = sig.coeff * coeff;\n    } else {\n      // else this is an unknown uom\n      throw new Error(`Unknown unit-of-measure '${uom}'`);\n    }\n\n    return sig;\n  }\n\n}\n\n/**\r\n * @file Units-of-measure parser\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n*/\n// The parser recognizes these characters as letters (part of a word)\nconst letters = new Set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '_', '%', '\\u2126', // ohm\n'\\u2109', // oF\n'\\u2103', // oC\n'\\u212a', // oK\n'\\u00B0' // o\n]);\nclass Parser {\n  constructor(unitDefs) {\n    this._aliasMap = this._createAliasMap(unitDefs);\n\n    this._init();\n  }\n\n  _createAliasMap(unitDefs) {\n    const map = new Map();\n    unitDefs.forEach(def => {\n      const [key,, aliases] = def;\n      map.set(key, key);\n      aliases.forEach(alias => {\n        map.set(alias, key);\n      });\n    });\n    return map;\n  }\n\n  _init() {\n    this._term = '';\n    this._tokens = [];\n    this._inWord = false;\n    this._inNumber = false;\n    this._inNumerator = true;\n    this._lastToken = '';\n    this._token = '';\n  }\n\n  _isDigit(c) {\n    return c >= '0' && c <= '9' || c === '-' || c === '+';\n  }\n\n  _isLetter(c) {\n    return letters.has(c);\n  }\n\n  _isSlash(c) {\n    return c === '/';\n  }\n\n  _ensurePower() {\n    if (this._lastToken === 'word') {\n      const n = this._inNumerator ? 1 : -1;\n\n      this._tokens.push(n);\n\n      this._lastToken = 'number';\n    }\n  }\n\n  _pushNumber() {\n    if (this._lastToken === 'number') {\n      throw new Error('Units-of-measure expression has back-to-back powers');\n    }\n\n    this._tokens.push(parseInt(this._token) * (this._inNumerator ? 1 : -1));\n\n    this._lastToken = 'number';\n    this._inNumber = false;\n  }\n\n  _pushWord() {\n    const word = this._aliasMap.get(this._token);\n\n    if (word === undefined) {\n      throw new Error(`Units-of-measure expression '${this._term}' has unknown term '${this._token}'`);\n    }\n\n    this._tokens.push(word);\n\n    this._lastToken = 'word';\n    this._inWord = false;\n  }\n  /**\r\n    * Parses a units-of-measure expression into an array of [coeff, term, power] triplets.\r\n    * @param {string} str The units-of-measure string\r\n    * @returns {array} Array of [number:coeff, string:term, integer:power] triplets\r\n    */\n\n\n  parse(str) {\n    this._init();\n\n    this._term = str;\n\n    if (str === '') {\n      return [[1, 'dl', 1]];\n    }\n\n    for (let idx = 0; idx < str.length; idx += 1) {\n      const c = str[idx];\n\n      if (this._isLetter(c)) {\n        if (this._inNumber) {\n          this._pushNumber();\n\n          this._token = c;\n        } else if (this._inWord) {\n          this._token += c;\n        } else {\n          // not in word or in number\n          this._ensurePower();\n\n          this._token = c;\n        }\n\n        this._inWord = true;\n      } else if (this._isDigit(c)) {\n        if (this._inWord) {\n          this._ensurePower();\n\n          this._pushWord();\n\n          this._token = c;\n        } else if (this._inNumber) {\n          this._token += c;\n        } else {\n          // not in word or in number\n          this._token = c;\n        }\n\n        this._inNumber = true;\n      } else if (this._isSlash(c)) {\n        if (this._inWord) {\n          this._pushWord();\n\n          this._ensurePower();\n        } else if (this._inNumber) {\n          this._pushNumber();\n        } else {\n          // not in word or in number\n          this._ensurePower();\n        }\n\n        this._inNumber = false;\n        this._inWord = false;\n        this._inNumerator = false;\n        this._lastToken = '';\n        this._token = '';\n      } else {\n        // is white space\n        if (this._inNumber) {\n          this._pushNumber();\n        } else if (this._inWord) {\n          this._ensurePower();\n\n          this._pushWord();\n        }\n\n        this._inNumber = false;\n        this._inWord = false;\n        this._token = '';\n      }\n    } // End of string\n\n\n    if (this._inNumber) {\n      this._pushNumber();\n    } else if (this._inWord) {\n      this._pushWord();\n\n      this._ensurePower();\n    } else {\n      this._ensurePower();\n    }\n\n    const pairs = [];\n\n    for (let idx = 0; idx < this._tokens.length; idx += 2) {\n      pairs.push([1, this._tokens[idx], this._tokens[idx + 1]]);\n    }\n\n    return pairs;\n  }\n\n}\n\n/**\r\n * @file Units-of-measure converter\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n */\nclass Converter {\n  constructor() {\n    this._n = 0;\n    this._parser = new Parser(unitDefs);\n    this._compiler = new Compiler(unitDefs);\n    this._signatures = new Map(); // Do this AFTER signatures map is created on previous line\n\n    this._quantities = this._createQuantityMap(quantity);\n    this._temp = this._createTemperatureMap(unitDefs);\n  }\n\n  _createQuantityMap(quantity) {\n    const map = new Map();\n    quantity.forEach(q => {\n      const [text, terms] = q;\n      const sig = this.getSignature(terms[0]);\n\n      const sigKey = this._sigKey(sig);\n\n      if (!map.has(sigKey)) {\n        map.set(sigKey, [text]);\n      } else {\n        map.get(sigKey).push(text);\n      }\n    });\n    return map;\n  }\n\n  _createTemperatureMap(unitDefs) {\n    const map = new Map();\n    unitDefs.forEach(unitDef => {\n      const [uom,, aliases] = unitDef;\n\n      if (uom === 'oF' || uom === 'oC' || uom === 'oK') {\n        map.set(uom, uom);\n        aliases.forEach(alias => {\n          map.set(alias, uom);\n        });\n      }\n    });\n    return map;\n  } // Temperature scale conversion\n\n\n  _c2f(c) {\n    return c * 9 / 5 + 32;\n  }\n\n  _c2k(c) {\n    return c + 273.15;\n  }\n\n  _f2c(f) {\n    return (f - 32) * 5 / 9;\n  }\n\n  _f2k(f) {\n    return this._c2k(this._f2c(f));\n  }\n\n  _k2c(k) {\n    return k - 273.15;\n  }\n\n  _k2f(k) {\n    return this._c2f(this._k2c(k));\n  } // Returns a signature key like 'd-2m1' used as Map keys\n\n\n  _sigKey(sig) {\n    let key = '';\n    baseSet.forEach(base => {\n      key += base[1] + sig[base];\n    });\n    return key;\n  }\n\n  _convertTemperatureScale(amount, fromT, intoT) {\n    const t1 = this._temp.get(fromT);\n\n    const t2 = this._temp.get(intoT);\n\n    if (t1 === t2) return amount;\n\n    if (t1 === 'oC') {\n      return t2 === 'oK' ? this._c2k(amount) : this._c2f(amount);\n    } else if (t1 === 'oK') {\n      return t2 === 'oC' ? this._k2c(amount) : this._k2f(amount);\n    }\n\n    return t2 === 'oC' ? this._f2c(amount) : this._f2k(amount);\n  }\n\n  convert(amount, fromUom, intoUom) {\n    this._n++;\n\n    if (this._temp.has(fromUom) || this._temp.has(intoUom)) {\n      return this._convertTemperatureScale(amount, fromUom, intoUom);\n    }\n\n    return amount * this.factorFromInto(fromUom, intoUom);\n  }\n\n  convertible(uom1, uom2) {\n    const sig1 = this.getSignature(uom1);\n    const sig2 = this.getSignature(uom2);\n    let ok = true;\n    baseSet.forEach(basePower => {\n      if (sig1[basePower] !== sig2[basePower]) ok = false;\n    });\n    return ok;\n  }\n\n  factorToBase(uom) {\n    const sig = this.getSignature(uom);\n    return sig.coeff;\n  }\n\n  factorFromInto(fromUom, intoUom) {\n    const sig1 = this.getSignature(fromUom);\n    const sig2 = this.getSignature(intoUom);\n    return sig1.coeff / sig2.coeff;\n  }\n\n  hasSignature(key) {\n    return this._signatures.has(key);\n  }\n\n  quantity(key) {\n    const sig = this.getSignature(key);\n\n    const sigKey = this._sigKey(sig);\n\n    const labels = this._quantities.get(sigKey);\n\n    return labels === undefined ? 'unknown' : labels.join(', ');\n  }\n\n  getSignature(key) {\n    if (!this._signatures.has(key)) {\n      const tripletsArray = this._parser.parse(key);\n\n      const signature = this._compiler.compile([1, tripletsArray, 1]);\n\n      this._signatures.set(key, signature);\n    }\n\n    return this._signatures.get(key);\n  }\n\n}\n\n/**\r\n * @file Units-of-measure singleton\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n */\n\nconst Uom = new Converter();\n\n/**\n * @file Quantity Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n  */\n/**\n * Quantity class extends Float by adding units-of-measure to the native value, including\n * - conversion of input/display text/values to native units-of-measure\n * - conversion of native value to display units-of-measure\n *\n * New Methods:\n * - _ensureValidUnits(units)\n * - displayValueToNativeValue(displayValue)\n * - nativeValueToDisplayValue(nativeValue)\n * - nativeUnits()\n * - setDisplayUnits(units)\n * - unitsOptions()\n\n *\n Overridden Methods:\n * - displayString(nativeValue)\n * - displayUnits()\n * - displayValue()\n * - inputHint()\n * - maximumDisplayValue()\n * - minimumDisplayValue()\n * - validateDisplayValue(inputText)\n * - validateNativeValue(displayValue, nativeValue)\n */\n\nclass Quantity extends Float {\n  /**\n   * @param {string} key Unique key for this Variant (i.e., 'FireLineIntensity' or 'WindSpeed')\n   * @param {string[]} unitsOptions Array of allowed units-of-measure (i.e., ['lb/ft2', 't/ac', 'kg/m2', 'T/ha'] )\n   * @param {number} maxValue Maximum allowed *client/user/display input* value\n   * @param {number} defaultValue  If omitted, set to 0\n   * @param {number} minValue Minimum allowed *client/user/display input* value\n   * @param {number} stepValue Step value for input sliders\n   */\n  constructor(key, unitsOptions, maxValue, defaultValue = 0, minValue = 0, stepValue = 1) {\n    super(key, defaultValue, minValue, maxValue, stepValue);\n\n    if (!(unitsOptions instanceof Array)) {\n      throw new Error(`Quantity() arg 2 expects an array, but got '${typeof unitsOptions}'`);\n    } // Throw an Error if units-of-measure terms are not valid or compatible\n\n\n    unitsOptions.forEach(uom => {\n      Uom.convert(1, uom, uom);\n\n      if (!Uom.convertible(unitsOptions[0], uom)) {\n        throw new Error(`Quantity '${this._key}' units '${uom}' is not convertible to ${unitsOptions[0]}`);\n      }\n    });\n    this._units = {\n      _display: unitsOptions[0],\n      _native: unitsOptions[0],\n      _options: unitsOptions\n    };\n  }\n\n  _ensureValidUnits(units) {\n    if (!this._units._options.includes(units)) {\n      throw new Error(`Quantity '${this._key}' has no units of '${units}'`);\n    }\n\n    return units;\n  }\n\n  defaultDisplayString() {\n    return this.displayString(this.defaultValue());\n  }\n\n  defaultDisplayValue() {\n    return this.displayValue(this.defaultValue());\n  } // Overrides Numeric.displayValue() to perform conversions to display units\n\n\n  displayString(nativeValue) {\n    return `${this.displayValue(nativeValue)} ${this.displayUnits()}`;\n  }\n\n  displayUnits() {\n    return this._units._display;\n  } // Overrides Float.displayValue() to perform conversion to display units\n\n\n  displayValue(nativeValue) {\n    return this._formatValue(this.nativeValueToDisplayValue(nativeValue));\n  }\n\n  displayValueToNativeValue(displayValue) {\n    return Uom.convert(displayValue, this._units._display, this._units._native);\n  } // Overrides Float.inputHint() to perform conversion to display units and add display uom\n\n\n  inputHint() {\n    return `${this.minimumDisplayValue()} - ${this.maximumDisplayValue()} ${this._units._display}`;\n  }\n\n  isValidDisplayValue(inputText) {\n    return this.validateDisplayValue(inputText).valid;\n  }\n\n  isValidNativeValue(value) {\n    if (typeof value !== 'number') return false;\n    return this.validateNativeValue(value).valid;\n  } // Overrides Numeric version to perform conversion to display units-of-measure\n\n\n  maximumDisplayValue() {\n    return this._formatValue(Uom.convert(this._value._maximum, this._units._native, this._units._display));\n  }\n\n  maximumDisplayString() {\n    return `${this.maximumDisplayValue()} ${this._units._display}`;\n  } // Overrides Numeric version to perform conversion to display units-of-measure\n\n\n  minimumDisplayValue() {\n    return this._formatValue(Uom.convert(this._value._minimum, this._units._native, this._units._display));\n  }\n\n  minimumDisplayString() {\n    return `${this.minimumDisplayValue()} ${this._units._display}`;\n  }\n\n  nativeUnits() {\n    return this._units._native;\n  }\n\n  nativeValueToDisplayValue(nativeValue) {\n    return Uom.convert(nativeValue, this._units._native, this._units._display);\n  }\n\n  setDisplayUnits(units) {\n    this._units._display = this._ensureValidUnits(units);\n    return this;\n  } // Overrides Numeric version to perform conversion to display units-of-measure\n\n\n  stepDisplayValue() {\n    return this._formatValue(Uom.convert(this._value._step, this._units._native, this._units._display));\n  }\n\n  stepDisplayString() {\n    return `${this.stepDisplayValue()} ${this._units._display}`;\n  }\n\n  unitsOptions() {\n    return this._units._options;\n  } // Overrides Float.validateDisplayValue() to apply filterNonNegativeNumeric()\n  // AND convert from display (input) units to native units before validating\n\n\n  validateDisplayValue(inputText) {\n    const text = inputText.toString(); // filter invalid characters from input text\n\n    const filtered = filterNonNegativeNumeric(text); // cast from text to number, boolean, object, or some other string\n\n    const displayValue = parseFloat(filtered);\n\n    if (isNaN(displayValue)) {\n      return new ValidationResult(false, filtered, 'Not a valid number string');\n    } // convert quantity from display to native units\n\n\n    const nativeValue = this.displayValueToNativeValue(displayValue); // validate native value\n\n    if (nativeValue < this._value._minimum) {\n      return new ValidationResult(false, displayValue, `Less than minimum value of ${this.minimumDisplayString()} ` + `(${this._formatValue(this._value._minimum)} ${this.nativeUnits()})`);\n    } else if (nativeValue > this._value._maximum) {\n      return new ValidationResult(false, displayValue, `Greater than maximum value of ${this.maximumDisplayString()} ` + `(${this._formatValue(this._value._maximum)} ${this.nativeUnits()})`);\n    }\n\n    return new ValidationResult(true, nativeValue);\n  }\n\n  validateNativeValue(nativeValue) {\n    if (typeof nativeValue === 'undefined') {\n      throw new Error('Quantity.validateNativeValue() requires native value arg');\n    } else if (nativeValue < this._value._minimum) {\n      return new ValidationResult(false, this.displayValue(nativeValue), `Less than minimum value of ${this.minimumDisplayString()} ` + `(${this._formatValue(this._value._minimum)} ${this.nativeUnits()})`);\n    } else if (nativeValue > this._value._maximum) {\n      return new ValidationResult(false, this.displayValue(nativeValue), `Greater than maximum value of ${this.maximumDisplayString()} ` + `(${this._formatValue(this._value._maximum)} ${this.nativeUnits()})`);\n    }\n\n    return new ValidationResult(true, nativeValue);\n  }\n\n}\n\n/**\n * @file Ratio Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n  */\n/**\n * Ratio is a Quantity Variant for rational numbers that can be expressed\n * in units-of-measure 'ratio' or '%'\n */\n\nclass Ratio extends Quantity {\n  /**\n   * @param {string} key Unique key for this Variant (i.e., 'FireLineIntensity' or 'WindSpeed')\n   * @param {number} maxValue Maximum allowed *client/user/display input* value\n   * @param {number} defaultValue  If omitted, set to 0\n   * @param {number} minValue Minimum allowed *client/user/display input* value\n   * @param {number} stepValue Step value for input sliders\n   */\n  constructor(key, maxValue, defaultValue = 0, minValue = 0, stepValue = 1) {\n    const unitsOptions = ['ratio', '%'];\n    super(key, unitsOptions, maxValue, defaultValue, minValue, stepValue);\n  }\n\n}\n\n/**\n * @file Fraction Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n  */\n/**\n * Fraction is a Ratio constrained to the range [0..1]\n */\n\nclass Fraction extends Ratio {\n  /**\n   * @param {string} key Unique key for this Variant (i.e., 'FireLineIntensity' or 'WindSpeed')\n   * @param {number} defaultValue  If omitted, set to 0\n   * @param {number} stepValue Step value for input sliders\n   */\n  constructor(key, defaultValue = 0, stepValue = 0.01) {\n    super(key, 1, defaultValue, 0, stepValue);\n  }\n\n}\n\n/**\n * @file Obj Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Obj is a generic Object that should be subclassed for every instance.\n */\n\nclass Obj extends _Variant {\n  /**\n   * @param {bool} defaultValue\n   */\n  constructor(key, defaultValue = {}) {\n    const signature = `new Obj(${key}, ${defaultValue}) `;\n\n    if (typeof defaultValue !== 'object') {\n      throw new Error(signature + 'arg 2 \\'defaultValue\\' must be an Object');\n    }\n\n    super(key, defaultValue);\n  }\n\n  defaultDisplayString() {\n    return this.displayString(this.defaultValue());\n  }\n\n  defaultDisplayValue() {\n    return this.displayValue(this.defaultValue());\n  }\n\n  displayString(obj) {\n    return this.displayValue(obj);\n  }\n\n  displayValue(obj) {\n    return JSON.stringify(obj);\n  }\n\n  inputHint() {\n    return '';\n  }\n\n  isValidNativeValue(obj) {\n    return typeof obj === 'object';\n  }\n\n  maximumDisplayValue() {\n    return this.defaultDisplayValue();\n  }\n\n  minimumDisplayValue() {\n    return this.defaultDisplayValue();\n  }\n\n  stepValue() {\n    return null;\n  }\n\n  stepDisplayValue() {\n    return '';\n  }\n\n}\n\n/**\n * @file Text Variant class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\n/**\n * Text is a Variant whose value is a Javascript string primitive.\n */\n\nclass Text extends _Variant {\n  constructor(key, defaultValue = '', minLength = 0, maxLength = 999999) {\n    const signature = `new Text('${key}', '${defaultValue}', ${minLength}, ${maxLength}) `;\n\n    if (typeof defaultValue !== 'string') {\n      throw new Error(signature + 'arg 2 \\'defaultValue\\' must be a \\'string\\'');\n    } else if (typeof minLength !== 'number') {\n      throw new Error(signature + `arg 3 'minLength' must be a 'number', but received a ${typeof minLength}`);\n    } else if (typeof maxLength !== 'number') {\n      throw new Error(signature + `arg 4 'maxLength' must be a 'number', but received a ${typeof maxLength}`);\n    } else if (minLength > maxLength) {\n      throw new Error(signature + 'arg 3 \\'minLength\\' exceeds arg 4 \\'maxLength\\'');\n    } else if (defaultValue.length < minLength) {\n      throw new Error(signature + 'arg 2 \\'defaultValue\\' length is less than arg 3 \\'minLength\\'');\n    } else if (defaultValue.length > maxLength) {\n      throw new Error(signature + 'arg 2 defaultValue length exceeds arg 4 \\'maxLength\\'');\n    }\n\n    super(key, defaultValue);\n    this._value._minimumLength = minLength;\n    this._value._maximumLength = maxLength;\n  }\n\n  inputHint() {\n    return `${this.minimumValue()} - ${this.maximumValue()} chars`;\n  }\n\n  isValidDisplayValue(inputText) {\n    return this.validateDisplayValue(inputText).valid;\n  }\n\n  isValidNativeValue(value) {\n    if (typeof value !== 'string') return false;\n    return this.validateNativeValue(value).valid;\n  }\n\n  maximumValue() {\n    return this._value._maximumLength;\n  }\n\n  minimumValue() {\n    return this._value._minimumLength;\n  }\n\n  stepValue() {\n    return 1;\n  }\n\n  validateDisplayValue(inputText) {\n    return this.validateNativeValue(inputText);\n  }\n\n  validateNativeValue(text) {\n    if (typeof text !== 'string') {\n      return new ValidationResult(false, text, 'Must be a string');\n    } else if (text.length < this.minimumValue()) {\n      return new ValidationResult(false, text, `Must have ${this.minimumValue()} or more chars`);\n    } else if (text.length > this.maximumValue()) {\n      return new ValidationResult(false, text, `Must have ${this.maximumValue()} or less chars`);\n    }\n\n    return new ValidationResult(true, text);\n  }\n\n}\n\n/**\n * @file Confgis.js defines the fire simulator Config Variants\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\n/**\n * Declares the specialized BehavePlus Config Variants.\n *\n * Note that classes derived from Option() and Config() require an array of options argument.\n */\n// Configuration options\n\nclass ConfigModuleActive extends Config {\n  constructor() {\n    super('ConfigModuleActive', '', ['active', 'inactive']);\n  }\n\n}\nclass ConfigLinkCrownFire extends Config {\n  constructor() {\n    super('ConfigLinkCrownFire', 'The crown spotting module inputs are', [['linkedToCrownFire', 'linked to the Crown Fire Module outputs'], ['standAlone', 'entered directly (stand-alone mode)']]);\n  }\n\n}\nclass ConfigLinkFireEllipse extends Config {\n  constructor() {\n    super('ConfigLinkFireEllipse', 'The fire containment module inputs are', [['linkedToFireEllipse', 'linked to fire ellipse module outputs'], ['standAlone', 'entered separately (stand-alone)']]);\n  }\n\n}\nclass ConfigLinkScorchHeight extends Config {\n  constructor() {\n    super('ConfigLinkScorchHeight', 'The tree mortality module inputs (scorch height) are:', [['linkedToScorchHeight', 'linked to the scorch surface or fire ellipse outputs'], ['standAlone', 'entered separately (stand-alone mode)']]);\n  }\n\n}\nclass ConfigLinkSurfaceFire extends Config {\n  constructor() {\n    super('ConfigLinkSurfaceFire', 'This module\\'s inputs are', [['linkedToSurfaceFire', 'linked to Surface Fire outputs'], ['standAlone', 'entered directly (stand-alone mode)']]);\n  }\n\n} // bp6 #11 Surface > Input  > Chaparral > Total load is: [specified, est]\n\nclass ConfigChaparralTotalLoad extends Config {\n  constructor() {\n    super('ConfigChaparralTotalLoad', 'When required as input, chaparral total fuel load is', [['input', 'entered directly'], ['estimated', 'estimated from chaparral depth']]);\n  }\n\n} // bp6 #2 - Surface > Input  > Moisture > Herb Curing: [est, inp]\n\nclass ConfigCuredHerbFraction extends Config {\n  constructor() {\n    super('ConfigCuredHerbFraction', 'The cured herb fraction for BehavePlus fuel models is', [['input', 'entered directly'], ['estimated', 'estimated from live fuel moisture']]);\n  }\n\n} // bp6 #1 Surface > Input  > Fuel:\n// [key, std, exp, harm, arith, pg, wa, ch]\n// Bpx splits bp6 config #1 into two configs; primary.fuel and secondary.fuel\n\nclass ConfigPrimaryFuels extends Config {\n  constructor() {\n    super('ConfigPrimaryFuels', 'Primary surface fuels are specified by entering', [['catalog', 'a fuel model catalog key'], ['behave', 'standard BehavePlus fuel parameters'], ['chaparral', 'chaparral dynamic fuel parameters'], ['palmettoGallberry', 'palmetto-gallberry dynamic fuel parameters'], ['westernAspen', 'western aspen dynamic fuel parameters']]);\n  }\n\n} // bp6 #1 Surface > Input  > Fuel:\n// [key, std, exp, harm, arith, pg, wa, ch]\n// Bpx splits bp6 config #1 into two configs; primary.fuel and secondary.fuel\n\nclass ConfigSecondaryFuels extends Config {\n  constructor() {\n    super('ConfigSecondaryFuels', 'Secondary surface fuels are specified by entering', [['none', 'there are no secondary fuels'], ['catalog', 'a fuel model catalog key'], ['behave', 'standard BehavePlus fuel parameters'], ['chaparral', 'chaparral dynamic fuel parameters'], ['palmettoGallberry', 'palmetto-gallberry dynamic fuel parameters'], ['westernAspen', 'western aspen dynamic fuel parameters']]);\n  }\n\n} // bp6 #3 - Surface > Input  > Moisture > Fuel Moisture:\n// [ind, cat, mixed, scen]\n\nclass ConfigMoistureContents extends Config {\n  constructor() {\n    super('ConfigMoistureContents', 'When required as input, fuel moisture is', [['individual', 'entered for the 3 dead and 2 live fuel moisture classes'], ['liveCategory', 'entered for the 3 dead moisture classes and a singe live category moisture'], ['fosberg', 'estimated from Fosbergs tables'], ['category', 'the dead and live category moistures only']]); // ['catalog' // 'a fuel moisture catalog key']\n  }\n\n} // bp6 #4 Surface > Input  > Wind Speed > Entered at:\n// [mid, 20-wafInp, 20-wafEst, 10-wafInp, 10-wafEst]\n// Bpx slipts Bp6 config #4 into 2 configs, fuel.waf and wind.speed\n\nclass ConfigWindSpeedAdjustmentFactor extends Config {\n  constructor() {\n    super('ConfigWindSpeedAdjustmentFactor', 'When required as input, midflame wind speed adjustment factor is', [['input', 'entered directly'], ['estimated', 'estimated from canopy and fuel parameters']]);\n  }\n\n} // bp6 #7 Surface > Input  > Slope > Slope is [percent, degrees]\n// bp6 #8 Surface > Input  > Slope > Slope is [input, map]\n// BPX combined Bp6 configs #7 and #8\n\nclass ConfigSlopeSteepness extends Config {\n  constructor() {\n    super('ConfigSlopeSteepness', 'When required as input, slope steepness is', [['ratio', 'entered as ratio of vertical rise to horizontal reach'], ['degrees', 'entered as degrees of angle above the horizontal plane'], ['map', 'estimated from map measurements']]);\n  }\n\n}\nclass ConfigTemperatureHumidity extends Config {\n  constructor() {\n    super('ConfigTemperatureHumidity', 'When relative humidity or dew point are required, prefer to', [['humidity', 'enter dry bulb and relative humidity and calculate dew point'], ['wetBulb', 'enter dry bulb, wet bulb, and elev and calculate dew point, relative humidity'], ['dewPoint', 'enter dry bulb and dew point and calculate relative humidity']]);\n  }\n\n} // bp6 #5 Surface > Input  > Wind Speed > Wind is:\n// [always upslope, specified]\n\nclass ConfigWindDirection extends Config {\n  constructor() {\n    super('ConfigWindDirection', 'When required as input, wind direction is', [['sourceFromNorth', 'the direction FROM which the wind is blowing (degrees from NORTH)'], ['headingFromUpslope', 'the direcion TOWARDS which the wind is blowing (degrees from UPSLOPE)'], ['upslope', 'assumed to be blowing upslope']], 1);\n  }\n\n} // bp6 #4 Surface > Input  > Wind Speed > Entered at:\n// [mid, 20-wafInp, 20-wafEst, 10-wafInp, 10-wafEst]\n// Bpx slipts Bp6 config #4 into 2 configs, fuel.waf and wind.speed\n\nclass ConfigWindSpeed extends Config {\n  constructor() {\n    super('ConfigWindSpeed', 'When required as an input, wind speed is entered for', [['at10m', '10-m height'], ['at20ft', '20-ft height'], ['atMidflame', 'midflame height']], 1);\n  }\n\n}\nclass ConfigFirelineIntensity extends Config {\n  constructor() {\n    super('ConfigFirelineIntensity', 'When required as an input, fireline intensity is', [['firelineIntensity', 'entered directly'], ['flameLength', 'estimated from the flame length input']]);\n  }\n\n}\nclass ConfigFireLengthToWidthRatio extends Config {\n  constructor() {\n    super('ConfigFireLengthToWidthRatio', 'When required as an input, fire ellipse length-to-width ratio is', [['lengthToWidthRatio', 'entered directly'], ['effectiveWindSpeed', 'estimated from the effective wind speed input']]);\n  }\n\n} // bp6 #6 Surface > Input  > Wind Speed > Impose max wind speed limit?\n\nclass ConfigEffectiveWindSpeedLimit extends Config {\n  constructor() {\n    super('ConfigEffectiveWindSpeedLimit', 'The fire spread rate effective wind speed limit is', [['applied', 'applied'], ['ignored', 'ignored']]);\n  }\n\n} // New to BPX\n\nclass ConfigFireWeightingMethod extends Config {\n  constructor() {\n    super('ConfigFireWeightingMethod', 'Weighted fire spread rate of 2 surface fuel types is based on', [['arithmetic', 'arithmetic mean spread rate'], // ['expected', 'expected value spread rate'],\n    ['harmonic', 'harmonic mean spread rate']], 1);\n  }\n\n} // bp6 #10 Surface > Input  > Directions > Wind & Fire Dir: [wrt upslope, wrt north]\n\nclass ConfigFireVector extends Config {\n  constructor() {\n    super('ConfigFireVector', 'When required as input, fire vector direction inputs are', [['fromHead', 'degrees clockwise from direction of maximum spread'], ['fromUpslope', 'degrees clockwise from upslope'], ['fromNorth', 'degrees clockwise from north']]);\n  }\n\n} // bp6 #9 Surface > Input  > Directions > Spread is [head, back, flank, psi, beta]\n// BPX implements all spread direction options at any time instead of selecting just one\n// bp6 #12 - Crown > Input  > Use [roth, s&r]\n// BPX - May not be necessary: S&R is applied only if passive ouputs requested\n// export class ConfigCrownFireMethod extends Config {\n//   constructor () {\n//     super('ConfigCrownFireMethod',\n//       'Crown fire is estimated via', [\n//         ['rothermel', 'Rothermel'],\n//         ['scottReinhardt', 'Scott and Reinhardt (wind must blow upslope)']], 1)\n//   }\n// }\n// bp6 #13 - Crown > Input  > FLI [fl, fli]\n// BPX- Required only in STANDALONE mode\n// export class ConfigCrownFli extends Config {\n//   constructor () {\n//     super('ConfigCrownFireFli',\n//       'The Crown Module is', [\n//         ['surface', 'linked to the Surface Module'],\n//         ['flameLength', 'run stand-alone using flame length input'],\n//         ['firelineIntensity', 'run stand-alone using fireline intensity input']])\n//   }\n// }\n// bp6 # 14 - Contain > Input  > resources [single, multiple]\n// export class ConfigContainResources extends Config {\n//   constructor () {\n//     super('ConfigContainResources',\n//       'Contain Module allows', [\n//         ['singleResource', 'a single firefighting resource'],\n//         ['multipleResources', 'multiple firefighting resources']], 1)\n//   }\n// }\n\n/**\n * @file Options.js defines the fire simulator Option Variants\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\n/**\n * Declares the specialized BehavePlus Option Variants used by nodes and equations.\n *\n * new Option(key, prompt, optionsArray, defaultOptionIndex = 0)\n *\n */\n\nclass ChaparralTypeOption extends Option {\n  constructor() {\n    super('ChaparralTypeOption', 'Chaparral fuel type', Types$1);\n  }\n\n}\nclass CrownFireInitiationTypeOption extends Option {\n  constructor() {\n    super('CrownFireInitiationTypeOption', 'Crown fire initiation type', InitiationTypes);\n  }\n\n}\nclass EastWestOption extends Option {\n  constructor() {\n    super('EastWestOption', 'Longitude East or West', ['east', 'west']);\n  }\n\n}\nclass FuelModelDomainOption extends Option {\n  constructor() {\n    super('FuelModelDomainOption', 'Fuel model domain', Domains);\n  }\n\n}\nclass FuelModelKeyOption extends Option {\n  constructor() {\n    super('FuelModelKeyOption', 'Fuel model key', keys());\n    this._value._default = '10';\n  }\n\n}\nclass IgnitionFuelTypeOption extends Option {\n  constructor() {\n    super('IgnitionFuelTypeOption', 'Ignition fuel type', LightningFuels);\n  }\n\n}\nclass IgnitionLightningChargeOption extends Option {\n  constructor() {\n    super('IgnitionLightningChargeOption', 'Ignition lightning charge', LightningCharges);\n  }\n\n}\nclass NorthSouthOption extends Option {\n  constructor() {\n    super('NorthSouthOption', 'Latitude North or South', ['north', 'south']);\n  }\n\n}\nclass SpottingSourceLocationOption extends Option {\n  constructor() {\n    super('SpottingSourceLocationOption', 'Spotting source location', locations());\n  }\n\n}\nclass TorchingTreeSpeciesOption extends Option {\n  constructor() {\n    super('TorchingTreeSpeciesOption', 'Species of torching trees', TorchingTreeSpecies);\n  }\n\n}\nclass TreeSpeciesFofem6Option extends Option {\n  constructor() {\n    super('TreeSpeciesFofem6Option', 'Tree species (FOFEM 6 code)', fofem6Codes());\n  }\n\n}\nclass WesternAspenTypeOption extends Option {\n  constructor() {\n    super('WesternAspenTypeOption', 'Western aspen fuel type', Types);\n  }\n\n}\n\n/**\n * @file Variants.js defines the fire simulator non-Config and non-Option Variants\n * (i.e., all the Quantity, Bool, etc)\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\n/**\n * Declares the specialized BehavePlus numeric (Quantity, Float, Integer) Variants.\n *\n * Note that classes derived from Crucible.Variant.Quantity()\n * require an array of valid units-of-measure as its first argument.\n */\n// Part 1 - Base Variants for more specialized BehavePlus Variants\n// All these MUST take a 'key' argument\n\nclass NoYes extends Bool {\n  // Bool(key, defaultValue=false, falseText='false', trueText='true', prompt='') {\n  constructor() {\n    super('NoYes', false, 'No', 'Yes', '');\n  }\n\n}\nclass DownWindCanopyIsOpen extends Bool {\n  // Bool(key, defaultValue=false, falseText='false', trueText='true', prompt='') {\n  constructor() {\n    super('DownWindCanopyIsOpen', false, 'Closed', 'Open', 'The down-wind canopy is');\n  }\n\n}\nclass EffectiveWindSpeedLimitIsExceeded extends Bool {\n  // Bool(key, defaultValue=false, falseText='false', trueText='true', prompt='') {\n  constructor() {\n    super('EffectiveWindSpeedLimitIsExceeded', false, 'Not Exceeded', 'Exceeded', 'The effective wind speed limit is');\n  }\n\n}\nclass FireSpreadRateLimitIsExceeded extends Bool {\n  // Bool(key, defaultValue=false, falseText='false', trueText='true', prompt='') {\n  constructor() {\n    super('FireSpreadRateLimitIsExceeded', false, 'Not Exceeded', 'Exceeded', 'The fire spread rate limit is');\n  }\n\n}\nclass FuelIsSheltered extends Bool {\n  // Bool(key, defaultValue=false, falseText='false', trueText='true', prompt='') {\n  constructor() {\n    super('FuelIsSheltered', false, 'Not sheltered', 'Sheltered', 'Is fuel bed sheltered by the canopy?');\n  }\n\n}\nclass Factor extends Float {\n  constructor(key = 'Factor', defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1) {\n    super(key, defaultValue, minValue, maxValue, stepValue);\n  }\n\n}\nclass NonNegativeFactor extends Factor {\n  constructor(key = 'NonNegativeFactor', defaultValue = 0, minValue = 0, maxValue = Number.MAX_VALUE, stepValue = 1) {\n    super(key, defaultValue, minValue, maxValue, stepValue);\n  }\n\n} // Part 2 - Specialized BehavePlus Variants - All 'key' properties are FIXED\n\nclass AirTemperature extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('AirTemperature', ['oF', 'oC']);\n  }\n\n}\nclass CompassAzimuth extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('CompassAzimuth', ['deg'], 360, 0, 0, 5);\n  }\n\n}\nclass CrownFillFraction extends Fraction {\n  // Fraction(key, defaultValue=0, stepValue = 0.01 )\n  constructor() {\n    super('CrownFillFraction');\n  }\n\n}\nclass CrownFireActiveRatio extends NonNegativeFactor {\n  constructor() {\n    super('CrownFireActiveRatio');\n  }\n\n}\nclass CrownFireBurnedFraction extends Fraction {\n  // Fraction(key, defaultValue=0, stepValue = 0.01 )\n  constructor() {\n    super('CrownFireBurnedFraction');\n  }\n\n}\nclass CrownRatioFraction extends Fraction {\n  // Fraction(key, defaultValue=0, stepValue = 0.01 )\n  constructor() {\n    super('CrownRatioFraction');\n  }\n\n}\nclass CrownTransitionRatio extends NonNegativeFactor {\n  constructor() {\n    super('CrownTransitionRatio');\n  }\n\n}\nclass DateDayOfMonth extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('DateDayOfMonth', 1, 1, 31, 1);\n  }\n\n}\nclass DateDayOfYear extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('DateDayOfYear', 1, 1, 366, 1);\n  }\n\n}\nclass DateJulian extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('DateJulian', 21100, 0, 40000, 1);\n  }\n\n}\nclass DateMonth extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('DateMonth', 1, 1, 12, 1);\n  }\n\n}\nclass DateYear extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('DateYear', 2020, 1000, 3000, 1);\n  }\n\n}\nclass Documentation extends Text {\n  // Text(key, defaultValue = '', minLength = 0, maxLength = 999999)\n  constructor() {\n    super('Documentation', '', 0, 80);\n  }\n\n}\nclass Elevation extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('Elevation', ['ft', 'm'], 30000, 0, -1000, 100);\n  }\n\n}\nclass ElevationDiff extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('ElevationDiff', ['ft', 'm'], 5000, 0, -5000, 100);\n  }\n\n}\nclass FireArea extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireArea', ['ft2', 'ac', 'mi2', 'm2', 'ha', 'km2']);\n  }\n\n}\nclass FireDampingCoefficient extends Fraction {\n  // Fraction(key, defaultValue=0, stepValue = 0.01 )\n  constructor() {\n    super('FireDampingCoefficient');\n  }\n\n}\nclass FireElapsedTime extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireElapsedTime', ['min', 'h', 'd']);\n  }\n\n}\nclass FireFirelineIntensity extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireFirelineIntensity', ['btu/ft/s', 'J/m/s', 'W/m']);\n  }\n\n}\nclass FireFlameDuration extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireFlameDuration', ['min', 's', 'h']);\n  }\n\n}\nclass FireFlameLength extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireFlameLength', ['ft', 'm']);\n  }\n\n}\nclass FireHeatPerUnitArea extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireHeatPerUnitArea', ['btu/ft2', 'J/m2']);\n  }\n\n}\nclass FireLengthToWidthRatio extends Factor {\n  // Factor(key, defaultValue=0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue=1)\n  constructor() {\n    super('FireLengthToWidthRatio', 1, 1);\n  }\n\n}\nclass FirePower extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FirePower', ['btu/min', 'btu/s', 'J/s', 'J/min', 'W']);\n  }\n\n}\nclass FirePowerRatio extends NonNegativeFactor {\n  constructor() {\n    super('FirePowerRatio');\n  }\n\n}\nclass FirePropagatingFluxRatio extends Fraction {\n  // Fraction(key, defaultValue=0, stepValue = 0.01 )\n  constructor() {\n    super('FirePropagatingFluxRatio');\n  }\n\n}\nclass FireReactionIntensity extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireReactionIntensity', ['btu/ft2/min', 'J/m2/min']);\n  }\n\n}\nclass FireReactionVelocity extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireReactionVelocity', ['min-1', 's-1']);\n  }\n\n}\nclass FireResidenceTime extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireResidenceTime', ['min', 's', 'h']);\n  }\n\n}\nclass FireScorchHeight extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireScorchHeight', ['ft', 'm']);\n  }\n\n}\nclass FireSpotDistance extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireSpotDistance', ['ft', 'm', 'ch', 'mi', 'km']);\n  }\n\n}\nclass FireSpreadDistance extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireSpreadDistance', ['ft', 'm', 'ch', 'mi', 'km']);\n  }\n\n}\nclass FireSpreadRate extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FireSpreadRate', ['ft/min', 'm/min', 'ch/h', 'mi/h', 'km/h']);\n  }\n\n}\nclass FuelAge extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelAge', ['y']);\n  }\n\n}\nclass FuelBasalArea extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelBasalArea', ['ft2', 'm2']);\n  }\n\n}\nclass FuelBedBulkDensity extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelBedBulkDensity', ['lb/ft3', 'kg/m3']);\n  }\n\n}\nclass FuelBedDepth extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelBedDepth', ['ft', 'in', 'm', 'cm'], 0.01);\n  }\n\n}\nclass FuelBedHeatOfPreignition extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelBedHeatOfPreignition', ['btu/lb', 'J/kg']);\n  }\n\n}\nclass FuelBedPackingRatio extends NonNegativeFactor {\n  constructor() {\n    super('FuelBedPackingRatio');\n  }\n\n}\nclass FuelCoverFraction extends Fraction {\n  constructor() {\n    super('FuelCoverFraction');\n  }\n\n}\nclass FuelCylindricalDiameter extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelCylindricalDiameter', ['in', 'cm']);\n  }\n\n}\nclass FuelCylindricalVolume extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelCylindricalVolume', ['ft3', 'in3', 'm3', 'cm3', 'mm3']);\n  }\n\n}\nclass FuelDeadFraction extends Fraction {\n  constructor() {\n    super('FuelDeadFraction');\n  }\n\n}\nclass FuelEffectiveHeatingNumber extends Fraction {\n  constructor() {\n    super('FuelEffectiveHeatingNumber');\n  }\n\n}\nclass FuelEffectiveMineralContent extends Fraction {\n  constructor() {\n    super('FuelEffectiveMineralContent');\n  }\n\n}\nclass FuelHeatOfCombustion extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelHeatOfCombustion', ['btu/lb', 'J/kg'], 12000, 8000);\n  }\n\n}\nclass FuelHeatOfPreignition extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelHeatOfPreignition', ['btu/lb', 'J/kg']);\n  }\n\n}\nclass FuelHeatSink extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelHeatSink', ['btu/ft3', 'J/m3']);\n  }\n\n}\nclass FuelLabelText extends Text {\n  constructor() {\n    super('FuelLabelText', '', 0, 80);\n  }\n\n}\nclass FuelMoistureContent extends Ratio {\n  // Ratio(key, maxValue, defaultValue=0, minValue = 0, stepValue = 1 ) {\n  constructor() {\n    super('FuelMoistureContent', 5, 1, 0.01, 0.01);\n  }\n\n}\nclass FuelMoistureContentDead extends Ratio {\n  // Ratio(key, maxValue, defaultValue=0, minValue = 0, stepValue = 1 ) {\n  constructor() {\n    super('FuelMoistureContentDead', 0.5, 0.1, 0.01, 0.01);\n  }\n\n}\nclass FuelMoistureContentLive extends Ratio {\n  // Ratio(key, maxValue, defaultValue=0, minValue = 0, stepValue = 1 ) {\n  constructor() {\n    super('FuelMoistureContentLive', 5, 1, 0.5, 0.25);\n  }\n\n}\nclass FuelOvendryLoad extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelOvendryLoad', ['lb/ft2', 'ton/ac', 'kg/m2', 'tonne/ha'], 10, 0);\n  }\n\n}\nclass FuelParticleFiberDensity extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelParticleFiberDensity', ['lb/ft3', 'kg/m3']);\n  }\n\n}\nclass FuelSizeClassIndex extends ArrayIndex {\n  constructor() {\n    super('FuelSizeClassIndex', 6);\n  }\n\n}\nclass FuelSurfaceArea extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelSurfaceArea', ['ft2', 'm2']);\n  }\n\n}\nclass FuelSurfaceAreaToVolumeRatio extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelSurfaceAreaToVolumeRatio', ['ft2/ft3', 'm2/m3', 'cm2/cm3'], 4000, 1, 1, 100);\n  }\n\n}\nclass FuelSurfaceAreaToVolumeRatio1H extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelSurfaceAreaToVolumeRatio1H', ['ft2/ft3', 'm2/m3', 'cm2/cm3'], 4000, 1200, 192, 100);\n  }\n\n}\nclass FuelSurfaceAreaToVolumeRatio10H extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelSurfaceAreaToVolumeRatio10H', ['ft2/ft3', 'm2/m3', 'cm2/cm3'], 192, 96, 48, 4);\n  }\n\n}\nclass FuelSurfaceAreaToVolumeRatio100H extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelSurfaceAreaToVolumeRatio100H', ['ft2/ft3', 'm2/m3', 'cm2/cm3'], 48, 30, 16, 10);\n  }\n\n}\nclass FuelTotalMineralContent extends Fraction {\n  constructor() {\n    super('FuelTotalMineralContent');\n  }\n\n}\nclass FuelVolume extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('FuelVolume', ['ft3', 'm3']);\n  }\n\n}\nclass GmtDiff extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('GmtDiff', 0, -14, +14, 1);\n  }\n\n}\nclass IgnitionFuelDepth extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('IgnitionFuelDepth', ['in', 'cm']);\n  }\n\n}\nclass IgnitionProbability extends Fraction {\n  constructor() {\n    super('IgnitionProbability');\n  }\n\n}\nclass Latitude extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('Latitude', ['deg'], 90, 0, 0, 5);\n  }\n\n}\nclass Longitude extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('Longitude', ['deg'], 180, 0, 0, 5);\n  }\n\n}\nclass MapArea extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('MapArea', ['in2', 'cm2', 'mm2']);\n  }\n\n}\nclass MapContoursCount extends Count {\n  constructor() {\n    super('MapContoursCount', 0);\n  }\n\n}\nclass MapDistance extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('MapDistance', ['in', 'ft', 'cm', 'mm']);\n  }\n\n}\nclass MapFactor extends Factor {\n  // Float(key, defaultValue=0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue=1) {\n  constructor() {\n    super('MapFactor', 1 / 24000, 1 / 2000000, 1);\n  }\n\n}\nclass MapScale extends Factor {\n  // Float(key, defaultValue=0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue=1) {\n  constructor() {\n    super('MapScale', 24000, 1, 2000000);\n  }\n\n}\nclass MortalityFraction extends Fraction {\n  constructor() {\n    super('MortalityFraction');\n  }\n\n}\nclass RelativeHumidity extends Fraction {\n  // Fraction(key, defaultValue=0, stepValue = 0.01 )\n  constructor() {\n    super('RelativeHumidity');\n  }\n\n}\nclass ShadingFraction extends Fraction {\n  constructor() {\n    super('ShadingFraction');\n  }\n\n}\nclass SlopeSteepnessDegrees extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('SlopeSteepnessDegrees', ['deg'], 89, 0, 0, 1);\n  }\n\n}\nclass SlopeSteepnessRatio extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('SlopeSteepnessRatio', ['ratio', '%'], 10, 0, 0, 0.1);\n  }\n\n}\nclass SpottingFirebrandObject extends Obj {\n  // Crown fire spotting distance\n  constructor() {\n    super('SpottingFirebrandObject', {\n      zdrop: 0,\n      xdrop: 0,\n      xdrift: 0,\n      xspot: 0,\n      layer: 0\n    });\n  }\n\n}\nclass TimeHour extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('TimeHour', 0, 0, 24, 1);\n  }\n\n}\nclass TimeMinute extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('TimeMinute', 0, 0, 60, 1);\n  }\n\n}\nclass TimeSecond extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('TimeSecond', 0, 0, 60, 1);\n  }\n\n}\nclass TimeStamp extends Integer {\n  // (key, defaultValue = 0, minValue = 1 - Number.MAX_VALUE, maxValue = Number.MAX_VALUE, stepValue = 1)\n  constructor() {\n    super('TimeStamp');\n  }\n\n}\nclass TreeBarkThickness extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('TreeBarkThickness', ['in', 'cm', 'mm']);\n  }\n\n}\nclass TreeCount extends Count {\n  constructor() {\n    super('TreeCount', 0);\n  }\n\n}\nclass TreeDbh extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('TreeDbh', ['in', 'ft', 'cm', 'm']);\n  }\n\n}\nclass TreeHeight extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('TreeHeight', ['ft', 'm']);\n  }\n\n}\nclass WeightingFactor extends Fraction {\n  constructor() {\n    super('WeightingFactor');\n  }\n\n}\nclass WindSpeed extends Quantity {\n  // Quantity(key, unitsOptions, maxValue, defaultValue=0, minValue = 0, stepValue = 1 )\n  constructor() {\n    super('WindSpeed', ['ft/min', 'mi/h', 'm/s', 'm/min', 'km/h']);\n  }\n\n}\nclass WindSpeedAdjustmentFactor extends Fraction {\n  // Fraction(key, defaultValue=0, stepValue = 0.01 ) {\n  constructor() {\n    super('WindSpeedAdjustmentFactor', 1, 0.05);\n  }\n\n}\n\n/**\r\n * @file VariantMap provides a Map() of Variant instances for a Dag.\r\n * @copyright 2021 Systems for Environmental Management\r\n * @author Collin D. Bevins, <cbevins@montana.com>\r\n * @license MIT\r\n*/\nconst vClasses = [ConfigModuleActive, ConfigLinkCrownFire, ConfigLinkFireEllipse, ConfigLinkScorchHeight, ConfigLinkSurfaceFire, ConfigChaparralTotalLoad, ConfigCuredHerbFraction, ConfigPrimaryFuels, ConfigSecondaryFuels, ConfigMoistureContents, ConfigWindSpeedAdjustmentFactor, ConfigSlopeSteepness, ConfigTemperatureHumidity, ConfigWindDirection, ConfigWindSpeed, ConfigFirelineIntensity, ConfigFireLengthToWidthRatio, ConfigEffectiveWindSpeedLimit, ConfigFireWeightingMethod, ConfigFireVector, ChaparralTypeOption, CrownFireInitiationTypeOption, EastWestOption, FuelModelDomainOption, FuelModelKeyOption, IgnitionFuelTypeOption, IgnitionLightningChargeOption, NorthSouthOption, SpottingSourceLocationOption, TorchingTreeSpeciesOption, TreeSpeciesFofem6Option, WesternAspenTypeOption, NoYes, DownWindCanopyIsOpen, EffectiveWindSpeedLimitIsExceeded, FireSpreadRateLimitIsExceeded, FuelIsSheltered, Factor, NonNegativeFactor, AirTemperature, CompassAzimuth, CrownFillFraction, CrownFireActiveRatio, CrownFireBurnedFraction, CrownRatioFraction, CrownTransitionRatio, DateDayOfMonth, DateDayOfYear, DateJulian, DateMonth, DateYear, Documentation, Elevation, ElevationDiff, FireArea, FireDampingCoefficient, FireElapsedTime, FireFirelineIntensity, FireFlameDuration, FireFlameLength, FireHeatPerUnitArea, FireLengthToWidthRatio, FirePower, FirePowerRatio, FirePropagatingFluxRatio, FireReactionIntensity, FireReactionVelocity, FireResidenceTime, FireScorchHeight, FireSpotDistance, FireSpreadDistance, FireSpreadRate, FuelAge, FuelBasalArea, FuelBedBulkDensity, FuelBedDepth, FuelBedHeatOfPreignition, FuelBedPackingRatio, FuelCoverFraction, FuelCylindricalDiameter, FuelCylindricalVolume, FuelDeadFraction, FuelEffectiveHeatingNumber, FuelEffectiveMineralContent, FuelHeatOfCombustion, FuelHeatOfPreignition, FuelHeatSink, FuelLabelText, FuelMoistureContent, FuelMoistureContentDead, FuelMoistureContentLive, FuelOvendryLoad, FuelParticleFiberDensity, FuelSizeClassIndex, FuelSurfaceArea, FuelSurfaceAreaToVolumeRatio, FuelSurfaceAreaToVolumeRatio1H, FuelSurfaceAreaToVolumeRatio10H, FuelSurfaceAreaToVolumeRatio100H, FuelTotalMineralContent, FuelVolume, GmtDiff, IgnitionFuelDepth, IgnitionProbability, Latitude, Longitude, MapArea, MapContoursCount, MapDistance, MapFactor, MapScale, MortalityFraction, RelativeHumidity, ShadingFraction, SlopeSteepnessDegrees, SlopeSteepnessRatio, SpottingFirebrandObject, TimeHour, TimeMinute, TimeSecond, TimeStamp, TreeBarkThickness, TreeCount, TreeDbh, TreeHeight, WeightingFactor, WindSpeed, WindSpeedAdjustmentFactor];\n/**\r\n * VariantMap is a Javascript Map() object containing an instance of each\r\n * Variant keyed by its Variant.key()\r\n */\n\nclass VariantMap extends Map {\n  constructor() {\n    super();\n    vClasses.forEach((Vclass, idx) => {\n      const v = new Vclass();\n      this.set(v.key(), v);\n    });\n\n    this._applyInitial();\n  } // Applies commonly expected display units where they differ from native units\n\n\n  _applyInitial() {\n    this.get('FireArea').setDisplayUnits('ac');\n    this.get('FuelMoistureContent').setDisplayUnits('%');\n    this.get('FuelMoistureContentDead').setDisplayUnits('%');\n    this.get('FuelMoistureContentLive').setDisplayUnits('%');\n    this.get('WindSpeed').setDisplayUnits('mi/h');\n  }\n\n}\n\n/**\n * @file DagPrivate class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\nclass DagPrivate {\n  constructor(sim) {\n    this._input = new Map(); // Map of input DagNode refs => array of input values\n\n    this._node = []; // array of DagNode references in Genome index order\n\n    this._configureClass = null;\n    this._runLimit = 1000000;\n    this._selected = new Set(); // Set of selected DagNode references (needed?)\n\n    this._sim = sim; // reference to the master Sim (and its Genome and literals)\n\n    this._sortedNodes = []; // array of topologically ordered DagNode references\n\n    this._storageClass = null; // StorageAbstract derived instance (set by new Dag())\n\n    this._updateClass = null; // UpdateAbstract derived instance (set by new Dag())\n\n    this._variantMap = new VariantMap(); // private VariantMap to be manipulated by this Dag\n\n    const variantsArray = Array.from(this._variantMap.values()); // used below to convert Variant indices to references\n\n    sim.genes().forEach(gene => {\n      const variantRef = variantsArray[gene[2]]; // reference to this DagNode's Variant\n\n      const value = variantRef.defaultValue(); // DagNode's actual value\n\n      this._node.push(new DagNode(gene, variantRef, value));\n    });\n    this.setTopology();\n  } // Returns an array of references to ALL Config Nodes that may be used by `node`\n  // Called only by Dag.setNodeEdges()\n\n\n  _nodeConfigs(node) {\n    const configs = new Set();\n    node.updaters().forEach(updater => {\n      if (updater[0].length) {\n        configs.add(this._node[updater[0][0]]);\n      }\n    });\n    return Array.from(configs);\n  } // Repackages an array of [<DagNode|key|index>] an array of [<DagNode>]\n\n\n  _refs(nodeRefKeyIdx, name) {\n    const refs = [];\n\n    if (!Array.isArray(nodeRefKeyIdx)) {\n      throw new Error(`${name}(DagNodes|keys|indices) arg must be an Array`);\n    }\n\n    nodeRefKeyIdx.forEach(ref => {\n      refs.push(this.get(ref));\n    });\n    return refs;\n  } // Repackages an array of [<DagNode|key|index>, <value>] pairs as an array of [<DagNode>, <value>] pairs\n\n\n  _refVals(pairs, name) {\n    const refVals = [];\n\n    if (!Array.isArray(pairs)) {\n      throw new Error(`${name}(keyValuePairs) arg must be an Array of 2-element arrays`);\n    }\n\n    pairs.forEach((pair, idx) => {\n      if (!Array.isArray(pair) || pair.length !== 2) {\n        throw new Error(`${name}(keyValuesPair[${idx}]) [<node|key|index>, <value>] must be a 2-element Array`);\n      }\n\n      refVals.push([this.get(pair[0]), pair[1]]);\n    });\n    return refVals;\n  } // Returns the DagNode's updater array under the current configuration,\n  // but with the configIdx replaced with its Config DagNode reference\n\n\n  findNodeUpdater(node) {\n    for (let idx = 0; idx < node.updaters().length; idx++) {\n      const updater = node.updater(idx);\n      const [condition, method] = updater;\n      if (!condition.length) return [[null, null], method]; // if no conditions, then this IS the current updater\n\n      const [configIdx, valueIdx] = condition;\n      const configNode = this.get(configIdx);\n      const configValue = configNode.value(); // current value of the Config DagNode\n\n      const testValue = this._sim.literal(valueIdx); // comparison value to active this updater\n\n\n      if (configValue === testValue) return [[configNode, testValue], method]; // If there is a match, this IS the current updater\n    } // The following line should never be executed, but then....\n\n\n    throw new Error(`DagNode '${node.key()}' has no active updater condition`);\n  }\n  /**\n   * Returns a reference to a DagNode given its reference, genome key, or genome numeric index\n   *\n   * @param {DagNode|string|number} something A DagNode reference, key, or Genome index\n   * @returns {DagNode} Reference to the passed node locator.\n   */\n\n\n  get(something) {\n    if (something instanceof DagNode) {\n      return something;\n    } else if (this._sim._geneKeyIdxMap.has(something)) {\n      return this._node[this._sim._geneKeyIdxMap.get(something)];\n    } else if (typeof something === 'number' && something >= 0 && something < this._node.length) {\n      return this._node[something];\n    }\n\n    throw new Error(`Unable to resolve a Node reference from arg '${something}'`);\n  } // Returns the literal string, number, or object given its genome index\n\n\n  literal(literalIdx) {\n    return this._sim.literal(literalIdx);\n  }\n  /**\n   * @returns {Array} An array of references to all required update DagNodes in topological order.\n   */\n\n\n  requiredUpdateNodes() {\n    const nodes = [];\n\n    this._sortedNodes.forEach(node => {\n      if (node._is._enabled && node._is._required && !node._is._config) {\n        nodes.push(node);\n      }\n    });\n\n    return nodes;\n  }\n  /**\n   * Called by setTopology() to return the DagNode's depth, calculating it first if necessary\n   * (Its OK to determine depths of disabled Nodes)\n   * @param {DagNode} Reference to the DagNode\n   * @param {Set<DagNode>} visited The Set of DagNode keys that have been traversed from the start of the chain\n   */\n\n\n  setNodeDepth(node, visited) {\n    // If this Node doesn't yet have a depth, derive it\n    if (!node._dag._depth) {\n      let maxDepth = 0;\n\n      node._dag._consumers.forEach(consumer => {\n        const consumerKey = consumer.key();\n\n        if (visited.has(consumerKey)) {\n          // oops, this DagNode was already visited\n          // The following lines should never be executed, but then...\n          visited.add(consumerKey);\n          throw new Error(`Cyclical dependency detected:\\n${Array.from(visited).join(' required by ->\\n')}`);\n        }\n\n        visited.add(consumerKey); // add this consumer to the Visited Set\n\n        const depth = this.setNodeDepth(consumer, visited); // recurse to get depth of this consumer\n\n        visited.delete(consumerKey); // remove the consumer from the Visited Set\n\n        maxDepth = Math.max(depth, maxDepth);\n      });\n\n      node._dag._depth = maxDepth + 1; // *this* DagNode's depth  must be greater\n    }\n\n    return node._dag._depth;\n  } // Called by setTopology() to set each DagNode's:\n  // - update method and parms,\n  // - producer (in) DagNodes, and\n  // - consumer (out) DagNodes.\n\n\n  setNodeEdges(node) {\n    const [condition, methodInfo] = this.findNodeUpdater(node);\n    const configNode = condition[0];\n    const [methodIdx, ...parms] = methodInfo;\n\n    const [file, func] = this._sim.method(methodIdx).split('.');\n\n    node._update._method = file === 'Math' ? Math[func] : Lib[file][func]; // Add all Config nodes referenced by node to the Required Set\n\n    node._update._configs = this._nodeConfigs(node);\n\n    node._update._configs.forEach(config => {\n      config._dag._consumers.push(node);\n    });\n\n    node._update._config = configNode; // eslint-disable-next-line dot-notation\n\n    node._is._input = node._update._method === input;\n    node._update._parms = [];\n    parms.forEach(parm => {\n      const [isLiteral, idx] = parm;\n\n      if (isLiteral) {\n        // parm is a literal number, string, or object\n        node._update._parms.push([isLiteral, this.literal(idx)]);\n      } else {\n        // parm is a DagNode reference\n        const producer = this.get(idx); // get reference to this DagNode parm\n\n        node._update._parms.push([isLiteral, producer]);\n\n        node._dag._producers.push(producer); // add producer to *this* node's producer array\n\n\n        producer._dag._consumers.push(node); // add *this* node to producer's consumer array\n\n      }\n    });\n  }\n\n  setRequiredNodes() {\n    // Unrequire ALL nodes while building array of all selected nodes\n    const selected = [];\n\n    this._sortedNodes.forEach(node => {\n      node._is._required = false;\n      if (node._is._selected && node._is._enabled) selected.push(node);\n    });\n\n    selected.forEach(node => {\n      this.setRequiredRecursive(node);\n    });\n  } // Recursively requires all producers of this DagNode\n\n\n  setRequiredRecursive(node) {\n    if (!node._is._required) {\n      // Nothing more to do if this DagNode is already required\n      node._is._required = true; // Require this DagNode's Config DagNode\n\n      node._update._configs.forEach(config => {\n        config._is._required = true;\n      }); // Require all this DagNode's producer DagNodes\n\n\n      node._dag._producers.forEach(producer => {\n        if (!producer._is._enabled) {\n          throw new Error(`Node '${node.key()}' has disabled producer '${producer.key()}'`);\n        }\n\n        this.setRequiredRecursive(producer);\n      });\n    }\n  }\n  /**\n   * Updates all the DagNode updater methods and args based on current config Nodes,\n   * then determines DagNode depths and topological order\n   */\n\n\n  setTopology() {\n    // clear each DagNode's consumers[], producers[], depth, order\n    this._node.forEach(node => {\n      node.reset();\n    }); // set each DagNode's updater methods, parms, consumers, and producers\n\n\n    this._node.forEach(node => {\n      this.setNodeEdges(node);\n    }); // set each DagNode's topological depth in the consumer chain\n\n\n    let maxDepth = 0;\n\n    this._node.forEach(node => {\n      const visited = new Set([node.key()]);\n      maxDepth = Math.max(maxDepth, this.setNodeDepth(node, visited));\n    }); // create this._sortedNodes[]\n\n\n    this.sortNodes();\n  }\n  /**\n     * Returns a topologically sorted array of the DagNodes, where:\n     *  - *input* DagNodes are deferred to the greatest depth allowed by their consumers (out-edges)\n     *  - *fixed* DagNodes are run first and just once\n     * Its OK to determine depths of disabled Nodes\n     */\n\n\n  sortNodes() {\n    this._sortedNodes = [];\n\n    this._node.forEach(node => {\n      // Ensure input DagNodes are processed after all other DagNodes at the same depth\n      // - non-input DagNodes have an odd numbered level = 2 * depth - 1\n      // - input DagNodes have an even numbered level = 2 * depth\n      node._dag._depth = node._is._input ? 2 * node._dag._depth - 1 : 2 * node._dag._depth;\n\n      this._sortedNodes.push(node);\n    }); // topologically sort the DagNode array\n\n\n    this._sortedNodes.sort((node1, node2) => node2._dag._depth - node1._dag._depth);\n\n    this._sortedNodes.forEach((node, order) => {\n      node._dag._order = order;\n    });\n  }\n\n}\n\n/**\n * @file StorageAbstract is a do-nothing Dag storage class from which other storage classes are derived.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\nclass StorageAbstract {\n  constructor(dag) {\n    if (typeof dag !== 'object') {\n      throw new Error('Dag Storage<Something>() class constructors require arg 1 to be an instance of the Dag class');\n    }\n\n    this._dag = dag;\n  }\n\n  init() {}\n\n  store() {}\n\n  end() {}\n\n}\n\n/**\n * @file UpdateAbstract is a do-nothing Dag updater class from which other updater classes are derived.\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\nclass UpdateAbstract {\n  constructor(dag) {\n    if (typeof dag !== 'object') {\n      throw new Error('Dag Update<Something>() class constructors require arg 1 to be an instance of the Dag class');\n    }\n\n    this._dag = dag;\n  }\n\n  update() {}\n\n}\n\n/**\n * @file UpdateOrthogonalStack class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\n/**\n * Generates a set of result values for all combinations of the dag.input values.\n *\n * For example, if fuel model has 2 input values, 1-h dead moisture has 3 input values,\n * and wind speed has 4 input values, then 2 x 3 x 4 = 24 results are generated.\n */\n\nclass UpdateOrthogonalStack extends UpdateAbstract {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(dag) {\n    super(dag);\n  }\n  /**\n   * @returns {object} {runs: 0, calls: 0, ok: true, message: ''}\n   */\n\n\n  update() {\n    const result = {\n      runs: 0,\n      calls: 0,\n      ok: true,\n      message: ''\n    };\n    const ptrMap = new Map(); // map of input DagNode value indices\n\n    this._dag.requiredInputNodes().forEach(node => ptrMap.set(node, 0));\n\n    this._dag._storageClass.init();\n\n    const stack = this._dag.requiredUpdateNodes(); // All required updteable (non-Config) DagNodes in topo order\n\n\n    if (stack.length > 0) {\n      let delta = 1;\n      let node;\n      let stackIdx = 0;\n\n      while (stackIdx >= 0) {\n        node = stack[stackIdx];\n\n        if (ptrMap.has(node)) {\n          // this is a required, non-Config input dagNode\n          if (delta > 0) {\n            // moving down the stack, so start with the first input value\n            ptrMap.set(node, 0);\n            node._value = this._dag._input.get(node)[0];\n          } else {\n            // moving up the stack, so check for another input value\n            const iptr = ptrMap.get(node) + 1; // point to its next input value\n\n            const inputs = this._dag._input.get(node); // get all the Node's input values\n\n\n            ptrMap.set(node, iptr); // set the input value pointer\n\n            if (iptr < inputs.length) {\n              // there is another input value to process...\n              node._value = inputs[iptr]; // set its next input value\n\n              delta = 1; // and go back down the stack\n            }\n          }\n        } else {\n          // this is NOT an input DagNode\n          if (delta > 0) {\n            // if moving down the stack...\n            node.updateValue();\n            result.calls++;\n          }\n        }\n\n        stackIdx += delta; // set the next stack node to be processed (+1 === next, -1 === previous)\n\n        if (stackIdx === stack.length) {\n          // at the end of the stack (must be going down)\n          this._dag._storageClass.store();\n\n          result.runs += 1;\n\n          if (result.runs >= this._dag._runLimit) {\n            result.ok = false;\n            result.message = `Run limit of ${this._dag._runLimit} exceeded.`;\n            stackIdx = 0;\n          }\n\n          delta = -1; // must now go back up the stack\n\n          stackIdx += delta; // set the next stack node to process (+1 === next, -1 === previous)\n        }\n      } // while\n\n    } // if (stack.length > 0)\n\n\n    this._dag._storageClass.end();\n\n    return result;\n  }\n\n}\n\n/**\n * @file Dag class public implementation\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\nclass Dag extends DagPrivate {\n  constructor(sim) {\n    super(sim);\n    this._storageClass = new StorageAbstract(this);\n    this._updateClass = new UpdateOrthogonalStack(this);\n  }\n\n  clearInputs() {\n    this._input = new Map();\n    return this;\n  }\n\n  clearSelected() {\n    this._node.forEach(node => {\n      node._is._required = false;\n      node._is._selected = false;\n    });\n\n    return this;\n  }\n  /**\n   * Sets the value of one or more Config DagNodes then calls setTopology()\n   * @param {*} nodeValuePairs Array of 2-element arrays where:\n   *  - element 0 is a Config DagNode reference, string key, or numeric Genome index, and\n   *  - element 1 is the Config option value (usually a string)\n   * @returns {Dag} Reference to *this* Dag (so we can chain configure([...]).run() )\n   */\n\n\n  configure(nodeValuePairs) {\n    this._refVals(nodeValuePairs, 'configure').forEach(([node, value]) => {\n      if (!node._is._config) {\n        throw new Error(`configure() node '${node.key()}' is not a COnfig DagNode`);\n      }\n\n      if (!node._variant.isValidNativeValue(value)) {\n        throw new Error(`Config Node '${node.key()}' value '${value}' is invalid`);\n      }\n\n      node._value = value;\n    });\n\n    if (this._configureClass) this._configureClass.configure();\n    this.setTopology();\n    this.setRequiredNodes();\n    return this;\n  }\n  /**\n   * @returns {Array} An array of references to all enabled DagNodes in topological order.\n   */\n\n\n  enabledNodes() {\n    return this._sortedNodes.filter(node => node._is._enabled);\n  }\n  /**\n   * Adds (or replaces) an array of input values for one or more DagNodes.\n   *\n   * Note that this function stores the DagNode's input values regardless of whether the\n   * DagNode is actually an input under the current configuration-selection.\n   * The values remain unchanged until they are reset by the another input() or a clearInputs().\n   *\n    * @param {*} nodeValuePairs Array of 2-element arrays where\n   *  - element 0 is a DagNode reference, string key, or numeric Genome index, and\n   *  - element 1 is the array of input *native* values\n   * @returns {Dag} Reference to *this* Dag (so we can call chain input([...]).run() )\n   */\n\n\n  input(nodeValuePairs) {\n    this._refVals(nodeValuePairs, 'input').forEach(([node, value]) => {\n      this._input.set(node, Array.isArray(value) ? value : [value]);\n    });\n\n    return this;\n  }\n  /**\n   * Returns a reference to a DagNode given its reference, genome key, or genome numeric index\n   *\n   * @param {DagNode|string|number} something A DagNode reference, key, or Genome index\n   * @returns {DagNode} Reference to the passed node locator.\n   */\n\n\n  node(something) {\n    return this.get(something);\n  }\n\n  nodes() {\n    return this._node;\n  }\n  /**\n   * @returns {Array} An array of references to all required Config DagNodes in topological order.\n   */\n\n\n  requiredConfigNodes() {\n    return this._sortedNodes.filter(node => node._is._config && node._is._required);\n  }\n  /**\n   * @returns {Array} An array of references to all required DagNodes in topological order.\n   */\n\n\n  requiredNodes() {\n    return this._sortedNodes.filter(node => node._is._required);\n  }\n  /**\n   * @returns {Array} An array of references to all required input DagNodes in topological order.\n   */\n\n\n  requiredInputNodes() {\n    return this._sortedNodes.filter(node => node._is._input && node._is._required && !node._is._config);\n  }\n\n  run() {\n    // Ensure every input DagNode has values in the Input Map\n    this._sortedNodes.forEach(node => {\n      if (node._is._required && node._is._input) {\n        if (!this._input.has(node) || this._input.get(node) === []) {\n          this._input.set(node, [node.value()]);\n        }\n      }\n    });\n\n    return this._updateClass.update(); // return recursive ? updateOrthogonalStack(this) : updateOrthogonalRecursive(this)\n  }\n\n  select(nodeRefsKeysIndices) {\n    this._refs(nodeRefsKeysIndices, 'select').forEach(node => {\n      node._is._selected = true;\n    });\n\n    this.setRequiredNodes();\n    return this;\n  }\n\n  selectedNodes() {\n    const nodes = [];\n\n    this._sortedNodes.forEach(node => {\n      if (node._is._selected) nodes.push(node);\n    });\n\n    return nodes;\n  }\n\n  setEnabled(prefixes, isEnabled) {\n    this._node.forEach(node => {\n      const key = node.key();\n\n      for (let idx = 0; idx < prefixes.length; idx++) {\n        if (key.startsWith(prefixes[idx])) {\n          node.setEnabled(isEnabled);\n          break;\n        }\n      }\n    });\n\n    return this;\n  }\n\n  setRunLimit(runs) {\n    this._runLimit = runs;\n    return this;\n  }\n  /**\n   * Sets the storage class used by the Dag after every update run.\n   * @param {StorageAbstract} storageClass Instance of a class derived from StorageAbstract\n   */\n\n\n  setStorageClass(storageClass) {\n    if (!(storageClass instanceof StorageAbstract)) {\n      throw new Error('setStorageClass() arg 1 must be an instance of StorageAbstract');\n    }\n\n    if (storageClass._dag !== this) {\n      throw new Error('setStorageClass() instance must be set on *this* Dag');\n    }\n\n    this._storageClass = storageClass;\n    return this;\n  }\n  /**\n   * Sets the updater class used by the Dag.\n   * @param {UpdateAbstract} updateClass Instance of a class derived from UpdateAbstract\n   */\n\n\n  setUpdateClass(updateClass) {\n    if (!(updateClass instanceof UpdateAbstract)) {\n      throw new Error('setUpdateClass() arg 1 must be an instance of UpdateAbstract');\n    }\n\n    if (updateClass._dag !== this) {\n      throw new Error('setUpdateClass() instance must be set on *this* Dag');\n    }\n\n    this._updateClass = updateClass;\n    return this;\n  }\n\n  sortedNodes() {\n    return this._sortedNodes;\n  }\n\n  unselect(nodeRefsKeysIndices) {\n    this._refs(nodeRefsKeysIndices, 'unselect').forEach(node => {\n      node._is._selected = false;\n    });\n\n    this.setRequiredNodes();\n    return this;\n  }\n  /**\n   * Validates one or more DagNode display text input sets whose values are strings\n   * (usually from a text file or browser input element) that must be translated,\n   * cast, and converted into native values, usually prior to calling Dag.input().\n   * @param {*} nodeValuePairs\n   * @returns An array with one ValidationResult object {valid, value, message, node}\n   * for each *raw input text* DagNode value\n   */\n\n\n  validateDisplayInputs(nodeValuePairs) {\n    const errors = [];\n\n    this._refVals(nodeValuePairs, 'validateDisplayInputs').forEach(([node, value]) => {\n      const values = Array.isArray(value) ? value : [value]; // ensure values are in an array\n\n      values.forEach(value => {\n        const result = node._variant.validateDisplayValue(value); // console.log(`Validating '${value}' returned ${JSON.stringify(result)}`)\n\n\n        if (!result.valid) {\n          errors.push(result);\n        }\n      });\n    });\n\n    return errors;\n  }\n  /**\n   * Validates one or more DagNode *native value* input sets, usually prior to calling Dag.input().\n   * NOTE that the provided values must be of the appropriate type (number, string, etc)\n   * and if the node is a Quantity, value must be expressed in the native units-of-measure.\n   * @param {*} nodeValuePairs\n   * @returns An array with one ValidationResult object {valid, value, message, node}\n   * for each *invalid* DagNode value\n   */\n\n\n  validateNativeInputs(nodeValuePairs) {\n    const errors = [];\n\n    this._refVals(nodeValuePairs, 'validateNativeInputs').forEach(([node, value]) => {\n      const values = Array.isArray(value) ? value : [value]; // ensure values are in an array\n\n      values.forEach(value => {\n        const result = node._variant.validateNativeValue(value);\n\n        if (!result.valid) {\n          errors.push(result);\n        }\n      });\n    });\n\n    return errors;\n  } // DEPRECATED - included only for backwards compatability in test files\n  // runConfigs(args) {\n  //   this.configure(args)\n  //   this.run()\n  // }\n  // setConfigs(args) { this.configure(args) }\n  // runInputs(args) {\n  //   this.input(args)\n  //   this.run()\n  // }\n  // setInputs(args) { this.input(args) }\n  // runSelected(args) {\n  //   this.setSelected(args)\n  //   this.run()\n  // }\n  // setSelected(args) {\n  //   const a = []\n  //   args.forEach(pair => { a.push(pair[0]) })\n  //   this.select(a)\n  // }\n\n\n}\n\n// autogenerated by GenomeCompiler.js on 4/26/2021, 5:40:02 PM\n// Gene key abbreviations\nconst spfbdp = 'surface.primary.fuel.bed.dead.particle.class';\nconst spfblp = 'surface.primary.fuel.bed.live.particle.class';\nconst ssfbdp = 'surface.secondary.fuel.bed.dead.particle.class';\nconst ssfblp = 'surface.secondary.fuel.bed.live.particle.class';\nconst ccfbdp = 'crown.canopy.fuel.bed.dead.particle.class';\nconst ccfblp = 'crown.canopy.fuel.bed.live.particle.class';\nconst spfbd = 'surface.primary.fuel.bed.dead';\nconst spfbl = 'surface.primary.fuel.bed.live';\nconst spff = 'surface.primary.fuel.fire';\nconst ssfbd = 'surface.secondary.fuel.bed.dead';\nconst ssfbl = 'surface.secondary.fuel.bed.live';\nconst ssff = 'surface.secondary.fuel.fire';\nconst ccfbd = 'crown.canopy.fuel.bed.dead';\nconst ccfbl = 'crown.canopy.fuel.bed.live';\nconst ccff = 'crown.canopy.fuel.fire';\nconst spfb = 'surface.primary.fuel.bed';\nconst ssfb = 'surface.secondary.fuel.bed';\nconst ccfb = 'crown.canopy.fuel.bed';\nconst cfa = 'crown.fire.active';\nconst cff = 'crown.fire.final';\nconst cfi = 'crown.fire.initiation';\nconst spf = 'surface.primary.fuel';\nconst ssf = 'surface.secondary.fuel';\nconst mbd = 'model.behave.derived';\nconst mbp = 'model.behave.parms';\nconst mcd = 'model.chaparral.derived';\nconst mcp = 'model.chaparral.parms';\nconst mpd = 'model.palmettoGallberry.derived';\nconst mpp = 'model.palmettoGallberry.parms';\nconst mwd = 'model.westernAspen.derived';\nconst mwp = 'model.westernAspen.parms';\nconst sfe = 'surface.fire.ellipse';\nconst swf = 'surface.weighted.fire';\nconst spotb = 'spotting.burningPile';\nconst spotc = 'spotting.crownFire';\nconst spots = 'spotting.surfaceFire';\nconst spott = 'spotting.torchingTrees';\nconst savr = 'surfaceAreaToVolumeRatio';\nconst emc = 'effective.mineralContent';\nconst tmc = 'total.mineralContent';\nconst heat = 'heatOfCombustion';\nconst ef = 'effectiveFuel';\nconst sa = 'surfaceArea';\nconst sc = 'sizeClass';\nconst wf = 'weightingFactor';\nconst qig = 'heatOfPreignition';\nconst waf = 'windSpeedAdjustmentFactor';\nconst load = 'ovendryLoad';\nconst mois = 'moistureContent';\nconst fli = 'firelineIntensity';\nconst fl = 'flameLength';\nconst lwr = 'lengthToWidthRatio';\nconst ros = 'spreadRate';\nconst rxi = 'reactionIntensity';\nconst sh = 'scorchHeight';\nconst hpua = 'heatPerUnitArea';\nconst phiew = 'phiEffectiveWind';\nconst taur = 'flameResidenceTime';\nconst ews = 'effectiveWindSpeed';\nconst dens = 'fiberDensity';\nconst ehn = 'heatingNumber';\nconst CompiledGenome = {\n  // Array of literals used by Gene updater config conditions and method parameters\n  literalArgsArray: [8000, // 0\n  'lengthToWidthRatio', // 1\n  'flameLength', // 2\n  'firelineIntensity', // 3\n  'headingFromUpslope', // 4\n  'upslope', // 5\n  'sourceFromNorth', // 6\n  'effectiveWindSpeed', // 7\n  1, // 8\n  'category', // 9\n  'fosberg', // 10\n  'liveCategory', // 11\n  'degrees', // 12\n  'map', // 13\n  'humidity', // 14\n  'wetBulb', // 15\n  0, // 16\n  'at10m', // 17\n  'at20ft', // 18\n  'atMidflame', // 19\n  32, // 20\n  46, // 21\n  30, // 22\n  8300, // 23\n  640, // 24\n  350, // 25\n  0.01, // 26\n  0.015, // 27\n  0.0555, // 28\n  0.055, // 29\n  0.03, // 30\n  'dead', // 31\n  109, // 32\n  127, // 33\n  140, // 34\n  5, // 35\n  61, // 36\n  2000, // 37\n  27, // 38\n  10500, // 39\n  2800, // 40\n  'live', // 41\n  9550, // 42\n  2200, // 43\n  0.035, // 44\n  0.3, // 45\n  0.4, // 46\n  0.25, // 47\n  'input', // 48\n  'applied', // 49\n  'catalog', // 50\n  'behave', // 51\n  'chaparral', // 52\n  'palmettoGallberry', // 53\n  'westernAspen', // 54\n  'none', // 55\n  'estimated', // 56\n  'chamise', // 57\n  'aspenShrub', // 58\n  'expected', // 59\n  'harmonic', // 60\n  'linkedToSurfaceFire', // 61\n  'fromHead', // 62\n  'fromUpslope', // 63\n  'fromNorth', // 64\n  'linkedToCrownFire', // 65\n  'standAlone', // 66\n  0.138, // 67\n  0.092, // 68\n  0.23, // 69\n  1500 // 70\n  ],\n  // Simple array of updater method <file>.<function> names\n  methodRefsArray: ['Dag.module', // 0\n  'Dag.config', // 1\n  'Dag.input', // 2\n  'IgnitionProbability.firebrand', // 3\n  'IgnitionProbability.lightningStrike', // 4\n  'Canopy.crownFill', // 5\n  'Canopy.crownLength', // 6\n  'Canopy.crownRatio', // 7\n  'Canopy.heatPerUnitArea', // 8\n  'Dag.fixed', // 9\n  'Canopy.sheltersFuelFromWind', // 10\n  'Canopy.fuelLoad', // 11\n  'Canopy.windSpeedAdjustmentFactor', // 12\n  'Spotting.appliedDownWindCoverHeight', // 13\n  'TreeMortality.barkThickness', // 14\n  'SurfaceFire.effectiveWindSpeedFromLwr', // 15\n  'SurfaceFire.firelineIntensityFromFlameLength', // 16\n  'SurfaceFire.flameLength', // 17\n  'Compass.diff', // 18\n  'Compass.sum', // 19\n  'SurfaceFire.lengthToWidthRatio', // 20\n  'Calc.divide', // 21\n  'Calc.multiply', // 22\n  'Compass.slopeRatioMap', // 23\n  'Compass.slopeDegreesMap', // 24\n  'FuelMoisture.fosbergReference', // 25\n  'FuelMoisture.fosbergCorrection', // 26\n  'FuelMoisture.fosbergDead1h', // 27\n  'FuelMoisture.fosbergDead10h', // 28\n  'FuelMoisture.fosbergDead100h', // 29\n  'Dag.bind', // 30\n  'Compass.opposite', // 31\n  'Compass.slopeDegrees', // 32\n  'Compass.slopeRatio', // 33\n  'TemperatureHumidity.reaDewPoint', // 34\n  'TemperatureHumidity.dewPoint', // 35\n  'IgnitionProbability.fuelTemperature', // 36\n  'TemperatureHumidity.relativeHumidity', // 37\n  'TemperatureHumidity.wetBulbDepression', // 38\n  'Wind.speedAt10m', // 39\n  'Wind.speedAt20ft', // 40\n  'Wind.speedAt20ftFromMidflame', // 41\n  'Wind.speedAtMidflame', // 42\n  'FuelParticle.selectByDomain', // 43\n  'FuelParticle.effectiveHeatingNumber', // 44\n  'FuelParticle.effectiveFuelLoad', // 45\n  'FuelParticle.heatOfPreignition', // 46\n  'FuelParticle.netOvendryLoad', // 47\n  'FuelParticle.sizeClass', // 48\n  'FuelParticle.sizeClassWeightingFactor', // 49\n  'FuelParticle.surfaceArea', // 50\n  'FuelParticle.surfaceAreaWeightingFactor', // 51\n  'FuelParticle.volume', // 52\n  'FuelParticle.effectiveFuelWaterLoad', // 53\n  'Calc.sum', // 54\n  'FuelBed.mineralDamping', // 55\n  'FuelBed.moistureDamping', // 56\n  'Calc.sumOfProducts', // 57\n  'FuelBed.extinctionMoistureContentFactor', // 58\n  'FuelBed.reactionIntensityDry', // 59\n  'FuelBed.sizeClassWeightingFactorArray', // 60\n  'FuelBed.extinctionMoistureContent', // 61\n  'FuelBed.heatSink', // 62\n  'FuelBed.noWindNoSlopeSpreadRate', // 63\n  'FuelBed.openWindSpeedAdjustmentFactor', // 64\n  'FuelBed.packingRatio', // 65\n  'FuelBed.optimumPackingRatio', // 66\n  'FuelBed.propagatingFluxRatio', // 67\n  'FuelBed.reactionVelocityExponent', // 68\n  'FuelBed.reactionVelocityMaximum', // 69\n  'FuelBed.reactionVelocityOptimum', // 70\n  'FuelBed.savr15', // 71\n  'SurfaceFire.maximumDirectionSlopeSpreadRate', // 72\n  'SurfaceFire.maximumDirectionWindSpreadRate', // 73\n  'SurfaceFire.maximumDirectionXComponent', // 74\n  'SurfaceFire.maximumDirectionYComponent', // 75\n  'SurfaceFire.maximumDirectionSpreadRate', // 76\n  'Calc.greaterThan', // 77\n  'SurfaceFire.effectiveWindSpeedLimit', // 78\n  'SurfaceFire.phiEwFromEws', // 79\n  'SurfaceFire.maximumSpreadRate', // 80\n  'FuelBed.slopeK', // 81\n  'SurfaceFire.phiSlope', // 82\n  'SurfaceFire.effectiveWindSpeed', // 83\n  'SurfaceFire.phiEffectiveWind', // 84\n  'SurfaceFire.phiEffectiveWindInferred', // 85\n  'SurfaceFire.spreadRateWithCrossSlopeWind', // 86\n  'Math.min', // 87\n  'SurfaceFire.spreadRateWithRosLimitApplied', // 88\n  'FuelBed.windSpeedAdjustmentFactor', // 89\n  'FuelBed.windB', // 90\n  'FuelBed.windC', // 91\n  'FuelBed.windE', // 92\n  'FuelBed.windK', // 93\n  'FuelBed.windI', // 94\n  'SurfaceFire.phiWind', // 95\n  'SurfaceFire.firelineIntensity', // 96\n  'FuelBed.taur', // 97\n  'SurfaceFire.spreadDirectionFromUpslope', // 98\n  'FuelBed.heatPerUnitArea', // 99\n  'SurfaceFire.scorchHeight', // 100\n  'FuelCatalog.domain', // 101\n  'BehaveFuel.curedHerbFraction', // 102\n  'FuelCatalog.behaveDepth', // 103\n  'FuelCatalog.behaveDeadMext', // 104\n  'FuelCatalog.behaveTotalHerbLoad', // 105\n  'FuelCatalog.behaveDead1Load', // 106\n  'FuelCatalog.behaveDead10Load', // 107\n  'FuelCatalog.behaveDead100Load', // 108\n  'FuelCatalog.behaveLiveStemLoad', // 109\n  'FuelCatalog.behaveDead1Savr', // 110\n  'FuelCatalog.behaveLiveHerbSavr', // 111\n  'FuelCatalog.behaveLiveStemSavr', // 112\n  'FuelCatalog.behaveDeadHeat', // 113\n  'FuelCatalog.behaveLiveHeat', // 114\n  'BehaveFuel.deadHerbLoad', // 115\n  'BehaveFuel.liveHerbLoad', // 116\n  'FuelCatalog.chaparralFuelType', // 117\n  'FuelCatalog.chaparralDeadFraction', // 118\n  'FuelCatalog.chaparralDepth', // 119\n  'FuelCatalog.chaparralTotalLoad', // 120\n  'ChaparralFuel.age', // 121\n  'ChaparralFuel.deadFractionAverageMortality', // 122\n  'ChaparralFuel.deadFractionSevereMortality', // 123\n  'ChaparralFuel.fuelDepth', // 124\n  'ChaparralFuel.totalLoad', // 125\n  'ChaparralFuel.deadLoad', // 126\n  'ChaparralFuel.deadClass1Load', // 127\n  'ChaparralFuel.deadClass2Load', // 128\n  'ChaparralFuel.deadClass3Load', // 129\n  'ChaparralFuel.deadClass4Load', // 130\n  'ChaparralFuel.liveLoad', // 131\n  'ChaparralFuel.liveClass1Load', // 132\n  'ChaparralFuel.liveClass2Load', // 133\n  'ChaparralFuel.liveClass3Load', // 134\n  'ChaparralFuel.liveClass4Load', // 135\n  'ChaparralFuel.liveClass5Load', // 136\n  'FuelCatalog.palmettoGallberryAge', // 137\n  'FuelCatalog.palmettoGallberryBasalArea', // 138\n  'FuelCatalog.palmettoGallberryCover', // 139\n  'FuelCatalog.palmettoGallberryHeight', // 140\n  'PalmettoGallberryFuel.fuelDepth', // 141\n  'PalmettoGallberryFuel.deadFineLoad', // 142\n  'PalmettoGallberryFuel.deadSmallLoad', // 143\n  'PalmettoGallberryFuel.deadFoliageLoad', // 144\n  'PalmettoGallberryFuel.deadLitterLoad', // 145\n  'PalmettoGallberryFuel.liveFineLoad', // 146\n  'PalmettoGallberryFuel.liveSmallLoad', // 147\n  'PalmettoGallberryFuel.liveFoliageLoad', // 148\n  'FuelCatalog.westernAspenFuelType', // 149\n  'FuelCatalog.westernAspenCuringLevel', // 150\n  'WesternAspenFuel.depth', // 151\n  'WesternAspenFuel.deadFineLoad', // 152\n  'WesternAspenFuel.deadSmallLoad', // 153\n  'WesternAspenFuel.deadFineSavr', // 154\n  'WesternAspenFuel.liveHerbLoad', // 155\n  'WesternAspenFuel.liveStemLoad', // 156\n  'WesternAspenFuel.liveStemSavr', // 157\n  'Math.max', // 158\n  'Calc.or', // 159\n  'SurfaceFire.arithmeticMeanSpreadRate', // 160\n  'SurfaceFire.expectedValueSpreadRateMOCK', // 161\n  'SurfaceFire.harmonicMeanSpreadRate', // 162\n  'FireEllipse.eccentricity', // 163\n  'FireEllipse.majorSpreadRate', // 164\n  'FireEllipse.minorSpreadRate', // 165\n  'FireEllipse.fSpreadRate', // 166\n  'FireEllipse.gSpreadRate', // 167\n  'FireEllipse.hSpreadRate', // 168\n  'FireEllipse.area', // 169\n  'FireEllipse.spreadDistance', // 170\n  'FireEllipse.perimeter', // 171\n  'FireEllipse.mapArea', // 172\n  'FireEllipse.fliAtAzimuth', // 173\n  'FireEllipse.backingSpreadRate', // 174\n  'TreeMortality.mortalityRate', // 175\n  'FireEllipse.flankingSpreadRate', // 176\n  'FireEllipse.psiSpreadRate', // 177\n  'FireEllipse.betaSpreadRate', // 178\n  'FireEllipse.thetaFromBeta', // 179\n  'FireEllipse.psiFromTheta', // 180\n  'Spotting.criticalCoverHeight', // 181\n  'Spotting.burningPileFirebrandHeight', // 182\n  'Spotting.distanceFlatTerrain', // 183\n  'Spotting.distanceFlatTerrainWithDrift', // 184\n  'Spotting.distanceMountainTerrain', // 185\n  'CrownSpotting.zdrop', // 186\n  'CrownSpotting.xdrift', // 187\n  'CrownSpotting.xdrop', // 188\n  'CrownSpotting.xspot', // 189\n  'CrownSpotting.firelineIntensityThomas', // 190\n  'CrownSpotting.flatDistance', // 191\n  'Spotting.surfaceFireFirebrandHeight', // 192\n  'Spotting.surfaceFireFirebrandDrift', // 193\n  'Spotting.torchingTreesFirebrandHeight', // 194\n  'Spotting.torchingTreesSteadyFlameHeight', // 195\n  'Spotting.torchingTreesSteadyFlameDuration', // 196\n  'TreeMortality.crownLengthScorched', // 197\n  'TreeMortality.crownVolumeScorched', // 198\n  'CrownFire.area', // 199\n  'CrownFire.perimeter', // 200\n  'CrownFire.lengthToWidthRatio', // 201\n  'CrownFire.rActive', // 202\n  'CrownFire.fliActive', // 203\n  'CrownFire.flameLengthThomas', // 204\n  'CrownFire.hpuaActive', // 205\n  'CrownFire.powerOfTheFire', // 206\n  'CrownFire.powerOfTheWind', // 207\n  'CrownFire.isPlumeDominated', // 208\n  'CrownFire.isWindDriven', // 209\n  'CrownFire.rSa', // 210\n  'CrownFire.crownFractionBurned', // 211\n  'CrownFire.rFinal', // 212\n  'CrownFire.fliFinal', // 213\n  'CrownFire.fliInit', // 214\n  'CrownFire.rInit', // 215\n  'CrownFire.rPrimeActive', // 216\n  'CrownFire.transitionRatio', // 217\n  'CrownFire.canTransition', // 218\n  'CrownFire.activeRatio', // 219\n  'CrownFire.type', // 220\n  'CrownFire.isActive', // 221\n  'CrownFire.isCrown', // 222\n  'CrownFire.isPassive', // 223\n  'CrownFire.isConditional', // 224\n  'CrownFire.isSurface', // 225\n  'CrownFire.oActive', // 226\n  'CrownFire.crowningIndex' // 227\n  ],\n  // Array of Genes where each Gene is:\n  // [<geneIdx>, <geneKey>, <variantIdx>, [<valueUpdaters>]], where each valueUpdater is:\n  // [[<configIdx>, <configValue>], [methodIdx, ...<methodArgs>]], and where each methodArg is:\n  // [<0|1>, <geneIdx|literalIdx>]\n  genesArray: [[0, `module.surfaceFire`, 0, [[[], [0]]]], [1, `module.surfaceSpot`, 0, [[[], [0]]]], [2, `module.crownFire`, 0, [[[], [0]]]], [3, `module.crownSpot`, 0, [[[], [0]]]], [4, `module.fireEllipse`, 0, [[[], [0]]]], [5, `module.fireContain`, 0, [[[], [0]]]], [6, `module.${sh}`, 0, [[[], [0]]]], [7, `module.treeMortality`, 0, [[[], [0]]]], [8, `module.spotting`, 0, [[[], [0]]]], [9, `module.ignitionProbability`, 0, [[[], [0]]]], [10, `link.crownFire`, 4, [[[], [1]]]], [11, `link.crownSpot`, 1, [[[], [1]]]], [12, `link.fireContain`, 2, [[[], [1]]]], [13, `link.fireEllipse`, 4, [[[], [1]]]], [14, `link.${sh}`, 4, [[[], [1]]]], [15, `link.surfaceSpot`, 4, [[[], [1]]]], [16, `link.treeMortality`, 3, [[[], [1]]]], [17, `configure.fuel.primary`, 7, [[[], [1]]]], [18, `configure.fuel.secondary`, 8, [[[], [1]]]], [19, `configure.fuel.moisture`, 9, [[[], [1]]]], [20, `configure.fuel.${waf}`, 10, [[[], [1]]]], [21, `configure.fuel.curedHerbFraction`, 6, [[[], [1]]]], [22, `configure.fuel.chaparralTotalLoad`, 5, [[[], [1]]]], [23, `configure.slope.steepness`, 11, [[[], [1]]]], [24, `configure.temperature.humidity`, 12, [[[], [1]]]], [25, `configure.wind.direction`, 13, [[[], [1]]]], [26, `configure.wind.speed`, 14, [[[], [1]]]], [27, `configure.fire.${fli}`, 15, [[[], [1]]]], [28, `configure.fire.${lwr}`, 16, [[[], [1]]]], [29, `configure.fire.${ews}Limit`, 17, [[[], [1]]]], [30, `configure.fire.weightingMethod`, 18, [[[], [1]]]], [31, `configure.fire.vector`, 19, [[[], [1]]]], [32, `docs.run.mainTitle`, 51, [[[], [2]]]], [33, `docs.run.subTitle`, 51, [[[], [2]]]], [34, `docs.run.description`, 51, [[[], [2]]]], [35, `docs.run.userName`, 51, [[[], [2]]]], [36, `ignition.firebrand.probability`, 103, [[[], [3, [0, 125], [0, 111]]]]], [37, `ignition.lightningStrike.charge`, 26, [[[], [2]]]], [38, `ignition.lightningStrike.fuel.depth`, 102, [[[], [2]]]], [39, `ignition.lightningStrike.fuel.type`, 25, [[[], [2]]]], [40, `ignition.lightningStrike.probability`, 103, [[[], [4, [0, 39], [0, 38], [0, 113], [0, 37]]]]], [41, `site.canopy.cover`, 78, [[[], [2]]]], [42, `site.canopy.crown.baseHeight`, 124, [[[], [2]]]], [43, `site.canopy.crown.fill`, 41, [[[], [5, [0, 41], [0, 45]]]]], [44, `site.canopy.crown.length`, 124, [[[], [6, [0, 42], [0, 46]]]]], [45, `site.canopy.crown.ratio`, 44, [[[], [7, [0, 44], [0, 46]]]]], [46, `site.canopy.crown.totalHeight`, 124, [[[], [2]]]], [47, `site.canopy.fire.${hpua}`, 60, [[[], [8, [0, 52], [0, 50]]]]], [48, `site.canopy.fuel.bulkDensity`, 74, [[[], [2]]]], [49, `site.canopy.fuel.foliar.${mois}`, 88, [[[], [2]]]], [50, `site.canopy.fuel.${heat}`, 84, [[[], [9, [1, 0]]]]], [51, `site.canopy.fuel.isSheltered`, 36, [[[], [10, [0, 41], [0, 46], [0, 43]]]]], [52, `site.canopy.fuel.${load}`, 91, [[[], [11, [0, 48], [0, 44]]]]], [53, `site.canopy.fuel.shading`, 78, [[[], [2]]]], [54, `site.canopy.sheltered.${waf}`, 127, [[[], [12, [0, 41], [0, 46], [0, 43]]]]], [55, `site.canopy.downwind.height`, 124, [[[], [2]]]], [56, `site.canopy.downwind.isOpen`, 33, [[[], [2]]]], [57, `site.canopy.downwind.appliedHeight`, 124, [[[], [13, [0, 55], [0, 56]]]]], [58, `site.canopy.tree.barkThickness`, 121, [[[], [14, [0, 60], [0, 59]]]]], [59, `site.canopy.tree.dbh`, 123, [[[], [2]]]], [60, `site.canopy.tree.species.fofem6.code`, 30, [[[], [2]]]], [61, `site.date.dayOfMonth`, 46, [[[], [2]]]], [62, `site.date.dayOfYear`, 47, [[[], [2]]]], [63, `site.date.julian`, 48, [[[], [2]]]], [64, `site.date.month`, 49, [[[], [2]]]], [65, `site.date.year`, 50, [[[], [2]]]], [66, `site.time.hour`, 117, [[[], [2]]]], [67, `site.time.minute`, 118, [[[], [2]]]], [68, `site.time.second`, 119, [[[], [2]]]], [69, `site.time.sunrise`, 120, [[[], [2]]]], [70, `site.time.sunset`, 120, [[[], [2]]]], [71, `site.doc.date`, 51, [[[], [2]]]], [72, `site.doc.id`, 51, [[[], [2]]]], [73, `site.doc.location`, 51, [[[], [2]]]], [74, `site.doc.station`, 51, [[[], [2]]]], [75, `site.doc.time`, 51, [[[], [2]]]], [76, `site.fire.observed.${ews}`, 126, [[[28, 1], [15, [0, 82]]], [[], [2]]]], [77, `site.fire.observed.${fli}`, 57, [[[27, 2], [16, [0, 78]]], [[], [2]]]], [78, `site.fire.observed.${fl}`, 59, [[[27, 3], [17, [0, 77]]], [[], [2]]]], [79, `site.fire.observed.heading.fromUpslope`, 40, [[[25, 4], [2]], [[25, 5], [2]], [[], [18, [0, 80], [0, 119]]]]], [80, `site.fire.observed.heading.fromNorth`, 40, [[[25, 6], [2]], [[], [19, [0, 119], [0, 79]]]]], [81, `site.fire.observed.${hpua}`, 60, [[[], [2]]]], [82, `site.fire.observed.${lwr}`, 61, [[[28, 7], [20, [0, 76]]], [[], [2]]]], [83, `site.fire.observed.${ros}`, 71, [[[], [2]]]], [84, `site.fire.observed.${sh}`, 68, [[[], [2]]]], [85, `site.fire.crown.${fl}`, 59, [[[], [2]]]], [86, `site.fire.time.sinceIgnition`, 56, [[[], [2]]]], [87, `site.fire.vector.fromHead`, 40, [[[], [2]]]], [88, `site.fire.vector.fromNorth`, 40, [[[], [2]]]], [89, `site.fire.vector.fromUpslope`, 40, [[[], [2]]]], [90, `site.location.elevation`, 52, [[[], [2]]]], [91, `site.location.elevation.diff`, 53, [[[], [2]]]], [92, `site.location.gmtDiff`, 101, [[[], [2]]]], [93, `site.location.latitude.degrees`, 104, [[[], [2]]]], [94, `site.location.latitude.ns`, 27, [[[], [2]]]], [95, `site.location.longitude.degrees`, 105, [[[], [2]]]], [96, `site.location.longitude.ew`, 22, [[[], [2]]]], [97, `site.map.scale`, 110, [[[], [2]]]], [98, `site.map.contours`, 107, [[[], [2]]]], [99, `site.map.distance`, 70, [[[], [2]]]], [100, `site.map.factor`, 109, [[[], [21, [1, 8], [0, 97]]]]], [101, `site.map.interval`, 70, [[[], [2]]]], [102, `site.map.reach`, 70, [[[], [22, [0, 97], [0, 99]]]]], [103, `site.map.rise`, 70, [[[], [22, [0, 101], [0, 98]]]]], [104, `site.map.slope.ratio`, 115, [[[], [23, [0, 97], [0, 101], [0, 98], [0, 99]]]]], [105, `site.map.slope.degrees`, 114, [[[], [24, [0, 97], [0, 101], [0, 98], [0, 99]]]]], [106, `site.moisture.dead.fosberg.reference`, 88, [[[], [25, [0, 122], [0, 126]]]]], [107, `site.moisture.dead.fosberg.correction`, 88, [[[], [26, [0, 64], [0, 127], [0, 118], [0, 121], [0, 66], [0, 91]]]]], [108, `site.moisture.dead.fosberg.tl1h`, 88, [[[], [27, [0, 106], [0, 107]]]]], [109, `site.moisture.dead.fosberg.tl10h`, 88, [[[], [28, [0, 108]]]]], [110, `site.moisture.dead.fosberg.tl100h`, 88, [[[], [29, [0, 108]]]]], [111, `site.moisture.dead.tl1h`, 88, [[[19, 9], [30, [0, 114]]], [[19, 10], [30, [0, 108]]], [[], [2]]]], [112, `site.moisture.dead.tl10h`, 88, [[[19, 9], [30, [0, 114]]], [[19, 10], [30, [0, 109]]], [[], [2]]]], [113, `site.moisture.dead.tl100h`, 88, [[[19, 9], [30, [0, 114]]], [[19, 10], [30, [0, 110]]], [[], [2]]]], [114, `site.moisture.dead.category`, 88, [[[], [2]]]], [115, `site.moisture.live.herb`, 88, [[[19, 9], [30, [0, 117]]], [[19, 11], [30, [0, 117]]], [[], [2]]]], [116, `site.moisture.live.stem`, 88, [[[19, 9], [30, [0, 117]]], [[19, 11], [30, [0, 117]]], [[], [2]]]], [117, `site.moisture.live.category`, 88, [[[], [2]]]], [118, `site.slope.direction.aspect`, 40, [[[], [2]]]], [119, `site.slope.direction.upslope`, 40, [[[], [31, [0, 118]]]]], [120, `site.slope.steepness.degrees`, 114, [[[23, 12], [2]], [[23, 13], [30, [0, 105]]], [[], [32, [0, 121]]]]], [121, `site.slope.steepness.ratio`, 115, [[[23, 12], [33, [0, 120]]], [[23, 13], [30, [0, 104]]], [[], [2]]]], [122, `site.temperature.air`, 39, [[[], [2]]]], [123, `site.temperature.dewPoint`, 39, [[[24, 14], [34, [0, 124], [0, 126]]], [[24, 15], [35, [0, 124], [0, 128], [0, 90]]], [[], [2]]]], [124, `site.temperature.dryBulb`, 39, [[[], [30, [0, 122]]]]], [125, `site.temperature.fuel`, 39, [[[], [36, [0, 122], [0, 53]]]]], [126, `site.temperature.relativeHumidity`, 112, [[[24, 14], [2]], [[], [37, [0, 124], [0, 123]]]]], [127, `site.temperature.shading`, 113, [[[], [2]]]], [128, `site.temperature.wetBulb`, 39, [[[], [2]]]], [129, `site.temperature.wetBulbDepression`, 39, [[[], [38, [0, 124], [0, 128]]]]], [130, `site.wind.direction.heading.fromUpslope`, 40, [[[25, 4], [2]], [[25, 6], [18, [0, 133], [0, 119]]], [[25, 5], [9, [1, 16]]], [[], [9, [1, 16]]]]], [131, `site.wind.direction.source.fromUpslope`, 40, [[[], [31, [0, 130]]]]], [132, `site.wind.direction.source.fromNorth`, 40, [[[25, 4], [31, [0, 133]]], [[25, 6], [2]], [[25, 5], [31, [0, 119]]], [[], [31, [0, 119]]]]], [133, `site.wind.direction.heading.fromNorth`, 40, [[[25, 4], [19, [0, 130], [0, 119]]], [[25, 6], [31, [0, 132]]], [[25, 5], [30, [0, 119]]], [[], [30, [0, 119]]]]], [134, `site.wind.speed.at10m`, 126, [[[26, 17], [2]], [[], [39, [0, 135]]]]], [135, `site.wind.speed.at20ft`, 126, [[[26, 18], [2]], [[26, 17], [40, [0, 134]]], [[], [41, [0, 136], [0, 137]]]]], [136, `site.wind.speed.atMidflame`, 126, [[[26, 19], [2]], [[], [42, [0, 135], [0, 137]]]]], [137, `site.${waf}`, 127, [[[], [2]]]], [138, `${spfbdp}1.${dens}`, 92, [[[], [43, [0, 409], [1, 20], [1, 21], [1, 22], [1, 20]]]]], [139, `${spfbdp}1.${heat}`, 84, [[[], [43, [0, 409], [0, 423], [1, 0], [1, 23], [1, 0]]]]], [140, `${spfbdp}1.${load}`, 91, [[[], [43, [0, 409], [0, 416], [0, 439], [0, 455], [0, 466]]]]], [141, `${spfbdp}1.${mois}`, 88, [[[], [43, [0, 409], [0, 111], [0, 111], [0, 111], [0, 111]]]]], [142, `${spfbdp}1.${savr}`, 95, [[[], [43, [0, 409], [0, 420], [1, 24], [1, 25], [0, 468]]]]], [143, `${spfbdp}1.${emc}`, 83, [[[], [43, [0, 409], [1, 26], [1, 27], [1, 26], [1, 26]]]]], [144, `${spfbdp}1.${tmc}`, 99, [[[], [43, [0, 409], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [145, `${spfbdp}1.${ef}.${ehn}`, 82, [[[], [44, [0, 142]]]]], [146, `${spfbdp}1.${ef}.${load}`, 91, [[[], [45, [0, 142], [0, 140], [1, 31]]]]], [147, `${spfbdp}1.${qig}`, 85, [[[], [46, [0, 141], [0, 145]]]]], [148, `${spfbdp}1.net.${load}`, 91, [[[], [47, [0, 140], [0, 144]]]]], [149, `${spfbdp}1.${sc}`, 93, [[[], [48, [0, 142]]]]], [150, `${spfbdp}1.${sc}.${wf}`, 125, [[[], [49, [0, 149], [0, 319]]]]], [151, `${spfbdp}1.${sa}`, 94, [[[], [50, [0, 140], [0, 142], [0, 138]]]]], [152, `${spfbdp}1.${sa}.${wf}`, 125, [[[], [51, [0, 151], [0, 303]]]]], [153, `${spfbdp}1.volume`, 100, [[[], [52, [0, 140], [0, 138]]]]], [154, `${spfbdp}1.${ef}.waterLoad`, 91, [[[], [53, [0, 146], [0, 141]]]]], [155, `${spfbdp}2.${dens}`, 92, [[[], [43, [0, 409], [1, 20], [1, 21], [1, 22], [1, 20]]]]], [156, `${spfbdp}2.${heat}`, 84, [[[], [43, [0, 409], [0, 423], [1, 0], [1, 23], [1, 0]]]]], [157, `${spfbdp}2.${load}`, 91, [[[], [43, [0, 409], [0, 417], [0, 440], [0, 456], [0, 467]]]]], [158, `${spfbdp}2.${mois}`, 88, [[[], [43, [0, 409], [0, 112], [0, 112], [0, 112], [0, 112]]]]], [159, `${spfbdp}2.${savr}`, 95, [[[], [43, [0, 409], [1, 32], [1, 33], [1, 34], [1, 32]]]]], [160, `${spfbdp}2.${emc}`, 83, [[[], [43, [0, 409], [1, 26], [1, 27], [1, 26], [1, 26]]]]], [161, `${spfbdp}2.${tmc}`, 99, [[[], [43, [0, 409], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [162, `${spfbdp}2.${ef}.${ehn}`, 82, [[[], [44, [0, 159]]]]], [163, `${spfbdp}2.${ef}.${load}`, 91, [[[], [45, [0, 159], [0, 157], [1, 31]]]]], [164, `${spfbdp}2.${qig}`, 85, [[[], [46, [0, 158], [0, 162]]]]], [165, `${spfbdp}2.net.${load}`, 91, [[[], [47, [0, 157], [0, 161]]]]], [166, `${spfbdp}2.${sc}`, 93, [[[], [48, [0, 159]]]]], [167, `${spfbdp}2.${sc}.${wf}`, 125, [[[], [49, [0, 166], [0, 319]]]]], [168, `${spfbdp}2.${sa}`, 94, [[[], [50, [0, 157], [0, 159], [0, 155]]]]], [169, `${spfbdp}2.${sa}.${wf}`, 125, [[[], [51, [0, 168], [0, 303]]]]], [170, `${spfbdp}2.volume`, 100, [[[], [52, [0, 157], [0, 155]]]]], [171, `${spfbdp}2.${ef}.waterLoad`, 91, [[[], [53, [0, 163], [0, 158]]]]], [172, `${spfbdp}3.${dens}`, 92, [[[], [43, [0, 409], [1, 20], [1, 21], [1, 22], [1, 20]]]]], [173, `${spfbdp}3.${heat}`, 84, [[[], [43, [0, 409], [0, 423], [1, 0], [1, 23], [1, 0]]]]], [174, `${spfbdp}3.${load}`, 91, [[[], [43, [0, 409], [0, 418], [0, 441], [0, 457], [1, 16]]]]], [175, `${spfbdp}3.${mois}`, 88, [[[], [43, [0, 409], [0, 113], [0, 112], [0, 111], [1, 35]]]]], [176, `${spfbdp}3.${savr}`, 95, [[[], [43, [0, 409], [1, 22], [1, 36], [1, 37], [1, 8]]]]], [177, `${spfbdp}3.${emc}`, 83, [[[], [43, [0, 409], [1, 26], [1, 27], [1, 26], [1, 26]]]]], [178, `${spfbdp}3.${tmc}`, 99, [[[], [43, [0, 409], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [179, `${spfbdp}3.${ef}.${ehn}`, 82, [[[], [44, [0, 176]]]]], [180, `${spfbdp}3.${ef}.${load}`, 91, [[[], [45, [0, 176], [0, 174], [1, 31]]]]], [181, `${spfbdp}3.${qig}`, 85, [[[], [46, [0, 175], [0, 179]]]]], [182, `${spfbdp}3.net.${load}`, 91, [[[], [47, [0, 174], [0, 178]]]]], [183, `${spfbdp}3.${sc}`, 93, [[[], [48, [0, 176]]]]], [184, `${spfbdp}3.${sc}.${wf}`, 125, [[[], [49, [0, 183], [0, 319]]]]], [185, `${spfbdp}3.${sa}`, 94, [[[], [50, [0, 174], [0, 176], [0, 172]]]]], [186, `${spfbdp}3.${sa}.${wf}`, 125, [[[], [51, [0, 185], [0, 303]]]]], [187, `${spfbdp}3.volume`, 100, [[[], [52, [0, 174], [0, 172]]]]], [188, `${spfbdp}3.${ef}.waterLoad`, 91, [[[], [53, [0, 180], [0, 175]]]]], [189, `${spfbdp}4.${dens}`, 92, [[[], [43, [0, 409], [1, 20], [1, 21], [1, 22], [1, 20]]]]], [190, `${spfbdp}4.${heat}`, 84, [[[], [43, [0, 409], [0, 423], [1, 0], [1, 23], [1, 0]]]]], [191, `${spfbdp}4.${load}`, 91, [[[], [43, [0, 409], [0, 425], [0, 442], [0, 458], [1, 16]]]]], [192, `${spfbdp}4.${mois}`, 88, [[[], [43, [0, 409], [0, 111], [0, 113], [0, 113], [1, 35]]]]], [193, `${spfbdp}4.${savr}`, 95, [[[], [43, [0, 409], [0, 421], [1, 38], [1, 37], [1, 8]]]]], [194, `${spfbdp}4.${emc}`, 83, [[[], [43, [0, 409], [1, 26], [1, 27], [1, 26], [1, 26]]]]], [195, `${spfbdp}4.${tmc}`, 99, [[[], [43, [0, 409], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [196, `${spfbdp}4.${ef}.${ehn}`, 82, [[[], [44, [0, 193]]]]], [197, `${spfbdp}4.${ef}.${load}`, 91, [[[], [45, [0, 193], [0, 191], [1, 31]]]]], [198, `${spfbdp}4.${qig}`, 85, [[[], [46, [0, 192], [0, 196]]]]], [199, `${spfbdp}4.net.${load}`, 91, [[[], [47, [0, 191], [0, 195]]]]], [200, `${spfbdp}4.${sc}`, 93, [[[], [48, [0, 193]]]]], [201, `${spfbdp}4.${sc}.${wf}`, 125, [[[], [49, [0, 200], [0, 319]]]]], [202, `${spfbdp}4.${sa}`, 94, [[[], [50, [0, 191], [0, 193], [0, 189]]]]], [203, `${spfbdp}4.${sa}.${wf}`, 125, [[[], [51, [0, 202], [0, 303]]]]], [204, `${spfbdp}4.volume`, 100, [[[], [52, [0, 191], [0, 189]]]]], [205, `${spfbdp}4.${ef}.waterLoad`, 91, [[[], [53, [0, 197], [0, 192]]]]], [206, `${spfbdp}5.${dens}`, 92, [[[], [9, [1, 20]]]]], [207, `${spfbdp}5.${heat}`, 84, [[[], [9, [1, 0]]]]], [208, `${spfbdp}5.${load}`, 91, [[[], [9, [1, 16]]]]], [209, `${spfbdp}5.${mois}`, 88, [[[], [9, [1, 35]]]]], [210, `${spfbdp}5.${savr}`, 95, [[[], [9, [1, 8]]]]], [211, `${spfbdp}5.${emc}`, 83, [[[], [9, [1, 26]]]]], [212, `${spfbdp}5.${tmc}`, 99, [[[], [9, [1, 28]]]]], [213, `${spfbdp}5.${ef}.${ehn}`, 82, [[[], [44, [0, 210]]]]], [214, `${spfbdp}5.${ef}.${load}`, 91, [[[], [45, [0, 210], [0, 208], [1, 31]]]]], [215, `${spfbdp}5.${qig}`, 85, [[[], [46, [0, 209], [0, 213]]]]], [216, `${spfbdp}5.net.${load}`, 91, [[[], [47, [0, 208], [0, 212]]]]], [217, `${spfbdp}5.${sc}`, 93, [[[], [48, [0, 210]]]]], [218, `${spfbdp}5.${sc}.${wf}`, 125, [[[], [49, [0, 217], [0, 319]]]]], [219, `${spfbdp}5.${sa}`, 94, [[[], [50, [0, 208], [0, 210], [0, 206]]]]], [220, `${spfbdp}5.${sa}.${wf}`, 125, [[[], [51, [0, 219], [0, 303]]]]], [221, `${spfbdp}5.volume`, 100, [[[], [52, [0, 208], [0, 206]]]]], [222, `${spfbdp}5.${ef}.waterLoad`, 91, [[[], [53, [0, 214], [0, 209]]]]], [223, `${spfblp}1.${dens}`, 92, [[[], [43, [0, 409], [1, 20], [1, 21], [1, 21], [1, 20]]]]], [224, `${spfblp}1.${heat}`, 84, [[[], [43, [0, 409], [0, 424], [1, 39], [1, 23], [1, 0]]]]], [225, `${spfblp}1.${load}`, 91, [[[], [43, [0, 409], [0, 426], [0, 444], [0, 459], [0, 469]]]]], [226, `${spfblp}1.${mois}`, 88, [[[], [43, [0, 409], [0, 115], [0, 116], [0, 116], [0, 115]]]]], [227, `${spfblp}1.${savr}`, 95, [[[], [43, [0, 409], [0, 421], [1, 24], [1, 25], [1, 40]]]]], [228, `${spfblp}1.${emc}`, 83, [[[], [43, [0, 409], [1, 26], [1, 27], [1, 27], [1, 26]]]]], [229, `${spfblp}1.${tmc}`, 99, [[[], [43, [0, 409], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [230, `${spfblp}1.${ef}.${ehn}`, 82, [[[], [44, [0, 227]]]]], [231, `${spfblp}1.${ef}.${load}`, 91, [[[], [45, [0, 227], [0, 225], [1, 41]]]]], [232, `${spfblp}1.${qig}`, 85, [[[], [46, [0, 226], [0, 230]]]]], [233, `${spfblp}1.net.${load}`, 91, [[[], [47, [0, 225], [0, 229]]]]], [234, `${spfblp}1.${sc}`, 93, [[[], [48, [0, 227]]]]], [235, `${spfblp}1.${sc}.${wf}`, 125, [[[], [49, [0, 234], [0, 339]]]]], [236, `${spfblp}1.${sa}`, 94, [[[], [50, [0, 225], [0, 227], [0, 223]]]]], [237, `${spfblp}1.${sa}.${wf}`, 125, [[[], [51, [0, 236], [0, 323]]]]], [238, `${spfblp}1.volume`, 100, [[[], [52, [0, 225], [0, 223]]]]], [239, `${spfblp}2.${dens}`, 92, [[[], [43, [0, 409], [1, 20], [1, 21], [1, 21], [1, 20]]]]], [240, `${spfblp}2.${heat}`, 84, [[[], [43, [0, 409], [0, 424], [1, 42], [1, 23], [1, 0]]]]], [241, `${spfblp}2.${load}`, 91, [[[], [43, [0, 409], [0, 419], [0, 445], [0, 460], [0, 470]]]]], [242, `${spfblp}2.${mois}`, 88, [[[], [43, [0, 409], [0, 116], [0, 116], [0, 116], [0, 116]]]]], [243, `${spfblp}2.${savr}`, 95, [[[], [43, [0, 409], [0, 422], [1, 33], [1, 34], [0, 471]]]]], [244, `${spfblp}2.${emc}`, 83, [[[], [43, [0, 409], [1, 26], [1, 27], [1, 27], [1, 26]]]]], [245, `${spfblp}2.${tmc}`, 99, [[[], [43, [0, 409], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [246, `${spfblp}2.${ef}.${ehn}`, 82, [[[], [44, [0, 243]]]]], [247, `${spfblp}2.${ef}.${load}`, 91, [[[], [45, [0, 243], [0, 241], [1, 41]]]]], [248, `${spfblp}2.${qig}`, 85, [[[], [46, [0, 242], [0, 246]]]]], [249, `${spfblp}2.net.${load}`, 91, [[[], [47, [0, 241], [0, 245]]]]], [250, `${spfblp}2.${sc}`, 93, [[[], [48, [0, 243]]]]], [251, `${spfblp}2.${sc}.${wf}`, 125, [[[], [49, [0, 250], [0, 339]]]]], [252, `${spfblp}2.${sa}`, 94, [[[], [50, [0, 241], [0, 243], [0, 239]]]]], [253, `${spfblp}2.${sa}.${wf}`, 125, [[[], [51, [0, 252], [0, 323]]]]], [254, `${spfblp}2.volume`, 100, [[[], [52, [0, 241], [0, 239]]]]], [255, `${spfblp}3.${dens}`, 92, [[[], [43, [0, 409], [1, 20], [1, 21], [1, 21], [1, 20]]]]], [256, `${spfblp}3.${heat}`, 84, [[[], [43, [0, 409], [0, 424], [1, 42], [1, 23], [1, 0]]]]], [257, `${spfblp}3.${load}`, 91, [[[], [43, [0, 409], [1, 16], [0, 446], [0, 461], [1, 16]]]]], [258, `${spfblp}3.${mois}`, 88, [[[], [43, [0, 409], [1, 35], [0, 116], [0, 116], [1, 35]]]]], [259, `${spfblp}3.${savr}`, 95, [[[], [43, [0, 409], [1, 8], [1, 36], [1, 37], [1, 8]]]]], [260, `${spfblp}3.${emc}`, 83, [[[], [43, [0, 409], [1, 26], [1, 27], [1, 27], [1, 26]]]]], [261, `${spfblp}3.${tmc}`, 99, [[[], [43, [0, 409], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [262, `${spfblp}3.${ef}.${ehn}`, 82, [[[], [44, [0, 259]]]]], [263, `${spfblp}3.${ef}.${load}`, 91, [[[], [45, [0, 259], [0, 257], [1, 41]]]]], [264, `${spfblp}3.${qig}`, 85, [[[], [46, [0, 258], [0, 262]]]]], [265, `${spfblp}3.net.${load}`, 91, [[[], [47, [0, 257], [0, 261]]]]], [266, `${spfblp}3.${sc}`, 93, [[[], [48, [0, 259]]]]], [267, `${spfblp}3.${sc}.${wf}`, 125, [[[], [49, [0, 266], [0, 339]]]]], [268, `${spfblp}3.${sa}`, 94, [[[], [50, [0, 257], [0, 259], [0, 255]]]]], [269, `${spfblp}3.${sa}.${wf}`, 125, [[[], [51, [0, 268], [0, 323]]]]], [270, `${spfblp}3.volume`, 100, [[[], [52, [0, 257], [0, 255]]]]], [271, `${spfblp}4.${dens}`, 92, [[[], [43, [0, 409], [1, 20], [1, 21], [1, 21], [1, 20]]]]], [272, `${spfblp}4.${heat}`, 84, [[[], [43, [0, 409], [0, 424], [1, 42], [1, 23], [1, 0]]]]], [273, `${spfblp}4.${load}`, 91, [[[], [43, [0, 409], [1, 16], [0, 447], [1, 16], [1, 16]]]]], [274, `${spfblp}4.${mois}`, 88, [[[], [43, [0, 409], [1, 35], [0, 116], [1, 35], [1, 35]]]]], [275, `${spfblp}4.${savr}`, 95, [[[], [43, [0, 409], [1, 8], [1, 38], [1, 8], [1, 8]]]]], [276, `${spfblp}4.${emc}`, 83, [[[], [43, [0, 409], [1, 26], [1, 27], [1, 27], [1, 26]]]]], [277, `${spfblp}4.${tmc}`, 99, [[[], [43, [0, 409], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [278, `${spfblp}4.${ef}.${ehn}`, 82, [[[], [44, [0, 275]]]]], [279, `${spfblp}4.${ef}.${load}`, 91, [[[], [45, [0, 275], [0, 273], [1, 41]]]]], [280, `${spfblp}4.${qig}`, 85, [[[], [46, [0, 274], [0, 278]]]]], [281, `${spfblp}4.net.${load}`, 91, [[[], [47, [0, 273], [0, 277]]]]], [282, `${spfblp}4.${sc}`, 93, [[[], [48, [0, 275]]]]], [283, `${spfblp}4.${sc}.${wf}`, 125, [[[], [49, [0, 282], [0, 339]]]]], [284, `${spfblp}4.${sa}`, 94, [[[], [50, [0, 273], [0, 275], [0, 271]]]]], [285, `${spfblp}4.${sa}.${wf}`, 125, [[[], [51, [0, 284], [0, 323]]]]], [286, `${spfblp}4.volume`, 100, [[[], [52, [0, 273], [0, 271]]]]], [287, `${spfblp}5.${dens}`, 92, [[[], [43, [0, 409], [1, 20], [1, 20], [1, 21], [1, 20]]]]], [288, `${spfblp}5.${heat}`, 84, [[[], [43, [0, 409], [0, 424], [1, 39], [1, 23], [1, 0]]]]], [289, `${spfblp}5.${load}`, 91, [[[], [43, [0, 409], [1, 16], [0, 448], [1, 16], [1, 16]]]]], [290, `${spfblp}5.${mois}`, 88, [[[], [43, [0, 409], [1, 35], [0, 115], [1, 35], [1, 35]]]]], [291, `${spfblp}5.${savr}`, 95, [[[], [43, [0, 409], [1, 8], [1, 43], [1, 8], [1, 8]]]]], [292, `${spfblp}5.${emc}`, 83, [[[], [43, [0, 409], [1, 26], [1, 44], [1, 27], [1, 26]]]]], [293, `${spfblp}5.${tmc}`, 99, [[[], [43, [0, 409], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [294, `${spfblp}5.${ef}.${ehn}`, 82, [[[], [44, [0, 291]]]]], [295, `${spfblp}5.${ef}.${load}`, 91, [[[], [45, [0, 291], [0, 289], [1, 41]]]]], [296, `${spfblp}5.${qig}`, 85, [[[], [46, [0, 290], [0, 294]]]]], [297, `${spfblp}5.net.${load}`, 91, [[[], [47, [0, 289], [0, 293]]]]], [298, `${spfblp}5.${sc}`, 93, [[[], [48, [0, 291]]]]], [299, `${spfblp}5.${sc}.${wf}`, 125, [[[], [49, [0, 298], [0, 339]]]]], [300, `${spfblp}5.${sa}`, 94, [[[], [50, [0, 289], [0, 291], [0, 287]]]]], [301, `${spfblp}5.${sa}.${wf}`, 125, [[[], [51, [0, 300], [0, 323]]]]], [302, `${spfblp}5.volume`, 100, [[[], [52, [0, 289], [0, 287]]]]], [303, `${spfbd}.${sa}`, 94, [[[], [54, [0, 151], [0, 168], [0, 185], [0, 202], [0, 219]]]]], [304, `${spfbd}.${sa}.${wf}`, 125, [[[], [21, [0, 303], [0, 358]]]]], [305, `${spfbd}.mineralDamping`, 55, [[[], [55, [0, 318]]]]], [306, `${spfbd}.moistureDamping`, 55, [[[], [56, [0, 312], [0, 310]]]]], [307, `${spfbd}.${heat}`, 84, [[[], [57, [0, 152], [0, 169], [0, 186], [0, 203], [0, 220], [0, 139], [0, 156], [0, 173], [0, 190], [0, 207]]]]], [308, `${spfbd}.${load}`, 91, [[[], [54, [0, 140], [0, 157], [0, 174], [0, 191], [0, 208]]]]], [309, `${spfbd}.${ef}.${load}`, 91, [[[], [54, [0, 146], [0, 163], [0, 180], [0, 197], [0, 214]]]]], [310, `${spfbd}.extinction.${mois}`, 88, [[[], [43, [0, 409], [0, 414], [1, 45], [1, 46], [1, 47]]]]], [311, `${spfbd}.extinction.${mois}Factor`, 37, [[[], [58, [0, 309], [0, 329]]]]], [312, `${spfbd}.${mois}`, 88, [[[], [57, [0, 152], [0, 169], [0, 186], [0, 203], [0, 220], [0, 141], [0, 158], [0, 175], [0, 192], [0, 209]]]]], [313, `${spfbd}.volume`, 75, [[[], [54, [0, 153], [0, 170], [0, 187], [0, 204], [0, 221]]]]], [314, `${spfbd}.${qig}`, 85, [[[], [57, [0, 152], [0, 169], [0, 186], [0, 203], [0, 220], [0, 147], [0, 164], [0, 181], [0, 198], [0, 215]]]]], [315, `${spfbd}.${rxi}`, 65, [[[], [22, [0, 316], [0, 306]]]]], [316, `${spfbd}.${rxi}Dry`, 65, [[[], [59, [0, 355], [0, 320], [0, 307], [0, 305]]]]], [317, `${spfbd}.${savr}`, 95, [[[], [57, [0, 152], [0, 169], [0, 186], [0, 203], [0, 220], [0, 142], [0, 159], [0, 176], [0, 193], [0, 210]]]]], [318, `${spfbd}.${emc}`, 83, [[[], [57, [0, 152], [0, 169], [0, 186], [0, 203], [0, 220], [0, 143], [0, 160], [0, 177], [0, 194], [0, 211]]]]], [319, `${spfbd}.${sc}.${wf}`, 125, [[[], [60, [0, 151], [0, 149], [0, 168], [0, 166], [0, 185], [0, 183], [0, 202], [0, 200], [0, 219], [0, 217]]]]], [320, `${spfbd}.net.${load}`, 91, [[[], [57, [0, 150], [0, 167], [0, 184], [0, 201], [0, 218], [0, 148], [0, 165], [0, 182], [0, 199], [0, 216]]]]], [321, `${spfbd}.${ef}.waterLoad`, 91, [[[], [54, [0, 154], [0, 171], [0, 188], [0, 205], [0, 222]]]]], [322, `${spfbd}.${ef}.${mois}`, 88, [[[], [21, [0, 321], [0, 309]]]]], [323, `${spfbl}.${sa}`, 94, [[[], [54, [0, 236], [0, 252], [0, 268], [0, 284], [0, 300]]]]], [324, `${spfbl}.${sa}.${wf}`, 125, [[[], [21, [0, 323], [0, 358]]]]], [325, `${spfbl}.mineralDamping`, 55, [[[], [55, [0, 338]]]]], [326, `${spfbl}.moistureDamping`, 55, [[[], [56, [0, 332], [0, 330]]]]], [327, `${spfbl}.${heat}`, 84, [[[], [57, [0, 237], [0, 253], [0, 269], [0, 285], [0, 301], [0, 224], [0, 240], [0, 256], [0, 272], [0, 288]]]]], [328, `${spfbl}.${load}`, 91, [[[], [54, [0, 225], [0, 241], [0, 257], [0, 273], [0, 289]]]]], [329, `${spfbl}.${ef}.${load}`, 91, [[[], [54, [0, 231], [0, 247], [0, 263], [0, 279], [0, 295]]]]], [330, `${spfbl}.extinction.${mois}`, 88, [[[], [61, [0, 331], [0, 322], [0, 310]]]]], [331, `${spfbl}.extinction.${mois}Factor`, 37, [[[], [58, [0, 309], [0, 329]]]]], [332, `${spfbl}.${mois}`, 88, [[[], [57, [0, 237], [0, 253], [0, 269], [0, 285], [0, 301], [0, 226], [0, 242], [0, 258], [0, 274], [0, 290]]]]], [333, `${spfbl}.volume`, 75, [[[], [54, [0, 238], [0, 254], [0, 270], [0, 286], [0, 302]]]]], [334, `${spfbl}.${qig}`, 85, [[[], [57, [0, 237], [0, 253], [0, 269], [0, 285], [0, 301], [0, 232], [0, 248], [0, 264], [0, 280], [0, 296]]]]], [335, `${spfbl}.${rxi}`, 65, [[[], [22, [0, 336], [0, 326]]]]], [336, `${spfbl}.${rxi}Dry`, 65, [[[], [59, [0, 355], [0, 340], [0, 327], [0, 325]]]]], [337, `${spfbl}.${savr}`, 95, [[[], [57, [0, 237], [0, 253], [0, 269], [0, 285], [0, 301], [0, 227], [0, 243], [0, 259], [0, 275], [0, 291]]]]], [338, `${spfbl}.${emc}`, 83, [[[], [57, [0, 237], [0, 253], [0, 269], [0, 285], [0, 301], [0, 228], [0, 244], [0, 260], [0, 276], [0, 292]]]]], [339, `${spfbl}.${sc}.${wf}`, 125, [[[], [60, [0, 236], [0, 234], [0, 252], [0, 250], [0, 268], [0, 266], [0, 284], [0, 282], [0, 300], [0, 298]]]]], [340, `${spfbl}.net.${load}`, 91, [[[], [57, [0, 235], [0, 251], [0, 267], [0, 283], [0, 299], [0, 233], [0, 249], [0, 265], [0, 281], [0, 297]]]]], [341, `${spfb}.depth`, 75, [[[], [43, [0, 409], [0, 413], [0, 430], [0, 454], [0, 465]]]]], [342, `${spfb}.bulkDensity`, 74, [[[], [21, [0, 346], [0, 341]]]]], [343, `${spfb}.${qig}`, 76, [[[], [57, [0, 304], [0, 324], [0, 314], [0, 334]]]]], [344, `${spfb}.heatSink`, 86, [[[], [62, [0, 343], [0, 342]]]]], [345, `${spfb}.noWindNoSlope.${ros}`, 71, [[[], [63, [0, 352], [0, 351], [0, 344]]]]], [346, `${spfb}.${load}`, 91, [[[], [54, [0, 308], [0, 328]]]]], [347, `${spfb}.open.${waf}`, 127, [[[], [64, [0, 341]]]]], [348, `${spfb}.packingRatio`, 77, [[[], [65, [0, 313], [0, 333], [0, 341]]]]], [349, `${spfb}.packingRatio.optimum`, 77, [[[], [66, [0, 356]]]]], [350, `${spfb}.packingRatio.ratio`, 77, [[[], [21, [0, 348], [0, 349]]]]], [351, `${spfb}.propagatingFluxRatio`, 64, [[[], [67, [0, 356], [0, 348]]]]], [352, `${spfb}.${rxi}`, 65, [[[], [54, [0, 315], [0, 335]]]]], [353, `${spfb}.reactionVelocityExponent`, 37, [[[], [68, [0, 356]]]]], [354, `${spfb}.reactionVelocityMaximum`, 66, [[[], [69, [0, 357]]]]], [355, `${spfb}.reactionVelocityOptimum`, 66, [[[], [70, [0, 350], [0, 354], [0, 353]]]]], [356, `${spfb}.${savr}`, 95, [[[], [57, [0, 304], [0, 324], [0, 317], [0, 337]]]]], [357, `${spfb}.savr15`, 37, [[[], [71, [0, 356]]]]], [358, `${spfb}.${sa}`, 94, [[[], [54, [0, 303], [0, 323]]]]], [359, `${spff}.maximumDirection.slope.${ros}`, 71, [[[], [72, [0, 408], [0, 372]]]]], [360, `${spff}.maximumDirection.wind.${ros}`, 71, [[[], [73, [0, 408], [0, 395]]]]], [361, `${spff}.wind.heading.fromUpslope`, 40, [[[], [30, [0, 130]]]]], [362, `${spff}.maximumDirection.xComponent`, 37, [[[], [74, [0, 360], [0, 359], [0, 361]]]]], [363, `${spff}.maximumDirection.yComponent`, 37, [[[], [75, [0, 360], [0, 361]]]]], [364, `${spff}.maximumDirection.${ros}`, 71, [[[], [76, [0, 362], [0, 363]]]]], [365, `${spff}.limit.${ews}.exceeded`, 34, [[[], [77, [0, 376], [0, 367]]]]], [366, `${spff}.limit.${ros}.exceeded`, 35, [[[], [77, [0, 378], [0, 384]]]]], [367, `${spff}.limit.${ews}`, 126, [[[], [78, [0, 405]]]]], [368, `${spff}.limit.windSlopeSpreadRateCoefficient`, 37, [[[], [79, [0, 367], [0, 390], [0, 393]]]]], [369, `${spff}.limit.${ros}`, 71, [[[], [80, [0, 408], [0, 368]]]]], [370, `${spff}.slope.ratio`, 115, [[[], [30, [0, 121]]]]], [371, `${spff}.slope.k`, 37, [[[], [81, [0, 348]]]]], [372, `${spff}.slope.phi`, 37, [[[], [82, [0, 370], [0, 371]]]]], [373, `${spff}.spread.step1.${ews}`, 126, [[[], [83, [0, 374], [0, 390], [0, 394]]]]], [374, `${spff}.spread.step1.${phiew}`, 37, [[[], [84, [0, 395], [0, 372]]]]], [375, `${spff}.spread.step1.${ros}`, 71, [[[], [80, [0, 408], [0, 374]]]]], [376, `${spff}.spread.step2.${ews}`, 126, [[[], [83, [0, 377], [0, 390], [0, 394]]]]], [377, `${spff}.spread.step2.${phiew}`, 37, [[[], [85, [0, 408], [0, 378]]]]], [378, `${spff}.spread.step2.${ros}`, 71, [[[], [86, [0, 408], [0, 364]]]]], [379, `${spff}.spread.step3a.${ews}`, 126, [[[], [87, [0, 376], [0, 367]]]]], [380, `${spff}.spread.step3a.${phiew}`, 37, [[[], [87, [0, 377], [0, 368]]]]], [381, `${spff}.spread.step3a.${ros}`, 71, [[[], [87, [0, 378], [0, 369]]]]], [382, `${spff}.spread.step3b.${ews}`, 126, [[[], [83, [0, 383], [0, 390], [0, 394]]]]], [383, `${spff}.spread.step3b.${phiew}`, 37, [[[], [85, [0, 408], [0, 384]]]]], [384, `${spff}.spread.step3b.${ros}`, 71, [[[], [88, [0, 378], [0, 376]]]]], [385, `${spff}.spread.step4.${ews}`, 126, [[[], [83, [0, 386], [0, 390], [0, 394]]]]], [386, `${spff}.spread.step4.${phiew}`, 37, [[[], [85, [0, 408], [0, 387]]]]], [387, `${spff}.spread.step4.${ros}`, 71, [[[], [88, [0, 381], [0, 379]]]]], [388, `${spff}.${waf}`, 127, [[[20, 48], [30, [0, 137]]], [[], [89, [0, 51], [0, 54], [0, 347]]]]], [389, `${spff}.wind.speed.atMidflame`, 126, [[[26, 19], [30, [0, 136]]], [[], [42, [0, 135], [0, 388]]]]], [390, `${spff}.wind.factor.b`, 37, [[[], [90, [0, 356]]]]], [391, `${spff}.wind.factor.c`, 37, [[[], [91, [0, 356]]]]], [392, `${spff}.wind.factor.e`, 37, [[[], [92, [0, 356]]]]], [393, `${spff}.wind.factor.k`, 37, [[[], [93, [0, 350], [0, 392], [0, 391]]]]], [394, `${spff}.wind.factor.i`, 37, [[[], [94, [0, 350], [0, 392], [0, 391]]]]], [395, `${spff}.wind.phi`, 37, [[[], [95, [0, 389], [0, 390], [0, 393]]]]], [396, `${spff}.${ews}`, 126, [[[29, 49], [30, [0, 385]]], [[], [30, [0, 382]]]]], [397, `${spff}.${fli}`, 57, [[[], [96, [0, 407], [0, 405], [0, 399]]]]], [398, `${spff}.${fl}`, 59, [[[], [17, [0, 397]]]]], [399, `${spff}.${taur}`, 67, [[[], [97, [0, 356]]]]], [400, `${spff}.heading.fromUpslope`, 40, [[[], [98, [0, 362], [0, 363], [0, 364]]]]], [401, `${spff}.heading.fromNorth`, 40, [[[], [19, [0, 119], [0, 400]]]]], [402, `${spff}.${hpua}`, 60, [[[], [99, [0, 405], [0, 399]]]]], [403, `${spff}.${lwr}`, 61, [[[], [20, [0, 396]]]]], [404, `${spff}.${phiew}`, 37, [[[29, 49], [30, [0, 386]]], [[], [30, [0, 383]]]]], [405, `${spff}.${rxi}`, 65, [[[], [30, [0, 352]]]]], [406, `${spff}.${sh}`, 68, [[[], [100, [0, 397], [0, 389], [0, 122]]]]], [407, `${spff}.${ros}`, 71, [[[29, 49], [30, [0, 387]]], [[], [30, [0, 384]]]]], [408, `${spff}.noWindNoSlope.${ros}`, 71, [[[], [30, [0, 345]]]]], [409, `${spf}.model.domain`, 23, [[[17, 50], [101, [0, 410]]], [[17, 51], [9, [1, 51]]], [[17, 52], [9, [1, 52]]], [[17, 53], [9, [1, 53]]], [[17, 54], [9, [1, 54]]], [[], [9, [1, 55]]]]], [410, `${spf}.model.catalogKey`, 24, [[[], [2]]]], [411, `${spf}.model.behave.domain`, 23, [[[], [9, [1, 51]]]]], [412, `${spf}.${mbp}.cured.herb.fraction`, 81, [[[21, 56], [102, [0, 115]]], [[], [2]]]], [413, `${spf}.${mbp}.depth`, 75, [[[17, 50], [103, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 26]]]]], [414, `${spf}.${mbp}.dead.extinction.${mois}`, 88, [[[17, 50], [104, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 47]]]]], [415, `${spf}.${mbp}.total.herb.${load}`, 91, [[[17, 50], [105, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 16]]]]], [416, `${spf}.${mbp}.dead.tl1h.${load}`, 91, [[[17, 50], [106, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 16]]]]], [417, `${spf}.${mbp}.dead.tl10h.${load}`, 91, [[[17, 50], [107, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 16]]]]], [418, `${spf}.${mbp}.dead.tl100h.${load}`, 91, [[[17, 50], [108, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 16]]]]], [419, `${spf}.${mbp}.live.stem.${load}`, 91, [[[17, 50], [109, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 16]]]]], [420, `${spf}.${mbp}.dead.tl1h.${savr}`, 95, [[[17, 50], [110, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 16]]]]], [421, `${spf}.${mbp}.live.herb.${savr}`, 95, [[[17, 50], [111, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 8]]]]], [422, `${spf}.${mbp}.live.stem.${savr}`, 95, [[[17, 50], [112, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 8]]]]], [423, `${spf}.${mbp}.dead.${heat}`, 84, [[[17, 50], [113, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 0]]]]], [424, `${spf}.${mbp}.live.${heat}`, 84, [[[17, 50], [114, [0, 410]]], [[17, 51], [2]], [[], [9, [1, 0]]]]], [425, `${spf}.${mbd}.dead.herb.${load}`, 91, [[[], [115, [0, 415], [0, 412]]]]], [426, `${spf}.${mbd}.live.herb.${load}`, 91, [[[], [116, [0, 415], [0, 412]]]]], [427, `${spf}.model.chaparral.domain`, 23, [[[], [9, [1, 52]]]]], [428, `${spf}.${mcp}.chaparralType`, 20, [[[17, 50], [117, [0, 410]]], [[17, 52], [2]], [[], [9, [1, 57]]]]], [429, `${spf}.${mcp}.observed.deadFuelFraction`, 81, [[[17, 50], [118, [0, 410]]], [[17, 52], [2]], [[], [9, [1, 16]]]]], [430, `${spf}.${mcp}.observed.depth`, 75, [[[17, 50], [119, [0, 410]]], [[17, 52], [2]], [[], [9, [1, 26]]]]], [431, `${spf}.${mcp}.observed.totalLoad`, 91, [[[17, 50], [120, [0, 410]]], [[17, 52], [2]], [[], [9, [1, 16]]]]], [432, `${spf}.${mcp}.applied.totalLoad`, 91, [[[22, 56], [30, [0, 437]]], [[], [30, [0, 431]]]]], [433, `${spf}.${mcd}.age`, 72, [[[], [121, [0, 430], [0, 428]]]]], [434, `${spf}.${mcd}.averageMortality`, 111, [[[], [122, [0, 433]]]]], [435, `${spf}.${mcd}.severeMortality`, 111, [[[], [123, [0, 433]]]]], [436, `${spf}.${mcd}.depth`, 75, [[[], [124, [0, 433], [0, 428]]]]], [437, `${spf}.${mcd}.totalLoad`, 91, [[[], [125, [0, 433], [0, 428]]]]], [438, `${spf}.${mcd}.deadLoad`, 91, [[[], [126, [0, 432], [0, 429]]]]], [439, `${spf}.${mcd}.deadFineLoad`, 91, [[[], [127, [0, 432], [0, 429]]]]], [440, `${spf}.${mcd}.deadSmallLoad`, 91, [[[], [128, [0, 432], [0, 429]]]]], [441, `${spf}.${mcd}.deadMediumLoad`, 91, [[[], [129, [0, 432], [0, 429]]]]], [442, `${spf}.${mcd}.deadLargeLoad`, 91, [[[], [130, [0, 432], [0, 429]]]]], [443, `${spf}.${mcd}.liveLoad`, 91, [[[], [131, [0, 432], [0, 429]]]]], [444, `${spf}.${mcd}.liveFineLoad`, 91, [[[], [132, [0, 432], [0, 429]]]]], [445, `${spf}.${mcd}.liveSmallLoad`, 91, [[[], [133, [0, 432], [0, 429]]]]], [446, `${spf}.${mcd}.liveMediumLoad`, 91, [[[], [134, [0, 432], [0, 429]]]]], [447, `${spf}.${mcd}.liveLargeLoad`, 91, [[[], [135, [0, 432], [0, 429]]]]], [448, `${spf}.${mcd}.liveLeafLoad`, 91, [[[], [136, [0, 432], [0, 429]]]]], [449, `${spf}.model.palmettoGallberry.domain`, 23, [[[], [9, [1, 53]]]]], [450, `${spf}.${mpp}.age`, 72, [[[17, 50], [137, [0, 410]]], [[17, 53], [2]], [[], [9, [1, 16]]]]], [451, `${spf}.${mpp}.basalArea`, 73, [[[17, 50], [138, [0, 410]]], [[17, 53], [2]], [[], [9, [1, 16]]]]], [452, `${spf}.${mpp}.cover`, 78, [[[17, 50], [139, [0, 410]]], [[17, 53], [2]], [[], [9, [1, 16]]]]], [453, `${spf}.${mpp}.height`, 75, [[[17, 50], [140, [0, 410]]], [[17, 53], [2]], [[], [9, [1, 26]]]]], [454, `${spf}.${mpd}.depth`, 75, [[[], [141, [0, 453]]]]], [455, `${spf}.${mpd}.deadFineLoad`, 91, [[[], [142, [0, 450], [0, 453]]]]], [456, `${spf}.${mpd}.deadSmallLoad`, 91, [[[], [143, [0, 450], [0, 452]]]]], [457, `${spf}.${mpd}.deadFoliageLoad`, 91, [[[], [144, [0, 450], [0, 452]]]]], [458, `${spf}.${mpd}.deadLitterLoad`, 91, [[[], [145, [0, 450], [0, 451]]]]], [459, `${spf}.${mpd}.liveFineLoad`, 91, [[[], [146, [0, 450], [0, 453]]]]], [460, `${spf}.${mpd}.liveSmallLoad`, 91, [[[], [147, [0, 450], [0, 453]]]]], [461, `${spf}.${mpd}.liveFoliageLoad`, 91, [[[], [148, [0, 450], [0, 452], [0, 453]]]]], [462, `${spf}.model.westernAspen.domain`, 23, [[[], [9, [1, 54]]]]], [463, `${spf}.${mwp}.aspenType`, 31, [[[17, 50], [149, [0, 410]]], [[17, 54], [2]], [[], [9, [1, 58]]]]], [464, `${spf}.${mwp}.curingLevel`, 81, [[[17, 50], [150, [0, 410]]], [[17, 54], [2]], [[], [9, [1, 16]]]]], [465, `${spf}.${mwd}.depth`, 75, [[[], [151, [0, 463]]]]], [466, `${spf}.${mwd}.dead.fine.${load}`, 91, [[[], [152, [0, 463], [0, 464]]]]], [467, `${spf}.${mwd}.dead.small.${load}`, 91, [[[], [153, [0, 463]]]]], [468, `${spf}.${mwd}.dead.fine.${savr}`, 91, [[[], [154, [0, 463], [0, 464]]]]], [469, `${spf}.${mwd}.live.herb.${load}`, 91, [[[], [155, [0, 463], [0, 464]]]]], [470, `${spf}.${mwd}.live.stem.${load}`, 91, [[[], [156, [0, 463], [0, 464]]]]], [471, `${spf}.${mwd}.live.stem.${savr}`, 91, [[[], [157, [0, 463], [0, 464]]]]], [472, `${ssfbdp}1.${dens}`, 92, [[[], [43, [0, 743], [1, 20], [1, 21], [1, 22], [1, 20]]]]], [473, `${ssfbdp}1.${heat}`, 84, [[[], [43, [0, 743], [0, 757], [1, 0], [1, 23], [1, 0]]]]], [474, `${ssfbdp}1.${load}`, 91, [[[], [43, [0, 743], [0, 750], [0, 773], [0, 789], [0, 800]]]]], [475, `${ssfbdp}1.${mois}`, 88, [[[], [43, [0, 743], [0, 111], [0, 111], [0, 111], [0, 111]]]]], [476, `${ssfbdp}1.${savr}`, 95, [[[], [43, [0, 743], [0, 754], [1, 24], [1, 25], [0, 802]]]]], [477, `${ssfbdp}1.${emc}`, 83, [[[], [43, [0, 743], [1, 26], [1, 27], [1, 26], [1, 26]]]]], [478, `${ssfbdp}1.${tmc}`, 99, [[[], [43, [0, 743], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [479, `${ssfbdp}1.${ef}.${ehn}`, 82, [[[], [44, [0, 476]]]]], [480, `${ssfbdp}1.${ef}.${load}`, 91, [[[], [45, [0, 476], [0, 474], [1, 31]]]]], [481, `${ssfbdp}1.${qig}`, 85, [[[], [46, [0, 475], [0, 479]]]]], [482, `${ssfbdp}1.net.${load}`, 91, [[[], [47, [0, 474], [0, 478]]]]], [483, `${ssfbdp}1.${sc}`, 93, [[[], [48, [0, 476]]]]], [484, `${ssfbdp}1.${sc}.${wf}`, 125, [[[], [49, [0, 483], [0, 653]]]]], [485, `${ssfbdp}1.${sa}`, 94, [[[], [50, [0, 474], [0, 476], [0, 472]]]]], [486, `${ssfbdp}1.${sa}.${wf}`, 125, [[[], [51, [0, 485], [0, 637]]]]], [487, `${ssfbdp}1.volume`, 100, [[[], [52, [0, 474], [0, 472]]]]], [488, `${ssfbdp}1.${ef}.waterLoad`, 91, [[[], [53, [0, 480], [0, 475]]]]], [489, `${ssfbdp}2.${dens}`, 92, [[[], [43, [0, 743], [1, 20], [1, 21], [1, 22], [1, 20]]]]], [490, `${ssfbdp}2.${heat}`, 84, [[[], [43, [0, 743], [0, 757], [1, 0], [1, 23], [1, 0]]]]], [491, `${ssfbdp}2.${load}`, 91, [[[], [43, [0, 743], [0, 751], [0, 774], [0, 790], [0, 801]]]]], [492, `${ssfbdp}2.${mois}`, 88, [[[], [43, [0, 743], [0, 112], [0, 112], [0, 112], [0, 112]]]]], [493, `${ssfbdp}2.${savr}`, 95, [[[], [43, [0, 743], [1, 32], [1, 33], [1, 34], [1, 32]]]]], [494, `${ssfbdp}2.${emc}`, 83, [[[], [43, [0, 743], [1, 26], [1, 27], [1, 26], [1, 26]]]]], [495, `${ssfbdp}2.${tmc}`, 99, [[[], [43, [0, 743], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [496, `${ssfbdp}2.${ef}.${ehn}`, 82, [[[], [44, [0, 493]]]]], [497, `${ssfbdp}2.${ef}.${load}`, 91, [[[], [45, [0, 493], [0, 491], [1, 31]]]]], [498, `${ssfbdp}2.${qig}`, 85, [[[], [46, [0, 492], [0, 496]]]]], [499, `${ssfbdp}2.net.${load}`, 91, [[[], [47, [0, 491], [0, 495]]]]], [500, `${ssfbdp}2.${sc}`, 93, [[[], [48, [0, 493]]]]], [501, `${ssfbdp}2.${sc}.${wf}`, 125, [[[], [49, [0, 500], [0, 653]]]]], [502, `${ssfbdp}2.${sa}`, 94, [[[], [50, [0, 491], [0, 493], [0, 489]]]]], [503, `${ssfbdp}2.${sa}.${wf}`, 125, [[[], [51, [0, 502], [0, 637]]]]], [504, `${ssfbdp}2.volume`, 100, [[[], [52, [0, 491], [0, 489]]]]], [505, `${ssfbdp}2.${ef}.waterLoad`, 91, [[[], [53, [0, 497], [0, 492]]]]], [506, `${ssfbdp}3.${dens}`, 92, [[[], [43, [0, 743], [1, 20], [1, 21], [1, 22], [1, 20]]]]], [507, `${ssfbdp}3.${heat}`, 84, [[[], [43, [0, 743], [0, 757], [1, 0], [1, 23], [1, 0]]]]], [508, `${ssfbdp}3.${load}`, 91, [[[], [43, [0, 743], [0, 752], [0, 775], [0, 791], [1, 16]]]]], [509, `${ssfbdp}3.${mois}`, 88, [[[], [43, [0, 743], [0, 113], [0, 112], [0, 111], [1, 35]]]]], [510, `${ssfbdp}3.${savr}`, 95, [[[], [43, [0, 743], [1, 22], [1, 36], [1, 37], [1, 8]]]]], [511, `${ssfbdp}3.${emc}`, 83, [[[], [43, [0, 743], [1, 26], [1, 27], [1, 26], [1, 26]]]]], [512, `${ssfbdp}3.${tmc}`, 99, [[[], [43, [0, 743], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [513, `${ssfbdp}3.${ef}.${ehn}`, 82, [[[], [44, [0, 510]]]]], [514, `${ssfbdp}3.${ef}.${load}`, 91, [[[], [45, [0, 510], [0, 508], [1, 31]]]]], [515, `${ssfbdp}3.${qig}`, 85, [[[], [46, [0, 509], [0, 513]]]]], [516, `${ssfbdp}3.net.${load}`, 91, [[[], [47, [0, 508], [0, 512]]]]], [517, `${ssfbdp}3.${sc}`, 93, [[[], [48, [0, 510]]]]], [518, `${ssfbdp}3.${sc}.${wf}`, 125, [[[], [49, [0, 517], [0, 653]]]]], [519, `${ssfbdp}3.${sa}`, 94, [[[], [50, [0, 508], [0, 510], [0, 506]]]]], [520, `${ssfbdp}3.${sa}.${wf}`, 125, [[[], [51, [0, 519], [0, 637]]]]], [521, `${ssfbdp}3.volume`, 100, [[[], [52, [0, 508], [0, 506]]]]], [522, `${ssfbdp}3.${ef}.waterLoad`, 91, [[[], [53, [0, 514], [0, 509]]]]], [523, `${ssfbdp}4.${dens}`, 92, [[[], [43, [0, 743], [1, 20], [1, 21], [1, 22], [1, 20]]]]], [524, `${ssfbdp}4.${heat}`, 84, [[[], [43, [0, 743], [0, 757], [1, 0], [1, 23], [1, 0]]]]], [525, `${ssfbdp}4.${load}`, 91, [[[], [43, [0, 743], [0, 759], [0, 776], [0, 792], [1, 16]]]]], [526, `${ssfbdp}4.${mois}`, 88, [[[], [43, [0, 743], [0, 111], [0, 113], [0, 113], [1, 35]]]]], [527, `${ssfbdp}4.${savr}`, 95, [[[], [43, [0, 743], [0, 755], [1, 38], [1, 37], [1, 8]]]]], [528, `${ssfbdp}4.${emc}`, 83, [[[], [43, [0, 743], [1, 26], [1, 27], [1, 26], [1, 26]]]]], [529, `${ssfbdp}4.${tmc}`, 99, [[[], [43, [0, 743], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [530, `${ssfbdp}4.${ef}.${ehn}`, 82, [[[], [44, [0, 527]]]]], [531, `${ssfbdp}4.${ef}.${load}`, 91, [[[], [45, [0, 527], [0, 525], [1, 31]]]]], [532, `${ssfbdp}4.${qig}`, 85, [[[], [46, [0, 526], [0, 530]]]]], [533, `${ssfbdp}4.net.${load}`, 91, [[[], [47, [0, 525], [0, 529]]]]], [534, `${ssfbdp}4.${sc}`, 93, [[[], [48, [0, 527]]]]], [535, `${ssfbdp}4.${sc}.${wf}`, 125, [[[], [49, [0, 534], [0, 653]]]]], [536, `${ssfbdp}4.${sa}`, 94, [[[], [50, [0, 525], [0, 527], [0, 523]]]]], [537, `${ssfbdp}4.${sa}.${wf}`, 125, [[[], [51, [0, 536], [0, 637]]]]], [538, `${ssfbdp}4.volume`, 100, [[[], [52, [0, 525], [0, 523]]]]], [539, `${ssfbdp}4.${ef}.waterLoad`, 91, [[[], [53, [0, 531], [0, 526]]]]], [540, `${ssfbdp}5.${dens}`, 92, [[[], [9, [1, 20]]]]], [541, `${ssfbdp}5.${heat}`, 84, [[[], [9, [1, 0]]]]], [542, `${ssfbdp}5.${load}`, 91, [[[], [9, [1, 16]]]]], [543, `${ssfbdp}5.${mois}`, 88, [[[], [9, [1, 35]]]]], [544, `${ssfbdp}5.${savr}`, 95, [[[], [9, [1, 8]]]]], [545, `${ssfbdp}5.${emc}`, 83, [[[], [9, [1, 26]]]]], [546, `${ssfbdp}5.${tmc}`, 99, [[[], [9, [1, 28]]]]], [547, `${ssfbdp}5.${ef}.${ehn}`, 82, [[[], [44, [0, 544]]]]], [548, `${ssfbdp}5.${ef}.${load}`, 91, [[[], [45, [0, 544], [0, 542], [1, 31]]]]], [549, `${ssfbdp}5.${qig}`, 85, [[[], [46, [0, 543], [0, 547]]]]], [550, `${ssfbdp}5.net.${load}`, 91, [[[], [47, [0, 542], [0, 546]]]]], [551, `${ssfbdp}5.${sc}`, 93, [[[], [48, [0, 544]]]]], [552, `${ssfbdp}5.${sc}.${wf}`, 125, [[[], [49, [0, 551], [0, 653]]]]], [553, `${ssfbdp}5.${sa}`, 94, [[[], [50, [0, 542], [0, 544], [0, 540]]]]], [554, `${ssfbdp}5.${sa}.${wf}`, 125, [[[], [51, [0, 553], [0, 637]]]]], [555, `${ssfbdp}5.volume`, 100, [[[], [52, [0, 542], [0, 540]]]]], [556, `${ssfbdp}5.${ef}.waterLoad`, 91, [[[], [53, [0, 548], [0, 543]]]]], [557, `${ssfblp}1.${dens}`, 92, [[[], [43, [0, 743], [1, 20], [1, 21], [1, 21], [1, 20]]]]], [558, `${ssfblp}1.${heat}`, 84, [[[], [43, [0, 743], [0, 758], [1, 39], [1, 23], [1, 0]]]]], [559, `${ssfblp}1.${load}`, 91, [[[], [43, [0, 743], [0, 760], [0, 778], [0, 793], [0, 803]]]]], [560, `${ssfblp}1.${mois}`, 88, [[[], [43, [0, 743], [0, 115], [0, 116], [0, 116], [0, 115]]]]], [561, `${ssfblp}1.${savr}`, 95, [[[], [43, [0, 743], [0, 755], [1, 24], [1, 25], [1, 40]]]]], [562, `${ssfblp}1.${emc}`, 83, [[[], [43, [0, 743], [1, 26], [1, 27], [1, 27], [1, 26]]]]], [563, `${ssfblp}1.${tmc}`, 99, [[[], [43, [0, 743], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [564, `${ssfblp}1.${ef}.${ehn}`, 82, [[[], [44, [0, 561]]]]], [565, `${ssfblp}1.${ef}.${load}`, 91, [[[], [45, [0, 561], [0, 559], [1, 41]]]]], [566, `${ssfblp}1.${qig}`, 85, [[[], [46, [0, 560], [0, 564]]]]], [567, `${ssfblp}1.net.${load}`, 91, [[[], [47, [0, 559], [0, 563]]]]], [568, `${ssfblp}1.${sc}`, 93, [[[], [48, [0, 561]]]]], [569, `${ssfblp}1.${sc}.${wf}`, 125, [[[], [49, [0, 568], [0, 673]]]]], [570, `${ssfblp}1.${sa}`, 94, [[[], [50, [0, 559], [0, 561], [0, 557]]]]], [571, `${ssfblp}1.${sa}.${wf}`, 125, [[[], [51, [0, 570], [0, 657]]]]], [572, `${ssfblp}1.volume`, 100, [[[], [52, [0, 559], [0, 557]]]]], [573, `${ssfblp}2.${dens}`, 92, [[[], [43, [0, 743], [1, 20], [1, 21], [1, 21], [1, 20]]]]], [574, `${ssfblp}2.${heat}`, 84, [[[], [43, [0, 743], [0, 758], [1, 42], [1, 23], [1, 0]]]]], [575, `${ssfblp}2.${load}`, 91, [[[], [43, [0, 743], [0, 753], [0, 779], [0, 794], [0, 804]]]]], [576, `${ssfblp}2.${mois}`, 88, [[[], [43, [0, 743], [0, 116], [0, 116], [0, 116], [0, 116]]]]], [577, `${ssfblp}2.${savr}`, 95, [[[], [43, [0, 743], [0, 756], [1, 33], [1, 34], [0, 805]]]]], [578, `${ssfblp}2.${emc}`, 83, [[[], [43, [0, 743], [1, 26], [1, 27], [1, 27], [1, 26]]]]], [579, `${ssfblp}2.${tmc}`, 99, [[[], [43, [0, 743], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [580, `${ssfblp}2.${ef}.${ehn}`, 82, [[[], [44, [0, 577]]]]], [581, `${ssfblp}2.${ef}.${load}`, 91, [[[], [45, [0, 577], [0, 575], [1, 41]]]]], [582, `${ssfblp}2.${qig}`, 85, [[[], [46, [0, 576], [0, 580]]]]], [583, `${ssfblp}2.net.${load}`, 91, [[[], [47, [0, 575], [0, 579]]]]], [584, `${ssfblp}2.${sc}`, 93, [[[], [48, [0, 577]]]]], [585, `${ssfblp}2.${sc}.${wf}`, 125, [[[], [49, [0, 584], [0, 673]]]]], [586, `${ssfblp}2.${sa}`, 94, [[[], [50, [0, 575], [0, 577], [0, 573]]]]], [587, `${ssfblp}2.${sa}.${wf}`, 125, [[[], [51, [0, 586], [0, 657]]]]], [588, `${ssfblp}2.volume`, 100, [[[], [52, [0, 575], [0, 573]]]]], [589, `${ssfblp}3.${dens}`, 92, [[[], [43, [0, 743], [1, 20], [1, 21], [1, 21], [1, 20]]]]], [590, `${ssfblp}3.${heat}`, 84, [[[], [43, [0, 743], [0, 758], [1, 42], [1, 23], [1, 0]]]]], [591, `${ssfblp}3.${load}`, 91, [[[], [43, [0, 743], [1, 16], [0, 780], [0, 795], [1, 16]]]]], [592, `${ssfblp}3.${mois}`, 88, [[[], [43, [0, 743], [1, 35], [0, 116], [0, 116], [1, 35]]]]], [593, `${ssfblp}3.${savr}`, 95, [[[], [43, [0, 743], [1, 8], [1, 36], [1, 37], [1, 8]]]]], [594, `${ssfblp}3.${emc}`, 83, [[[], [43, [0, 743], [1, 26], [1, 27], [1, 27], [1, 26]]]]], [595, `${ssfblp}3.${tmc}`, 99, [[[], [43, [0, 743], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [596, `${ssfblp}3.${ef}.${ehn}`, 82, [[[], [44, [0, 593]]]]], [597, `${ssfblp}3.${ef}.${load}`, 91, [[[], [45, [0, 593], [0, 591], [1, 41]]]]], [598, `${ssfblp}3.${qig}`, 85, [[[], [46, [0, 592], [0, 596]]]]], [599, `${ssfblp}3.net.${load}`, 91, [[[], [47, [0, 591], [0, 595]]]]], [600, `${ssfblp}3.${sc}`, 93, [[[], [48, [0, 593]]]]], [601, `${ssfblp}3.${sc}.${wf}`, 125, [[[], [49, [0, 600], [0, 673]]]]], [602, `${ssfblp}3.${sa}`, 94, [[[], [50, [0, 591], [0, 593], [0, 589]]]]], [603, `${ssfblp}3.${sa}.${wf}`, 125, [[[], [51, [0, 602], [0, 657]]]]], [604, `${ssfblp}3.volume`, 100, [[[], [52, [0, 591], [0, 589]]]]], [605, `${ssfblp}4.${dens}`, 92, [[[], [43, [0, 743], [1, 20], [1, 21], [1, 21], [1, 20]]]]], [606, `${ssfblp}4.${heat}`, 84, [[[], [43, [0, 743], [0, 758], [1, 42], [1, 23], [1, 0]]]]], [607, `${ssfblp}4.${load}`, 91, [[[], [43, [0, 743], [1, 16], [0, 781], [1, 16], [1, 16]]]]], [608, `${ssfblp}4.${mois}`, 88, [[[], [43, [0, 743], [1, 35], [0, 116], [1, 35], [1, 35]]]]], [609, `${ssfblp}4.${savr}`, 95, [[[], [43, [0, 743], [1, 8], [1, 38], [1, 8], [1, 8]]]]], [610, `${ssfblp}4.${emc}`, 83, [[[], [43, [0, 743], [1, 26], [1, 27], [1, 27], [1, 26]]]]], [611, `${ssfblp}4.${tmc}`, 99, [[[], [43, [0, 743], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [612, `${ssfblp}4.${ef}.${ehn}`, 82, [[[], [44, [0, 609]]]]], [613, `${ssfblp}4.${ef}.${load}`, 91, [[[], [45, [0, 609], [0, 607], [1, 41]]]]], [614, `${ssfblp}4.${qig}`, 85, [[[], [46, [0, 608], [0, 612]]]]], [615, `${ssfblp}4.net.${load}`, 91, [[[], [47, [0, 607], [0, 611]]]]], [616, `${ssfblp}4.${sc}`, 93, [[[], [48, [0, 609]]]]], [617, `${ssfblp}4.${sc}.${wf}`, 125, [[[], [49, [0, 616], [0, 673]]]]], [618, `${ssfblp}4.${sa}`, 94, [[[], [50, [0, 607], [0, 609], [0, 605]]]]], [619, `${ssfblp}4.${sa}.${wf}`, 125, [[[], [51, [0, 618], [0, 657]]]]], [620, `${ssfblp}4.volume`, 100, [[[], [52, [0, 607], [0, 605]]]]], [621, `${ssfblp}5.${dens}`, 92, [[[], [43, [0, 743], [1, 20], [1, 20], [1, 21], [1, 20]]]]], [622, `${ssfblp}5.${heat}`, 84, [[[], [43, [0, 743], [0, 758], [1, 39], [1, 23], [1, 0]]]]], [623, `${ssfblp}5.${load}`, 91, [[[], [43, [0, 743], [1, 16], [0, 782], [1, 16], [1, 16]]]]], [624, `${ssfblp}5.${mois}`, 88, [[[], [43, [0, 743], [1, 35], [0, 115], [1, 35], [1, 35]]]]], [625, `${ssfblp}5.${savr}`, 95, [[[], [43, [0, 743], [1, 8], [1, 43], [1, 8], [1, 8]]]]], [626, `${ssfblp}5.${emc}`, 83, [[[], [43, [0, 743], [1, 26], [1, 44], [1, 27], [1, 26]]]]], [627, `${ssfblp}5.${tmc}`, 99, [[[], [43, [0, 743], [1, 28], [1, 29], [1, 30], [1, 29]]]]], [628, `${ssfblp}5.${ef}.${ehn}`, 82, [[[], [44, [0, 625]]]]], [629, `${ssfblp}5.${ef}.${load}`, 91, [[[], [45, [0, 625], [0, 623], [1, 41]]]]], [630, `${ssfblp}5.${qig}`, 85, [[[], [46, [0, 624], [0, 628]]]]], [631, `${ssfblp}5.net.${load}`, 91, [[[], [47, [0, 623], [0, 627]]]]], [632, `${ssfblp}5.${sc}`, 93, [[[], [48, [0, 625]]]]], [633, `${ssfblp}5.${sc}.${wf}`, 125, [[[], [49, [0, 632], [0, 673]]]]], [634, `${ssfblp}5.${sa}`, 94, [[[], [50, [0, 623], [0, 625], [0, 621]]]]], [635, `${ssfblp}5.${sa}.${wf}`, 125, [[[], [51, [0, 634], [0, 657]]]]], [636, `${ssfblp}5.volume`, 100, [[[], [52, [0, 623], [0, 621]]]]], [637, `${ssfbd}.${sa}`, 94, [[[], [54, [0, 485], [0, 502], [0, 519], [0, 536], [0, 553]]]]], [638, `${ssfbd}.${sa}.${wf}`, 125, [[[], [21, [0, 637], [0, 692]]]]], [639, `${ssfbd}.mineralDamping`, 55, [[[], [55, [0, 652]]]]], [640, `${ssfbd}.moistureDamping`, 55, [[[], [56, [0, 646], [0, 644]]]]], [641, `${ssfbd}.${heat}`, 84, [[[], [57, [0, 486], [0, 503], [0, 520], [0, 537], [0, 554], [0, 473], [0, 490], [0, 507], [0, 524], [0, 541]]]]], [642, `${ssfbd}.${load}`, 91, [[[], [54, [0, 474], [0, 491], [0, 508], [0, 525], [0, 542]]]]], [643, `${ssfbd}.${ef}.${load}`, 91, [[[], [54, [0, 480], [0, 497], [0, 514], [0, 531], [0, 548]]]]], [644, `${ssfbd}.extinction.${mois}`, 88, [[[], [43, [0, 743], [0, 748], [1, 45], [1, 46], [1, 47]]]]], [645, `${ssfbd}.extinction.${mois}Factor`, 37, [[[], [58, [0, 643], [0, 663]]]]], [646, `${ssfbd}.${mois}`, 88, [[[], [57, [0, 486], [0, 503], [0, 520], [0, 537], [0, 554], [0, 475], [0, 492], [0, 509], [0, 526], [0, 543]]]]], [647, `${ssfbd}.volume`, 75, [[[], [54, [0, 487], [0, 504], [0, 521], [0, 538], [0, 555]]]]], [648, `${ssfbd}.${qig}`, 85, [[[], [57, [0, 486], [0, 503], [0, 520], [0, 537], [0, 554], [0, 481], [0, 498], [0, 515], [0, 532], [0, 549]]]]], [649, `${ssfbd}.${rxi}`, 65, [[[], [22, [0, 650], [0, 640]]]]], [650, `${ssfbd}.${rxi}Dry`, 65, [[[], [59, [0, 689], [0, 654], [0, 641], [0, 639]]]]], [651, `${ssfbd}.${savr}`, 95, [[[], [57, [0, 486], [0, 503], [0, 520], [0, 537], [0, 554], [0, 476], [0, 493], [0, 510], [0, 527], [0, 544]]]]], [652, `${ssfbd}.${emc}`, 83, [[[], [57, [0, 486], [0, 503], [0, 520], [0, 537], [0, 554], [0, 477], [0, 494], [0, 511], [0, 528], [0, 545]]]]], [653, `${ssfbd}.${sc}.${wf}`, 125, [[[], [60, [0, 485], [0, 483], [0, 502], [0, 500], [0, 519], [0, 517], [0, 536], [0, 534], [0, 553], [0, 551]]]]], [654, `${ssfbd}.net.${load}`, 91, [[[], [57, [0, 484], [0, 501], [0, 518], [0, 535], [0, 552], [0, 482], [0, 499], [0, 516], [0, 533], [0, 550]]]]], [655, `${ssfbd}.${ef}.waterLoad`, 91, [[[], [54, [0, 488], [0, 505], [0, 522], [0, 539], [0, 556]]]]], [656, `${ssfbd}.${ef}.${mois}`, 88, [[[], [21, [0, 655], [0, 643]]]]], [657, `${ssfbl}.${sa}`, 94, [[[], [54, [0, 570], [0, 586], [0, 602], [0, 618], [0, 634]]]]], [658, `${ssfbl}.${sa}.${wf}`, 125, [[[], [21, [0, 657], [0, 692]]]]], [659, `${ssfbl}.mineralDamping`, 55, [[[], [55, [0, 672]]]]], [660, `${ssfbl}.moistureDamping`, 55, [[[], [56, [0, 666], [0, 664]]]]], [661, `${ssfbl}.${heat}`, 84, [[[], [57, [0, 571], [0, 587], [0, 603], [0, 619], [0, 635], [0, 558], [0, 574], [0, 590], [0, 606], [0, 622]]]]], [662, `${ssfbl}.${load}`, 91, [[[], [54, [0, 559], [0, 575], [0, 591], [0, 607], [0, 623]]]]], [663, `${ssfbl}.${ef}.${load}`, 91, [[[], [54, [0, 565], [0, 581], [0, 597], [0, 613], [0, 629]]]]], [664, `${ssfbl}.extinction.${mois}`, 88, [[[], [61, [0, 665], [0, 656], [0, 644]]]]], [665, `${ssfbl}.extinction.${mois}Factor`, 37, [[[], [58, [0, 643], [0, 663]]]]], [666, `${ssfbl}.${mois}`, 88, [[[], [57, [0, 571], [0, 587], [0, 603], [0, 619], [0, 635], [0, 560], [0, 576], [0, 592], [0, 608], [0, 624]]]]], [667, `${ssfbl}.volume`, 75, [[[], [54, [0, 572], [0, 588], [0, 604], [0, 620], [0, 636]]]]], [668, `${ssfbl}.${qig}`, 85, [[[], [57, [0, 571], [0, 587], [0, 603], [0, 619], [0, 635], [0, 566], [0, 582], [0, 598], [0, 614], [0, 630]]]]], [669, `${ssfbl}.${rxi}`, 65, [[[], [22, [0, 670], [0, 660]]]]], [670, `${ssfbl}.${rxi}Dry`, 65, [[[], [59, [0, 689], [0, 674], [0, 661], [0, 659]]]]], [671, `${ssfbl}.${savr}`, 95, [[[], [57, [0, 571], [0, 587], [0, 603], [0, 619], [0, 635], [0, 561], [0, 577], [0, 593], [0, 609], [0, 625]]]]], [672, `${ssfbl}.${emc}`, 83, [[[], [57, [0, 571], [0, 587], [0, 603], [0, 619], [0, 635], [0, 562], [0, 578], [0, 594], [0, 610], [0, 626]]]]], [673, `${ssfbl}.${sc}.${wf}`, 125, [[[], [60, [0, 570], [0, 568], [0, 586], [0, 584], [0, 602], [0, 600], [0, 618], [0, 616], [0, 634], [0, 632]]]]], [674, `${ssfbl}.net.${load}`, 91, [[[], [57, [0, 569], [0, 585], [0, 601], [0, 617], [0, 633], [0, 567], [0, 583], [0, 599], [0, 615], [0, 631]]]]], [675, `${ssfb}.depth`, 75, [[[], [43, [0, 743], [0, 747], [0, 764], [0, 788], [0, 799]]]]], [676, `${ssfb}.bulkDensity`, 74, [[[], [21, [0, 680], [0, 675]]]]], [677, `${ssfb}.${qig}`, 76, [[[], [57, [0, 638], [0, 658], [0, 648], [0, 668]]]]], [678, `${ssfb}.heatSink`, 86, [[[], [62, [0, 677], [0, 676]]]]], [679, `${ssfb}.noWindNoSlope.${ros}`, 71, [[[], [63, [0, 686], [0, 685], [0, 678]]]]], [680, `${ssfb}.${load}`, 91, [[[], [54, [0, 642], [0, 662]]]]], [681, `${ssfb}.open.${waf}`, 127, [[[], [64, [0, 675]]]]], [682, `${ssfb}.packingRatio`, 77, [[[], [65, [0, 647], [0, 667], [0, 675]]]]], [683, `${ssfb}.packingRatio.optimum`, 77, [[[], [66, [0, 690]]]]], [684, `${ssfb}.packingRatio.ratio`, 77, [[[], [21, [0, 682], [0, 683]]]]], [685, `${ssfb}.propagatingFluxRatio`, 64, [[[], [67, [0, 690], [0, 682]]]]], [686, `${ssfb}.${rxi}`, 65, [[[], [54, [0, 649], [0, 669]]]]], [687, `${ssfb}.reactionVelocityExponent`, 37, [[[], [68, [0, 690]]]]], [688, `${ssfb}.reactionVelocityMaximum`, 66, [[[], [69, [0, 691]]]]], [689, `${ssfb}.reactionVelocityOptimum`, 66, [[[], [70, [0, 684], [0, 688], [0, 687]]]]], [690, `${ssfb}.${savr}`, 95, [[[], [57, [0, 638], [0, 658], [0, 651], [0, 671]]]]], [691, `${ssfb}.savr15`, 37, [[[], [71, [0, 690]]]]], [692, `${ssfb}.${sa}`, 94, [[[], [54, [0, 637], [0, 657]]]]], [693, `${ssff}.maximumDirection.slope.${ros}`, 71, [[[], [72, [0, 742], [0, 706]]]]], [694, `${ssff}.maximumDirection.wind.${ros}`, 71, [[[], [73, [0, 742], [0, 729]]]]], [695, `${ssff}.wind.heading.fromUpslope`, 40, [[[], [30, [0, 130]]]]], [696, `${ssff}.maximumDirection.xComponent`, 37, [[[], [74, [0, 694], [0, 693], [0, 695]]]]], [697, `${ssff}.maximumDirection.yComponent`, 37, [[[], [75, [0, 694], [0, 695]]]]], [698, `${ssff}.maximumDirection.${ros}`, 71, [[[], [76, [0, 696], [0, 697]]]]], [699, `${ssff}.limit.${ews}.exceeded`, 34, [[[], [77, [0, 710], [0, 701]]]]], [700, `${ssff}.limit.${ros}.exceeded`, 35, [[[], [77, [0, 712], [0, 718]]]]], [701, `${ssff}.limit.${ews}`, 126, [[[], [78, [0, 739]]]]], [702, `${ssff}.limit.windSlopeSpreadRateCoefficient`, 37, [[[], [79, [0, 701], [0, 724], [0, 727]]]]], [703, `${ssff}.limit.${ros}`, 71, [[[], [80, [0, 742], [0, 702]]]]], [704, `${ssff}.slope.ratio`, 115, [[[], [30, [0, 121]]]]], [705, `${ssff}.slope.k`, 37, [[[], [81, [0, 682]]]]], [706, `${ssff}.slope.phi`, 37, [[[], [82, [0, 704], [0, 705]]]]], [707, `${ssff}.spread.step1.${ews}`, 126, [[[], [83, [0, 708], [0, 724], [0, 728]]]]], [708, `${ssff}.spread.step1.${phiew}`, 37, [[[], [84, [0, 729], [0, 706]]]]], [709, `${ssff}.spread.step1.${ros}`, 71, [[[], [80, [0, 742], [0, 708]]]]], [710, `${ssff}.spread.step2.${ews}`, 126, [[[], [83, [0, 711], [0, 724], [0, 728]]]]], [711, `${ssff}.spread.step2.${phiew}`, 37, [[[], [85, [0, 742], [0, 712]]]]], [712, `${ssff}.spread.step2.${ros}`, 71, [[[], [86, [0, 742], [0, 698]]]]], [713, `${ssff}.spread.step3a.${ews}`, 126, [[[], [87, [0, 710], [0, 701]]]]], [714, `${ssff}.spread.step3a.${phiew}`, 37, [[[], [87, [0, 711], [0, 702]]]]], [715, `${ssff}.spread.step3a.${ros}`, 71, [[[], [87, [0, 712], [0, 703]]]]], [716, `${ssff}.spread.step3b.${ews}`, 126, [[[], [83, [0, 717], [0, 724], [0, 728]]]]], [717, `${ssff}.spread.step3b.${phiew}`, 37, [[[], [85, [0, 742], [0, 718]]]]], [718, `${ssff}.spread.step3b.${ros}`, 71, [[[], [88, [0, 712], [0, 710]]]]], [719, `${ssff}.spread.step4.${ews}`, 126, [[[], [83, [0, 720], [0, 724], [0, 728]]]]], [720, `${ssff}.spread.step4.${phiew}`, 37, [[[], [85, [0, 742], [0, 721]]]]], [721, `${ssff}.spread.step4.${ros}`, 71, [[[], [88, [0, 715], [0, 713]]]]], [722, `${ssff}.${waf}`, 127, [[[20, 48], [30, [0, 137]]], [[], [89, [0, 51], [0, 54], [0, 681]]]]], [723, `${ssff}.wind.speed.atMidflame`, 126, [[[26, 19], [30, [0, 136]]], [[], [42, [0, 135], [0, 722]]]]], [724, `${ssff}.wind.factor.b`, 37, [[[], [90, [0, 690]]]]], [725, `${ssff}.wind.factor.c`, 37, [[[], [91, [0, 690]]]]], [726, `${ssff}.wind.factor.e`, 37, [[[], [92, [0, 690]]]]], [727, `${ssff}.wind.factor.k`, 37, [[[], [93, [0, 684], [0, 726], [0, 725]]]]], [728, `${ssff}.wind.factor.i`, 37, [[[], [94, [0, 684], [0, 726], [0, 725]]]]], [729, `${ssff}.wind.phi`, 37, [[[], [95, [0, 723], [0, 724], [0, 727]]]]], [730, `${ssff}.${ews}`, 126, [[[29, 49], [30, [0, 719]]], [[], [30, [0, 716]]]]], [731, `${ssff}.${fli}`, 57, [[[], [96, [0, 741], [0, 739], [0, 733]]]]], [732, `${ssff}.${fl}`, 59, [[[], [17, [0, 731]]]]], [733, `${ssff}.${taur}`, 67, [[[], [97, [0, 690]]]]], [734, `${ssff}.heading.fromUpslope`, 40, [[[], [98, [0, 696], [0, 697], [0, 698]]]]], [735, `${ssff}.heading.fromNorth`, 40, [[[], [19, [0, 119], [0, 734]]]]], [736, `${ssff}.${hpua}`, 60, [[[], [99, [0, 739], [0, 733]]]]], [737, `${ssff}.${lwr}`, 61, [[[], [20, [0, 730]]]]], [738, `${ssff}.${phiew}`, 37, [[[29, 49], [30, [0, 720]]], [[], [30, [0, 717]]]]], [739, `${ssff}.${rxi}`, 65, [[[], [30, [0, 686]]]]], [740, `${ssff}.${sh}`, 68, [[[], [100, [0, 731], [0, 723], [0, 122]]]]], [741, `${ssff}.${ros}`, 71, [[[29, 49], [30, [0, 721]]], [[], [30, [0, 718]]]]], [742, `${ssff}.noWindNoSlope.${ros}`, 71, [[[], [30, [0, 679]]]]], [743, `${ssf}.model.domain`, 23, [[[18, 50], [101, [0, 744]]], [[18, 51], [9, [1, 51]]], [[18, 52], [9, [1, 52]]], [[18, 53], [9, [1, 53]]], [[18, 54], [9, [1, 54]]], [[], [9, [1, 55]]]]], [744, `${ssf}.model.catalogKey`, 24, [[[], [2]]]], [745, `${ssf}.model.behave.domain`, 23, [[[], [9, [1, 51]]]]], [746, `${ssf}.${mbp}.cured.herb.fraction`, 81, [[[21, 56], [102, [0, 115]]], [[], [2]]]], [747, `${ssf}.${mbp}.depth`, 75, [[[18, 50], [103, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 26]]]]], [748, `${ssf}.${mbp}.dead.extinction.${mois}`, 88, [[[18, 50], [104, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 47]]]]], [749, `${ssf}.${mbp}.total.herb.${load}`, 91, [[[18, 50], [105, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 16]]]]], [750, `${ssf}.${mbp}.dead.tl1h.${load}`, 91, [[[18, 50], [106, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 16]]]]], [751, `${ssf}.${mbp}.dead.tl10h.${load}`, 91, [[[18, 50], [107, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 16]]]]], [752, `${ssf}.${mbp}.dead.tl100h.${load}`, 91, [[[18, 50], [108, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 16]]]]], [753, `${ssf}.${mbp}.live.stem.${load}`, 91, [[[18, 50], [109, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 16]]]]], [754, `${ssf}.${mbp}.dead.tl1h.${savr}`, 95, [[[18, 50], [110, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 16]]]]], [755, `${ssf}.${mbp}.live.herb.${savr}`, 95, [[[18, 50], [111, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 8]]]]], [756, `${ssf}.${mbp}.live.stem.${savr}`, 95, [[[18, 50], [112, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 8]]]]], [757, `${ssf}.${mbp}.dead.${heat}`, 84, [[[18, 50], [113, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 0]]]]], [758, `${ssf}.${mbp}.live.${heat}`, 84, [[[18, 50], [114, [0, 744]]], [[18, 51], [2]], [[], [9, [1, 0]]]]], [759, `${ssf}.${mbd}.dead.herb.${load}`, 91, [[[], [115, [0, 749], [0, 746]]]]], [760, `${ssf}.${mbd}.live.herb.${load}`, 91, [[[], [116, [0, 749], [0, 746]]]]], [761, `${ssf}.model.chaparral.domain`, 23, [[[], [9, [1, 52]]]]], [762, `${ssf}.${mcp}.chaparralType`, 20, [[[18, 50], [117, [0, 744]]], [[18, 52], [2]], [[], [9, [1, 57]]]]], [763, `${ssf}.${mcp}.observed.deadFuelFraction`, 81, [[[18, 50], [118, [0, 744]]], [[18, 52], [2]], [[], [9, [1, 16]]]]], [764, `${ssf}.${mcp}.observed.depth`, 75, [[[18, 50], [119, [0, 744]]], [[18, 52], [2]], [[], [9, [1, 26]]]]], [765, `${ssf}.${mcp}.observed.totalLoad`, 91, [[[18, 50], [120, [0, 744]]], [[18, 52], [2]], [[], [9, [1, 16]]]]], [766, `${ssf}.${mcp}.applied.totalLoad`, 91, [[[22, 56], [30, [0, 771]]], [[], [30, [0, 765]]]]], [767, `${ssf}.${mcd}.age`, 72, [[[], [121, [0, 764], [0, 762]]]]], [768, `${ssf}.${mcd}.averageMortality`, 111, [[[], [122, [0, 767]]]]], [769, `${ssf}.${mcd}.severeMortality`, 111, [[[], [123, [0, 767]]]]], [770, `${ssf}.${mcd}.depth`, 75, [[[], [124, [0, 767], [0, 762]]]]], [771, `${ssf}.${mcd}.totalLoad`, 91, [[[], [125, [0, 767], [0, 762]]]]], [772, `${ssf}.${mcd}.deadLoad`, 91, [[[], [126, [0, 766], [0, 763]]]]], [773, `${ssf}.${mcd}.deadFineLoad`, 91, [[[], [127, [0, 766], [0, 763]]]]], [774, `${ssf}.${mcd}.deadSmallLoad`, 91, [[[], [128, [0, 766], [0, 763]]]]], [775, `${ssf}.${mcd}.deadMediumLoad`, 91, [[[], [129, [0, 766], [0, 763]]]]], [776, `${ssf}.${mcd}.deadLargeLoad`, 91, [[[], [130, [0, 766], [0, 763]]]]], [777, `${ssf}.${mcd}.liveLoad`, 91, [[[], [131, [0, 766], [0, 763]]]]], [778, `${ssf}.${mcd}.liveFineLoad`, 91, [[[], [132, [0, 766], [0, 763]]]]], [779, `${ssf}.${mcd}.liveSmallLoad`, 91, [[[], [133, [0, 766], [0, 763]]]]], [780, `${ssf}.${mcd}.liveMediumLoad`, 91, [[[], [134, [0, 766], [0, 763]]]]], [781, `${ssf}.${mcd}.liveLargeLoad`, 91, [[[], [135, [0, 766], [0, 763]]]]], [782, `${ssf}.${mcd}.liveLeafLoad`, 91, [[[], [136, [0, 766], [0, 763]]]]], [783, `${ssf}.model.palmettoGallberry.domain`, 23, [[[], [9, [1, 53]]]]], [784, `${ssf}.${mpp}.age`, 72, [[[18, 50], [137, [0, 744]]], [[18, 53], [2]], [[], [9, [1, 16]]]]], [785, `${ssf}.${mpp}.basalArea`, 73, [[[18, 50], [138, [0, 744]]], [[18, 53], [2]], [[], [9, [1, 16]]]]], [786, `${ssf}.${mpp}.cover`, 78, [[[18, 50], [139, [0, 744]]], [[18, 53], [2]], [[], [9, [1, 16]]]]], [787, `${ssf}.${mpp}.height`, 75, [[[18, 50], [140, [0, 744]]], [[18, 53], [2]], [[], [9, [1, 26]]]]], [788, `${ssf}.${mpd}.depth`, 75, [[[], [141, [0, 787]]]]], [789, `${ssf}.${mpd}.deadFineLoad`, 91, [[[], [142, [0, 784], [0, 787]]]]], [790, `${ssf}.${mpd}.deadSmallLoad`, 91, [[[], [143, [0, 784], [0, 786]]]]], [791, `${ssf}.${mpd}.deadFoliageLoad`, 91, [[[], [144, [0, 784], [0, 786]]]]], [792, `${ssf}.${mpd}.deadLitterLoad`, 91, [[[], [145, [0, 784], [0, 785]]]]], [793, `${ssf}.${mpd}.liveFineLoad`, 91, [[[], [146, [0, 784], [0, 787]]]]], [794, `${ssf}.${mpd}.liveSmallLoad`, 91, [[[], [147, [0, 784], [0, 787]]]]], [795, `${ssf}.${mpd}.liveFoliageLoad`, 91, [[[], [148, [0, 784], [0, 786], [0, 787]]]]], [796, `${ssf}.model.westernAspen.domain`, 23, [[[], [9, [1, 54]]]]], [797, `${ssf}.${mwp}.aspenType`, 31, [[[18, 50], [149, [0, 744]]], [[18, 54], [2]], [[], [9, [1, 58]]]]], [798, `${ssf}.${mwp}.curingLevel`, 81, [[[18, 50], [150, [0, 744]]], [[18, 54], [2]], [[], [9, [1, 16]]]]], [799, `${ssf}.${mwd}.depth`, 75, [[[], [151, [0, 797]]]]], [800, `${ssf}.${mwd}.dead.fine.${load}`, 91, [[[], [152, [0, 797], [0, 798]]]]], [801, `${ssf}.${mwd}.dead.small.${load}`, 91, [[[], [153, [0, 797]]]]], [802, `${ssf}.${mwd}.dead.fine.${savr}`, 91, [[[], [154, [0, 797], [0, 798]]]]], [803, `${ssf}.${mwd}.live.herb.${load}`, 91, [[[], [155, [0, 797], [0, 798]]]]], [804, `${ssf}.${mwd}.live.stem.${load}`, 91, [[[], [156, [0, 797], [0, 798]]]]], [805, `${ssf}.${mwd}.live.stem.${savr}`, 91, [[[], [157, [0, 797], [0, 798]]]]], [806, `${swf}.primaryCover`, 78, [[[18, 55], [9, [1, 8]]], [[], [2]]]], [807, `${swf}.${ews}`, 126, [[[], [30, [0, 396]]]]], [808, `${swf}.heading.fromUpslope`, 40, [[[], [30, [0, 400]]]]], [809, `${swf}.heading.fromNorth`, 40, [[[], [30, [0, 401]]]]], [810, `${swf}.${lwr}`, 61, [[[], [30, [0, 403]]]]], [811, `${swf}.wind.speed.atMidflame`, 126, [[[], [30, [0, 389]]]]], [812, `${swf}.${waf}`, 127, [[[], [30, [0, 388]]]]], [813, `${swf}.${fli}`, 57, [[[18, 55], [30, [0, 397]]], [[], [158, [0, 397], [0, 731]]]]], [814, `${swf}.${fl}`, 59, [[[18, 55], [30, [0, 398]]], [[], [158, [0, 398], [0, 732]]]]], [815, `${swf}.${hpua}`, 60, [[[18, 55], [30, [0, 402]]], [[], [158, [0, 402], [0, 736]]]]], [816, `${swf}.${rxi}`, 65, [[[18, 55], [30, [0, 405]]], [[], [158, [0, 405], [0, 739]]]]], [817, `${swf}.${sh}`, 68, [[[18, 55], [30, [0, 406]]], [[], [158, [0, 406], [0, 740]]]]], [818, `${swf}.limit.${ews}.exceeded`, 34, [[[18, 55], [30, [0, 365]]], [[], [159, [0, 365], [0, 699]]]]], [819, `${swf}.limit.${ews}`, 126, [[[18, 55], [30, [0, 367]]], [[], [87, [0, 367], [0, 701]]]]], [820, `${swf}.${ros}`, 71, [[[30, 59], [30, [0, 822]]], [[30, 60], [30, [0, 823]]], [[], [30, [0, 821]]]]], [821, `${swf}.arithmeticMean.${ros}`, 71, [[[18, 55], [30, [0, 407]]], [[], [160, [0, 806], [0, 407], [0, 741]]]]], [822, `${swf}.expectedValue.${ros}`, 71, [[[18, 55], [30, [0, 407]]], [[], [161, [0, 806], [0, 407], [0, 741]]]]], [823, `${swf}.harmonicMean.${ros}`, 71, [[[18, 55], [30, [0, 407]]], [[], [162, [0, 806], [0, 407], [0, 741]]]]], [824, `${sfe}.axis.eccentricity`, 61, [[[], [163, [0, 826]]]]], [825, `${sfe}.axis.${ews}`, 126, [[[13, 61], [30, [0, 807]]], [[], [30, [0, 76]]]]], [826, `${sfe}.axis.${lwr}`, 61, [[[13, 61], [30, [0, 810]]], [[], [30, [0, 82]]]]], [827, `${sfe}.axis.major.${ros}`, 71, [[[], [164, [0, 861], [0, 847]]]]], [828, `${sfe}.axis.minor.${ros}`, 71, [[[], [165, [0, 827], [0, 826]]]]], [829, `${sfe}.axis.f.${ros}`, 71, [[[], [166, [0, 827]]]]], [830, `${sfe}.axis.g.${ros}`, 71, [[[], [167, [0, 827], [0, 847]]]]], [831, `${sfe}.axis.h.${ros}`, 71, [[[], [168, [0, 828]]]]], [832, `${sfe}.vector.fromHead`, 40, [[[31, 62], [30, [0, 87]]], [[31, 63], [18, [0, 834], [0, 888]]], [[31, 64], [18, [0, 833], [0, 889]]], [[], [18, [0, 833], [0, 889]]]]], [833, `${sfe}.vector.fromNorth`, 40, [[[31, 64], [30, [0, 88]]], [[31, 62], [19, [0, 832], [0, 889]]], [[31, 63], [19, [0, 834], [0, 119]]], [[], [19, [0, 834], [0, 119]]]]], [834, `${sfe}.vector.fromUpslope`, 40, [[[31, 63], [30, [0, 89]]], [[31, 62], [19, [0, 832], [0, 888]]], [[31, 64], [18, [0, 833], [0, 119]]], [[], [18, [0, 833], [0, 119]]]]], [835, `${sfe}.size.area`, 54, [[[], [169, [0, 836], [0, 826]]]]], [836, `${sfe}.size.length`, 70, [[[], [170, [0, 827], [0, 86]]]]], [837, `${sfe}.size.perimeter`, 70, [[[], [171, [0, 836], [0, 838]]]]], [838, `${sfe}.size.width`, 70, [[[], [170, [0, 828], [0, 86]]]]], [839, `${sfe}.map.area`, 106, [[[], [172, [0, 835], [0, 97]]]]], [840, `${sfe}.map.length`, 108, [[[], [21, [0, 836], [0, 97]]]]], [841, `${sfe}.map.perimeter`, 108, [[[], [21, [0, 837], [0, 97]]]]], [842, `${sfe}.map.width`, 108, [[[], [21, [0, 838], [0, 97]]]]], [843, `${sfe}.back.spreadDistance`, 70, [[[], [170, [0, 847], [0, 86]]]]], [844, `${sfe}.back.${fli}`, 57, [[[], [173, [0, 858], [0, 861], [0, 847]]]]], [845, `${sfe}.back.${fl}`, 59, [[[], [17, [0, 844]]]]], [846, `${sfe}.back.mapDistance`, 108, [[[], [21, [0, 843], [0, 97]]]]], [847, `${sfe}.back.${ros}`, 71, [[[], [174, [0, 861], [0, 824]]]]], [848, `${sfe}.back.${sh}`, 68, [[[], [100, [0, 844], [0, 890], [0, 122]]]]], [849, `${sfe}.back.treeMortality`, 111, [[[], [175, [0, 60], [0, 59], [0, 46], [0, 42], [0, 848]]]]], [850, `${sfe}.flank.spreadDistance`, 70, [[[], [170, [0, 854], [0, 86]]]]], [851, `${sfe}.flank.${fli}`, 57, [[[], [173, [0, 858], [0, 861], [0, 854]]]]], [852, `${sfe}.flank.${fl}`, 59, [[[], [17, [0, 851]]]]], [853, `${sfe}.flank.mapDistance`, 108, [[[], [21, [0, 850], [0, 97]]]]], [854, `${sfe}.flank.${ros}`, 71, [[[], [176, [0, 828]]]]], [855, `${sfe}.flank.${sh}`, 68, [[[], [100, [0, 851], [0, 890], [0, 122]]]]], [856, `${sfe}.flank.treeMortality`, 111, [[[], [175, [0, 60], [0, 59], [0, 46], [0, 42], [0, 855]]]]], [857, `${sfe}.head.spreadDistance`, 70, [[[], [170, [0, 861], [0, 86]]]]], [858, `${sfe}.head.${fli}`, 57, [[[13, 61], [30, [0, 813]]], [[], [30, [0, 77]]]]], [859, `${sfe}.head.${fl}`, 59, [[[13, 61], [30, [0, 814]]], [[], [30, [0, 78]]]]], [860, `${sfe}.head.mapDistance`, 108, [[[], [21, [0, 857], [0, 97]]]]], [861, `${sfe}.head.${ros}`, 71, [[[13, 61], [30, [0, 820]]], [[], [30, [0, 83]]]]], [862, `${sfe}.head.${sh}`, 68, [[[], [100, [0, 858], [0, 890], [0, 122]]]]], [863, `${sfe}.head.treeMortality`, 111, [[[], [175, [0, 60], [0, 59], [0, 46], [0, 42], [0, 862]]]]], [864, `${sfe}.psi.spreadDistance`, 70, [[[], [170, [0, 868], [0, 86]]]]], [865, `${sfe}.psi.${fli}`, 57, [[[], [173, [0, 858], [0, 861], [0, 868]]]]], [866, `${sfe}.psi.${fl}`, 59, [[[], [17, [0, 865]]]]], [867, `${sfe}.psi.mapDistance`, 108, [[[], [21, [0, 864], [0, 97]]]]], [868, `${sfe}.psi.${ros}`, 71, [[[], [177, [0, 832], [0, 829], [0, 830], [0, 831]]]]], [869, `${sfe}.psi.${sh}`, 68, [[[], [100, [0, 865], [0, 890], [0, 122]]]]], [870, `${sfe}.psi.treeMortality`, 111, [[[], [175, [0, 60], [0, 59], [0, 46], [0, 42], [0, 869]]]]], [871, `${sfe}.beta5.spreadDistance`, 70, [[[], [170, [0, 875], [0, 86]]]]], [872, `${sfe}.beta5.${fli}`, 57, [[[], [173, [0, 858], [0, 861], [0, 882]]]]], [873, `${sfe}.beta5.${fl}`, 59, [[[], [17, [0, 872]]]]], [874, `${sfe}.beta5.mapDistance`, 108, [[[], [21, [0, 871], [0, 97]]]]], [875, `${sfe}.beta5.${ros}`, 71, [[[], [30, [0, 882]]]]], [876, `${sfe}.beta5.${sh}`, 68, [[[], [100, [0, 872], [0, 890], [0, 122]]]]], [877, `${sfe}.beta5.treeMortality`, 111, [[[], [175, [0, 60], [0, 59], [0, 46], [0, 42], [0, 876]]]]], [878, `${sfe}.beta.spreadDistance`, 70, [[[], [170, [0, 882], [0, 86]]]]], [879, `${sfe}.beta.${fli}`, 57, [[[], [173, [0, 858], [0, 861], [0, 887]]]]], [880, `${sfe}.beta.${fl}`, 59, [[[], [17, [0, 879]]]]], [881, `${sfe}.beta.mapDistance`, 108, [[[], [21, [0, 878], [0, 97]]]]], [882, `${sfe}.beta.${ros}`, 71, [[[], [178, [0, 832], [0, 861], [0, 824]]]]], [883, `${sfe}.beta.${sh}`, 68, [[[], [100, [0, 879], [0, 890], [0, 122]]]]], [884, `${sfe}.beta.treeMortality`, 111, [[[], [175, [0, 60], [0, 59], [0, 46], [0, 42], [0, 883]]]]], [885, `${sfe}.beta.theta`, 40, [[[], [179, [0, 832], [0, 829], [0, 830], [0, 831]]]]], [886, `${sfe}.beta.psi`, 40, [[[], [180, [0, 885], [0, 829], [0, 831]]]]], [887, `${sfe}.beta.psiSpreadRate`, 71, [[[], [177, [0, 886], [0, 829], [0, 830], [0, 831]]]]], [888, `${sfe}.heading.fromUpslope`, 40, [[[13, 61], [30, [0, 808]]], [[], [30, [0, 79]]]]], [889, `${sfe}.heading.fromNorth`, 40, [[[], [19, [0, 119], [0, 888]]]]], [890, `${sfe}.wind.speed.atMidflame`, 126, [[[13, 61], [30, [0, 811]]], [[], [30, [0, 136]]]]], [891, `site.terrain.spotSourceLocation`, 28, [[[], [2]]]], [892, `site.terrain.ridgeValleyDistance`, 69, [[[], [2]]]], [893, `site.terrain.ridgeValleyElevation`, 70, [[[], [2]]]], [894, `${spotb}.firebrand.criticalCoverHeight`, 124, [[[], [181, [0, 895], [0, 57]]]]], [895, `${spotb}.firebrand.height`, 124, [[[], [182, [0, 900]]]]], [896, `${spotb}.firebrand.drift`, 69, [[[], [9, [1, 16]]]]], [897, `${spotb}.spotDistance.flatTerrain`, 69, [[[], [183, [0, 895], [0, 894], [0, 135]]]]], [898, `${spotb}.spotDistance.flatTerrainWithDrift`, 69, [[[], [184, [0, 897], [0, 896]]]]], [899, `${spotb}.spotDistance.mountainTerrain`, 69, [[[], [185, [0, 898], [0, 891], [0, 892], [0, 893]]]]], [900, `${spotb}.flameHeight`, 59, [[[], [2]]]], [901, `${spotc}.firebrand.criticalCoverHeight`, 124, [[[], [9, [1, 16]]]]], [902, `${spotc}.firebrand.height`, 124, [[[], [186, [0, 908]]]]], [903, `${spotc}.firebrand.drift`, 69, [[[], [187, [0, 908]]]]], [904, `${spotc}.spotDistance.flatTerrain`, 69, [[[], [188, [0, 908]]]]], [905, `${spotc}.spotDistance.flatTerrainWithDrift`, 69, [[[], [189, [0, 908]]]]], [906, `${spotc}.spotDistance.mountainTerrain`, 69, [[[], [185, [0, 905], [0, 891], [0, 892], [0, 893]]]]], [907, `${spotc}.${fli}`, 57, [[[11, 65], [30, [0, 1214]]], [[], [190, [0, 85]]]]], [908, `${spotc}.firebrandObject`, 116, [[[], [191, [0, 46], [0, 135], [0, 907]]]]], [909, `${spots}.firebrand.criticalCoverHeight`, 124, [[[], [181, [0, 911], [0, 57]]]]], [910, `${spots}.${fli}`, 57, [[[15, 61], [30, [0, 813]]], [[], [30, [0, 77]]]]], [911, `${spots}.firebrand.height`, 124, [[[], [192, [0, 910], [0, 135]]]]], [912, `${spots}.firebrand.drift`, 69, [[[], [193, [0, 911], [0, 135]]]]], [913, `${spots}.spotDistance.flatTerrain`, 69, [[[], [183, [0, 911], [0, 909], [0, 135]]]]], [914, `${spots}.spotDistance.flatTerrainWithDrift`, 69, [[[], [184, [0, 913], [0, 912]]]]], [915, `${spots}.spotDistance.mountainTerrain`, 69, [[[], [185, [0, 914], [0, 891], [0, 892], [0, 893]]]]], [916, `${spott}.firebrand.criticalCoverHeight`, 124, [[[], [181, [0, 917], [0, 57]]]]], [917, `${spott}.firebrand.height`, 124, [[[], [194, [0, 923], [0, 926], [0, 927]]]]], [918, `${spott}.firebrand.drift`, 69, [[[], [9, [1, 16]]]]], [919, `${spott}.spotDistance.flatTerrain`, 69, [[[], [183, [0, 917], [0, 916], [0, 135]]]]], [920, `${spott}.spotDistance.flatTerrainWithDrift`, 69, [[[], [184, [0, 919], [0, 918]]]]], [921, `${spott}.spotDistance.mountainTerrain`, 69, [[[], [185, [0, 920], [0, 891], [0, 892], [0, 893]]]]], [922, `${spott}.species`, 29, [[[], [2]]]], [923, `${spott}.height`, 124, [[[], [2]]]], [924, `${spott}.dbh`, 123, [[[], [2]]]], [925, `${spott}.count`, 122, [[[], [2]]]], [926, `${spott}.flameHeight`, 59, [[[], [195, [0, 922], [0, 924], [0, 925]]]]], [927, `${spott}.flameDuration`, 58, [[[], [196, [0, 922], [0, 924], [0, 925]]]]], [928, `scorch.height`, 68, [[[14, 66], [100, [0, 77], [0, 136], [0, 122]]], [[], [30, [0, 817]]]]], [929, `mortality.${sh}`, 68, [[[16, 66], [30, [0, 84]]], [[], [30, [0, 928]]]]], [930, `mortality.rate`, 111, [[[], [175, [0, 60], [0, 59], [0, 46], [0, 42], [0, 929]]]]], [931, `mortality.crownLengthScorched`, 111, [[[], [197, [0, 46], [0, 42], [0, 929]]]]], [932, `mortality.crownVolumeScorched`, 111, [[[], [198, [0, 46], [0, 42], [0, 929]]]]], [933, `${ccfbdp}1.${dens}`, 92, [[[], [9, [1, 20]]]]], [934, `${ccfbdp}1.${heat}`, 84, [[[], [9, [1, 0]]]]], [935, `${ccfbdp}1.${load}`, 91, [[[], [9, [1, 67]]]]], [936, `${ccfbdp}1.${mois}`, 88, [[[], [30, [0, 111]]]]], [937, `${ccfbdp}1.${savr}`, 95, [[[], [9, [1, 37]]]]], [938, `${ccfbdp}1.${emc}`, 83, [[[], [9, [1, 26]]]]], [939, `${ccfbdp}1.${tmc}`, 99, [[[], [9, [1, 28]]]]], [940, `${ccfbdp}2.${dens}`, 92, [[[], [9, [1, 20]]]]], [941, `${ccfbdp}2.${heat}`, 84, [[[], [9, [1, 0]]]]], [942, `${ccfbdp}2.${load}`, 91, [[[], [9, [1, 68]]]]], [943, `${ccfbdp}2.${mois}`, 88, [[[], [30, [0, 112]]]]], [944, `${ccfbdp}2.${savr}`, 95, [[[], [9, [1, 32]]]]], [945, `${ccfbdp}2.${emc}`, 83, [[[], [9, [1, 26]]]]], [946, `${ccfbdp}2.${tmc}`, 99, [[[], [9, [1, 28]]]]], [947, `${ccfbdp}3.${dens}`, 92, [[[], [9, [1, 20]]]]], [948, `${ccfbdp}3.${heat}`, 84, [[[], [9, [1, 0]]]]], [949, `${ccfbdp}3.${load}`, 91, [[[], [9, [1, 69]]]]], [950, `${ccfbdp}3.${mois}`, 88, [[[], [30, [0, 113]]]]], [951, `${ccfbdp}3.${savr}`, 95, [[[], [9, [1, 22]]]]], [952, `${ccfbdp}3.${emc}`, 83, [[[], [9, [1, 26]]]]], [953, `${ccfbdp}3.${tmc}`, 99, [[[], [9, [1, 28]]]]], [954, `${ccfbdp}4.${dens}`, 92, [[[], [9, [1, 20]]]]], [955, `${ccfbdp}4.${heat}`, 84, [[[], [9, [1, 0]]]]], [956, `${ccfbdp}4.${load}`, 91, [[[], [9, [1, 16]]]]], [957, `${ccfbdp}4.${mois}`, 88, [[[], [30, [0, 111]]]]], [958, `${ccfbdp}4.${savr}`, 95, [[[], [9, [1, 70]]]]], [959, `${ccfbdp}4.${emc}`, 83, [[[], [9, [1, 26]]]]], [960, `${ccfbdp}4.${tmc}`, 99, [[[], [9, [1, 28]]]]], [961, `${ccfbdp}5.${dens}`, 92, [[[], [9, [1, 20]]]]], [962, `${ccfbdp}5.${heat}`, 84, [[[], [9, [1, 0]]]]], [963, `${ccfbdp}5.${load}`, 91, [[[], [9, [1, 16]]]]], [964, `${ccfbdp}5.${mois}`, 88, [[[], [9, [1, 35]]]]], [965, `${ccfbdp}5.${savr}`, 95, [[[], [9, [1, 8]]]]], [966, `${ccfbdp}5.${emc}`, 83, [[[], [9, [1, 26]]]]], [967, `${ccfbdp}5.${tmc}`, 99, [[[], [9, [1, 28]]]]], [968, `${ccfblp}1.${dens}`, 92, [[[], [9, [1, 20]]]]], [969, `${ccfblp}1.${heat}`, 84, [[[], [9, [1, 0]]]]], [970, `${ccfblp}1.${load}`, 91, [[[], [9, [1, 16]]]]], [971, `${ccfblp}1.${mois}`, 88, [[[], [30, [0, 115]]]]], [972, `${ccfblp}1.${savr}`, 95, [[[], [9, [1, 70]]]]], [973, `${ccfblp}1.${emc}`, 83, [[[], [9, [1, 26]]]]], [974, `${ccfblp}1.${tmc}`, 99, [[[], [9, [1, 28]]]]], [975, `${ccfblp}2.${dens}`, 92, [[[], [9, [1, 20]]]]], [976, `${ccfblp}2.${heat}`, 84, [[[], [9, [1, 0]]]]], [977, `${ccfblp}2.${load}`, 91, [[[], [9, [1, 68]]]]], [978, `${ccfblp}2.${mois}`, 88, [[[], [30, [0, 116]]]]], [979, `${ccfblp}2.${savr}`, 95, [[[], [9, [1, 70]]]]], [980, `${ccfblp}2.${emc}`, 83, [[[], [9, [1, 26]]]]], [981, `${ccfblp}2.${tmc}`, 99, [[[], [9, [1, 28]]]]], [982, `${ccfblp}3.${dens}`, 92, [[[], [9, [1, 20]]]]], [983, `${ccfblp}3.${heat}`, 84, [[[], [9, [1, 0]]]]], [984, `${ccfblp}3.${load}`, 91, [[[], [9, [1, 16]]]]], [985, `${ccfblp}3.${mois}`, 88, [[[], [9, [1, 35]]]]], [986, `${ccfblp}3.${savr}`, 95, [[[], [9, [1, 8]]]]], [987, `${ccfblp}3.${emc}`, 83, [[[], [9, [1, 26]]]]], [988, `${ccfblp}3.${tmc}`, 99, [[[], [9, [1, 28]]]]], [989, `${ccfblp}4.${dens}`, 92, [[[], [9, [1, 20]]]]], [990, `${ccfblp}4.${heat}`, 84, [[[], [9, [1, 0]]]]], [991, `${ccfblp}4.${load}`, 91, [[[], [9, [1, 16]]]]], [992, `${ccfblp}4.${mois}`, 88, [[[], [9, [1, 35]]]]], [993, `${ccfblp}4.${savr}`, 95, [[[], [9, [1, 8]]]]], [994, `${ccfblp}4.${emc}`, 83, [[[], [9, [1, 26]]]]], [995, `${ccfblp}4.${tmc}`, 99, [[[], [9, [1, 28]]]]], [996, `${ccfblp}5.${dens}`, 92, [[[], [9, [1, 20]]]]], [997, `${ccfblp}5.${heat}`, 84, [[[], [9, [1, 0]]]]], [998, `${ccfblp}5.${load}`, 91, [[[], [9, [1, 16]]]]], [999, `${ccfblp}5.${mois}`, 88, [[[], [9, [1, 35]]]]], [1000, `${ccfblp}5.${savr}`, 95, [[[], [9, [1, 8]]]]], [1001, `${ccfblp}5.${emc}`, 83, [[[], [9, [1, 26]]]]], [1002, `${ccfblp}5.${tmc}`, 99, [[[], [9, [1, 28]]]]], [1003, `${ccfbdp}1.${ef}.${ehn}`, 82, [[[], [44, [0, 937]]]]], [1004, `${ccfbdp}1.${ef}.${load}`, 91, [[[], [45, [0, 937], [0, 935], [1, 31]]]]], [1005, `${ccfbdp}1.${qig}`, 85, [[[], [46, [0, 936], [0, 1003]]]]], [1006, `${ccfbdp}1.net.${load}`, 91, [[[], [47, [0, 935], [0, 939]]]]], [1007, `${ccfbdp}1.${sc}`, 93, [[[], [48, [0, 937]]]]], [1008, `${ccfbdp}1.${sc}.${wf}`, 125, [[[], [49, [0, 1007], [0, 1114]]]]], [1009, `${ccfbdp}1.${sa}`, 94, [[[], [50, [0, 935], [0, 937], [0, 933]]]]], [1010, `${ccfbdp}1.${sa}.${wf}`, 125, [[[], [51, [0, 1009], [0, 1098]]]]], [1011, `${ccfbdp}1.volume`, 100, [[[], [52, [0, 935], [0, 933]]]]], [1012, `${ccfbdp}1.${ef}.waterLoad`, 91, [[[], [53, [0, 1004], [0, 936]]]]], [1013, `${ccfbdp}2.${ef}.${ehn}`, 82, [[[], [44, [0, 944]]]]], [1014, `${ccfbdp}2.${ef}.${load}`, 91, [[[], [45, [0, 944], [0, 942], [1, 31]]]]], [1015, `${ccfbdp}2.${qig}`, 85, [[[], [46, [0, 943], [0, 1013]]]]], [1016, `${ccfbdp}2.net.${load}`, 91, [[[], [47, [0, 942], [0, 946]]]]], [1017, `${ccfbdp}2.${sc}`, 93, [[[], [48, [0, 944]]]]], [1018, `${ccfbdp}2.${sc}.${wf}`, 125, [[[], [49, [0, 1017], [0, 1114]]]]], [1019, `${ccfbdp}2.${sa}`, 94, [[[], [50, [0, 942], [0, 944], [0, 940]]]]], [1020, `${ccfbdp}2.${sa}.${wf}`, 125, [[[], [51, [0, 1019], [0, 1098]]]]], [1021, `${ccfbdp}2.volume`, 100, [[[], [52, [0, 942], [0, 940]]]]], [1022, `${ccfbdp}2.${ef}.waterLoad`, 91, [[[], [53, [0, 1014], [0, 943]]]]], [1023, `${ccfbdp}3.${ef}.${ehn}`, 82, [[[], [44, [0, 951]]]]], [1024, `${ccfbdp}3.${ef}.${load}`, 91, [[[], [45, [0, 951], [0, 949], [1, 31]]]]], [1025, `${ccfbdp}3.${qig}`, 85, [[[], [46, [0, 950], [0, 1023]]]]], [1026, `${ccfbdp}3.net.${load}`, 91, [[[], [47, [0, 949], [0, 953]]]]], [1027, `${ccfbdp}3.${sc}`, 93, [[[], [48, [0, 951]]]]], [1028, `${ccfbdp}3.${sc}.${wf}`, 125, [[[], [49, [0, 1027], [0, 1114]]]]], [1029, `${ccfbdp}3.${sa}`, 94, [[[], [50, [0, 949], [0, 951], [0, 947]]]]], [1030, `${ccfbdp}3.${sa}.${wf}`, 125, [[[], [51, [0, 1029], [0, 1098]]]]], [1031, `${ccfbdp}3.volume`, 100, [[[], [52, [0, 949], [0, 947]]]]], [1032, `${ccfbdp}3.${ef}.waterLoad`, 91, [[[], [53, [0, 1024], [0, 950]]]]], [1033, `${ccfbdp}4.${ef}.${ehn}`, 82, [[[], [44, [0, 958]]]]], [1034, `${ccfbdp}4.${ef}.${load}`, 91, [[[], [45, [0, 958], [0, 956], [1, 31]]]]], [1035, `${ccfbdp}4.${qig}`, 85, [[[], [46, [0, 957], [0, 1033]]]]], [1036, `${ccfbdp}4.net.${load}`, 91, [[[], [47, [0, 956], [0, 960]]]]], [1037, `${ccfbdp}4.${sc}`, 93, [[[], [48, [0, 958]]]]], [1038, `${ccfbdp}4.${sc}.${wf}`, 125, [[[], [49, [0, 1037], [0, 1114]]]]], [1039, `${ccfbdp}4.${sa}`, 94, [[[], [50, [0, 956], [0, 958], [0, 954]]]]], [1040, `${ccfbdp}4.${sa}.${wf}`, 125, [[[], [51, [0, 1039], [0, 1098]]]]], [1041, `${ccfbdp}4.volume`, 100, [[[], [52, [0, 956], [0, 954]]]]], [1042, `${ccfbdp}4.${ef}.waterLoad`, 91, [[[], [53, [0, 1034], [0, 957]]]]], [1043, `${ccfbdp}5.${ef}.${ehn}`, 82, [[[], [44, [0, 965]]]]], [1044, `${ccfbdp}5.${ef}.${load}`, 91, [[[], [45, [0, 965], [0, 963], [1, 31]]]]], [1045, `${ccfbdp}5.${qig}`, 85, [[[], [46, [0, 964], [0, 1043]]]]], [1046, `${ccfbdp}5.net.${load}`, 91, [[[], [47, [0, 963], [0, 967]]]]], [1047, `${ccfbdp}5.${sc}`, 93, [[[], [48, [0, 965]]]]], [1048, `${ccfbdp}5.${sc}.${wf}`, 125, [[[], [49, [0, 1047], [0, 1114]]]]], [1049, `${ccfbdp}5.${sa}`, 94, [[[], [50, [0, 963], [0, 965], [0, 961]]]]], [1050, `${ccfbdp}5.${sa}.${wf}`, 125, [[[], [51, [0, 1049], [0, 1098]]]]], [1051, `${ccfbdp}5.volume`, 100, [[[], [52, [0, 963], [0, 961]]]]], [1052, `${ccfbdp}5.${ef}.waterLoad`, 91, [[[], [53, [0, 1044], [0, 964]]]]], [1053, `${ccfblp}1.${ef}.${ehn}`, 82, [[[], [44, [0, 972]]]]], [1054, `${ccfblp}1.${ef}.${load}`, 91, [[[], [45, [0, 972], [0, 970], [1, 41]]]]], [1055, `${ccfblp}1.${qig}`, 85, [[[], [46, [0, 971], [0, 1053]]]]], [1056, `${ccfblp}1.net.${load}`, 91, [[[], [47, [0, 970], [0, 974]]]]], [1057, `${ccfblp}1.${sc}`, 93, [[[], [48, [0, 972]]]]], [1058, `${ccfblp}1.${sc}.${wf}`, 125, [[[], [49, [0, 1057], [0, 1134]]]]], [1059, `${ccfblp}1.${sa}`, 94, [[[], [50, [0, 970], [0, 972], [0, 968]]]]], [1060, `${ccfblp}1.${sa}.${wf}`, 125, [[[], [51, [0, 1059], [0, 1118]]]]], [1061, `${ccfblp}1.volume`, 100, [[[], [52, [0, 970], [0, 968]]]]], [1062, `${ccfblp}2.${ef}.${ehn}`, 82, [[[], [44, [0, 979]]]]], [1063, `${ccfblp}2.${ef}.${load}`, 91, [[[], [45, [0, 979], [0, 977], [1, 41]]]]], [1064, `${ccfblp}2.${qig}`, 85, [[[], [46, [0, 978], [0, 1062]]]]], [1065, `${ccfblp}2.net.${load}`, 91, [[[], [47, [0, 977], [0, 981]]]]], [1066, `${ccfblp}2.${sc}`, 93, [[[], [48, [0, 979]]]]], [1067, `${ccfblp}2.${sc}.${wf}`, 125, [[[], [49, [0, 1066], [0, 1134]]]]], [1068, `${ccfblp}2.${sa}`, 94, [[[], [50, [0, 977], [0, 979], [0, 975]]]]], [1069, `${ccfblp}2.${sa}.${wf}`, 125, [[[], [51, [0, 1068], [0, 1118]]]]], [1070, `${ccfblp}2.volume`, 100, [[[], [52, [0, 977], [0, 975]]]]], [1071, `${ccfblp}3.${ef}.${ehn}`, 82, [[[], [44, [0, 986]]]]], [1072, `${ccfblp}3.${ef}.${load}`, 91, [[[], [45, [0, 986], [0, 984], [1, 41]]]]], [1073, `${ccfblp}3.${qig}`, 85, [[[], [46, [0, 985], [0, 1071]]]]], [1074, `${ccfblp}3.net.${load}`, 91, [[[], [47, [0, 984], [0, 988]]]]], [1075, `${ccfblp}3.${sc}`, 93, [[[], [48, [0, 986]]]]], [1076, `${ccfblp}3.${sc}.${wf}`, 125, [[[], [49, [0, 1075], [0, 1134]]]]], [1077, `${ccfblp}3.${sa}`, 94, [[[], [50, [0, 984], [0, 986], [0, 982]]]]], [1078, `${ccfblp}3.${sa}.${wf}`, 125, [[[], [51, [0, 1077], [0, 1118]]]]], [1079, `${ccfblp}3.volume`, 100, [[[], [52, [0, 984], [0, 982]]]]], [1080, `${ccfblp}4.${ef}.${ehn}`, 82, [[[], [44, [0, 993]]]]], [1081, `${ccfblp}4.${ef}.${load}`, 91, [[[], [45, [0, 993], [0, 991], [1, 41]]]]], [1082, `${ccfblp}4.${qig}`, 85, [[[], [46, [0, 992], [0, 1080]]]]], [1083, `${ccfblp}4.net.${load}`, 91, [[[], [47, [0, 991], [0, 995]]]]], [1084, `${ccfblp}4.${sc}`, 93, [[[], [48, [0, 993]]]]], [1085, `${ccfblp}4.${sc}.${wf}`, 125, [[[], [49, [0, 1084], [0, 1134]]]]], [1086, `${ccfblp}4.${sa}`, 94, [[[], [50, [0, 991], [0, 993], [0, 989]]]]], [1087, `${ccfblp}4.${sa}.${wf}`, 125, [[[], [51, [0, 1086], [0, 1118]]]]], [1088, `${ccfblp}4.volume`, 100, [[[], [52, [0, 991], [0, 989]]]]], [1089, `${ccfblp}5.${ef}.${ehn}`, 82, [[[], [44, [0, 1000]]]]], [1090, `${ccfblp}5.${ef}.${load}`, 91, [[[], [45, [0, 1000], [0, 998], [1, 41]]]]], [1091, `${ccfblp}5.${qig}`, 85, [[[], [46, [0, 999], [0, 1089]]]]], [1092, `${ccfblp}5.net.${load}`, 91, [[[], [47, [0, 998], [0, 1002]]]]], [1093, `${ccfblp}5.${sc}`, 93, [[[], [48, [0, 1000]]]]], [1094, `${ccfblp}5.${sc}.${wf}`, 125, [[[], [49, [0, 1093], [0, 1134]]]]], [1095, `${ccfblp}5.${sa}`, 94, [[[], [50, [0, 998], [0, 1000], [0, 996]]]]], [1096, `${ccfblp}5.${sa}.${wf}`, 125, [[[], [51, [0, 1095], [0, 1118]]]]], [1097, `${ccfblp}5.volume`, 100, [[[], [52, [0, 998], [0, 996]]]]], [1098, `${ccfbd}.${sa}`, 94, [[[], [54, [0, 1009], [0, 1019], [0, 1029], [0, 1039], [0, 1049]]]]], [1099, `${ccfbd}.${sa}.${wf}`, 125, [[[], [21, [0, 1098], [0, 1153]]]]], [1100, `${ccfbd}.mineralDamping`, 55, [[[], [55, [0, 1113]]]]], [1101, `${ccfbd}.moistureDamping`, 55, [[[], [56, [0, 1107], [0, 1105]]]]], [1102, `${ccfbd}.${heat}`, 84, [[[], [57, [0, 1010], [0, 1020], [0, 1030], [0, 1040], [0, 1050], [0, 934], [0, 941], [0, 948], [0, 955], [0, 962]]]]], [1103, `${ccfbd}.${load}`, 91, [[[], [54, [0, 935], [0, 942], [0, 949], [0, 956], [0, 963]]]]], [1104, `${ccfbd}.${ef}.${load}`, 91, [[[], [54, [0, 1004], [0, 1014], [0, 1024], [0, 1034], [0, 1044]]]]], [1105, `${ccfbd}.extinction.${mois}`, 88, [[[], [9, [1, 47]]]]], [1106, `${ccfbd}.extinction.${mois}Factor`, 37, [[[], [58, [0, 1104], [0, 1124]]]]], [1107, `${ccfbd}.${mois}`, 88, [[[], [57, [0, 1010], [0, 1020], [0, 1030], [0, 1040], [0, 1050], [0, 936], [0, 943], [0, 950], [0, 957], [0, 964]]]]], [1108, `${ccfbd}.volume`, 75, [[[], [54, [0, 1011], [0, 1021], [0, 1031], [0, 1041], [0, 1051]]]]], [1109, `${ccfbd}.${qig}`, 85, [[[], [57, [0, 1010], [0, 1020], [0, 1030], [0, 1040], [0, 1050], [0, 1005], [0, 1015], [0, 1025], [0, 1035], [0, 1045]]]]], [1110, `${ccfbd}.${rxi}`, 65, [[[], [22, [0, 1111], [0, 1101]]]]], [1111, `${ccfbd}.${rxi}Dry`, 65, [[[], [59, [0, 1150], [0, 1115], [0, 1102], [0, 1100]]]]], [1112, `${ccfbd}.${savr}`, 95, [[[], [57, [0, 1010], [0, 1020], [0, 1030], [0, 1040], [0, 1050], [0, 937], [0, 944], [0, 951], [0, 958], [0, 965]]]]], [1113, `${ccfbd}.${emc}`, 83, [[[], [57, [0, 1010], [0, 1020], [0, 1030], [0, 1040], [0, 1050], [0, 938], [0, 945], [0, 952], [0, 959], [0, 966]]]]], [1114, `${ccfbd}.${sc}.${wf}`, 125, [[[], [60, [0, 1009], [0, 1007], [0, 1019], [0, 1017], [0, 1029], [0, 1027], [0, 1039], [0, 1037], [0, 1049], [0, 1047]]]]], [1115, `${ccfbd}.net.${load}`, 91, [[[], [57, [0, 1008], [0, 1018], [0, 1028], [0, 1038], [0, 1048], [0, 1006], [0, 1016], [0, 1026], [0, 1036], [0, 1046]]]]], [1116, `${ccfbd}.${ef}.waterLoad`, 91, [[[], [54, [0, 1012], [0, 1022], [0, 1032], [0, 1042], [0, 1052]]]]], [1117, `${ccfbd}.${ef}.${mois}`, 88, [[[], [21, [0, 1116], [0, 1104]]]]], [1118, `${ccfbl}.${sa}`, 94, [[[], [54, [0, 1059], [0, 1068], [0, 1077], [0, 1086], [0, 1095]]]]], [1119, `${ccfbl}.${sa}.${wf}`, 125, [[[], [21, [0, 1118], [0, 1153]]]]], [1120, `${ccfbl}.mineralDamping`, 55, [[[], [55, [0, 1133]]]]], [1121, `${ccfbl}.moistureDamping`, 55, [[[], [56, [0, 1127], [0, 1125]]]]], [1122, `${ccfbl}.${heat}`, 84, [[[], [57, [0, 1060], [0, 1069], [0, 1078], [0, 1087], [0, 1096], [0, 969], [0, 976], [0, 983], [0, 990], [0, 997]]]]], [1123, `${ccfbl}.${load}`, 91, [[[], [54, [0, 970], [0, 977], [0, 984], [0, 991], [0, 998]]]]], [1124, `${ccfbl}.${ef}.${load}`, 91, [[[], [54, [0, 1054], [0, 1063], [0, 1072], [0, 1081], [0, 1090]]]]], [1125, `${ccfbl}.extinction.${mois}`, 88, [[[], [61, [0, 1126], [0, 1117], [0, 1105]]]]], [1126, `${ccfbl}.extinction.${mois}Factor`, 37, [[[], [58, [0, 1104], [0, 1124]]]]], [1127, `${ccfbl}.${mois}`, 88, [[[], [57, [0, 1060], [0, 1069], [0, 1078], [0, 1087], [0, 1096], [0, 971], [0, 978], [0, 985], [0, 992], [0, 999]]]]], [1128, `${ccfbl}.volume`, 75, [[[], [54, [0, 1061], [0, 1070], [0, 1079], [0, 1088], [0, 1097]]]]], [1129, `${ccfbl}.${qig}`, 85, [[[], [57, [0, 1060], [0, 1069], [0, 1078], [0, 1087], [0, 1096], [0, 1055], [0, 1064], [0, 1073], [0, 1082], [0, 1091]]]]], [1130, `${ccfbl}.${rxi}`, 65, [[[], [22, [0, 1131], [0, 1121]]]]], [1131, `${ccfbl}.${rxi}Dry`, 65, [[[], [59, [0, 1150], [0, 1135], [0, 1122], [0, 1120]]]]], [1132, `${ccfbl}.${savr}`, 95, [[[], [57, [0, 1060], [0, 1069], [0, 1078], [0, 1087], [0, 1096], [0, 972], [0, 979], [0, 986], [0, 993], [0, 1000]]]]], [1133, `${ccfbl}.${emc}`, 83, [[[], [57, [0, 1060], [0, 1069], [0, 1078], [0, 1087], [0, 1096], [0, 973], [0, 980], [0, 987], [0, 994], [0, 1001]]]]], [1134, `${ccfbl}.${sc}.${wf}`, 125, [[[], [60, [0, 1059], [0, 1057], [0, 1068], [0, 1066], [0, 1077], [0, 1075], [0, 1086], [0, 1084], [0, 1095], [0, 1093]]]]], [1135, `${ccfbl}.net.${load}`, 91, [[[], [57, [0, 1058], [0, 1067], [0, 1076], [0, 1085], [0, 1094], [0, 1056], [0, 1065], [0, 1074], [0, 1083], [0, 1092]]]]], [1136, `${ccfb}.depth`, 75, [[[], [9, [1, 8]]]]], [1137, `${ccfb}.bulkDensity`, 74, [[[], [21, [0, 1141], [0, 1136]]]]], [1138, `${ccfb}.${qig}`, 76, [[[], [57, [0, 1099], [0, 1119], [0, 1109], [0, 1129]]]]], [1139, `${ccfb}.heatSink`, 86, [[[], [62, [0, 1138], [0, 1137]]]]], [1140, `${ccfb}.noWindNoSlope.${ros}`, 71, [[[], [63, [0, 1147], [0, 1146], [0, 1139]]]]], [1141, `${ccfb}.${load}`, 91, [[[], [54, [0, 1103], [0, 1123]]]]], [1142, `${ccfb}.open.${waf}`, 127, [[[], [64, [0, 1136]]]]], [1143, `${ccfb}.packingRatio`, 77, [[[], [65, [0, 1108], [0, 1128], [0, 1136]]]]], [1144, `${ccfb}.packingRatio.optimum`, 77, [[[], [66, [0, 1151]]]]], [1145, `${ccfb}.packingRatio.ratio`, 77, [[[], [21, [0, 1143], [0, 1144]]]]], [1146, `${ccfb}.propagatingFluxRatio`, 64, [[[], [67, [0, 1151], [0, 1143]]]]], [1147, `${ccfb}.${rxi}`, 65, [[[], [54, [0, 1110], [0, 1130]]]]], [1148, `${ccfb}.reactionVelocityExponent`, 37, [[[], [68, [0, 1151]]]]], [1149, `${ccfb}.reactionVelocityMaximum`, 66, [[[], [69, [0, 1152]]]]], [1150, `${ccfb}.reactionVelocityOptimum`, 66, [[[], [70, [0, 1145], [0, 1149], [0, 1148]]]]], [1151, `${ccfb}.${savr}`, 95, [[[], [57, [0, 1099], [0, 1119], [0, 1112], [0, 1132]]]]], [1152, `${ccfb}.savr15`, 37, [[[], [71, [0, 1151]]]]], [1153, `${ccfb}.${sa}`, 94, [[[], [54, [0, 1098], [0, 1118]]]]], [1154, `${ccff}.maximumDirection.slope.${ros}`, 71, [[[], [72, [0, 1203], [0, 1167]]]]], [1155, `${ccff}.maximumDirection.wind.${ros}`, 71, [[[], [73, [0, 1203], [0, 1190]]]]], [1156, `${ccff}.wind.heading.fromUpslope`, 40, [[[], [9, [1, 16]]]]], [1157, `${ccff}.maximumDirection.xComponent`, 37, [[[], [74, [0, 1155], [0, 1154], [0, 1156]]]]], [1158, `${ccff}.maximumDirection.yComponent`, 37, [[[], [75, [0, 1155], [0, 1156]]]]], [1159, `${ccff}.maximumDirection.${ros}`, 71, [[[], [76, [0, 1157], [0, 1158]]]]], [1160, `${ccff}.limit.${ews}.exceeded`, 34, [[[], [77, [0, 1171], [0, 1162]]]]], [1161, `${ccff}.limit.${ros}.exceeded`, 35, [[[], [77, [0, 1173], [0, 1179]]]]], [1162, `${ccff}.limit.${ews}`, 126, [[[], [78, [0, 1200]]]]], [1163, `${ccff}.limit.windSlopeSpreadRateCoefficient`, 37, [[[], [79, [0, 1162], [0, 1185], [0, 1188]]]]], [1164, `${ccff}.limit.${ros}`, 71, [[[], [80, [0, 1203], [0, 1163]]]]], [1165, `${ccff}.slope.ratio`, 115, [[[], [9, [1, 16]]]]], [1166, `${ccff}.slope.k`, 37, [[[], [81, [0, 1143]]]]], [1167, `${ccff}.slope.phi`, 37, [[[], [82, [0, 1165], [0, 1166]]]]], [1168, `${ccff}.spread.step1.${ews}`, 126, [[[], [83, [0, 1169], [0, 1185], [0, 1189]]]]], [1169, `${ccff}.spread.step1.${phiew}`, 37, [[[], [84, [0, 1190], [0, 1167]]]]], [1170, `${ccff}.spread.step1.${ros}`, 71, [[[], [80, [0, 1203], [0, 1169]]]]], [1171, `${ccff}.spread.step2.${ews}`, 126, [[[], [83, [0, 1172], [0, 1185], [0, 1189]]]]], [1172, `${ccff}.spread.step2.${phiew}`, 37, [[[], [85, [0, 1203], [0, 1173]]]]], [1173, `${ccff}.spread.step2.${ros}`, 71, [[[], [86, [0, 1203], [0, 1159]]]]], [1174, `${ccff}.spread.step3a.${ews}`, 126, [[[], [87, [0, 1171], [0, 1162]]]]], [1175, `${ccff}.spread.step3a.${phiew}`, 37, [[[], [87, [0, 1172], [0, 1163]]]]], [1176, `${ccff}.spread.step3a.${ros}`, 71, [[[], [87, [0, 1173], [0, 1164]]]]], [1177, `${ccff}.spread.step3b.${ews}`, 126, [[[], [83, [0, 1178], [0, 1185], [0, 1189]]]]], [1178, `${ccff}.spread.step3b.${phiew}`, 37, [[[], [85, [0, 1203], [0, 1179]]]]], [1179, `${ccff}.spread.step3b.${ros}`, 71, [[[], [88, [0, 1173], [0, 1171]]]]], [1180, `${ccff}.spread.step4.${ews}`, 126, [[[], [83, [0, 1181], [0, 1185], [0, 1189]]]]], [1181, `${ccff}.spread.step4.${phiew}`, 37, [[[], [85, [0, 1203], [0, 1182]]]]], [1182, `${ccff}.spread.step4.${ros}`, 71, [[[], [88, [0, 1176], [0, 1174]]]]], [1183, `${ccff}.${waf}`, 127, [[[], [9, [1, 46]]]]], [1184, `${ccff}.wind.speed.atMidflame`, 126, [[[26, 19], [30, [0, 136]]], [[], [42, [0, 135], [0, 1183]]]]], [1185, `${ccff}.wind.factor.b`, 37, [[[], [90, [0, 1151]]]]], [1186, `${ccff}.wind.factor.c`, 37, [[[], [91, [0, 1151]]]]], [1187, `${ccff}.wind.factor.e`, 37, [[[], [92, [0, 1151]]]]], [1188, `${ccff}.wind.factor.k`, 37, [[[], [93, [0, 1145], [0, 1187], [0, 1186]]]]], [1189, `${ccff}.wind.factor.i`, 37, [[[], [94, [0, 1145], [0, 1187], [0, 1186]]]]], [1190, `${ccff}.wind.phi`, 37, [[[], [95, [0, 1184], [0, 1185], [0, 1188]]]]], [1191, `${ccff}.${ews}`, 126, [[[29, 49], [30, [0, 1180]]], [[], [30, [0, 1177]]]]], [1192, `${ccff}.${fli}`, 57, [[[], [96, [0, 1202], [0, 1200], [0, 1194]]]]], [1193, `${ccff}.${fl}`, 59, [[[], [17, [0, 1192]]]]], [1194, `${ccff}.${taur}`, 67, [[[], [97, [0, 1151]]]]], [1195, `${ccff}.heading.fromUpslope`, 40, [[[], [98, [0, 1157], [0, 1158], [0, 1159]]]]], [1196, `${ccff}.heading.fromNorth`, 40, [[[], [19, [0, 119], [0, 1195]]]]], [1197, `${ccff}.${hpua}`, 60, [[[], [99, [0, 1200], [0, 1194]]]]], [1198, `${ccff}.${lwr}`, 61, [[[], [20, [0, 1191]]]]], [1199, `${ccff}.${phiew}`, 37, [[[29, 49], [30, [0, 1181]]], [[], [30, [0, 1178]]]]], [1200, `${ccff}.${rxi}`, 65, [[[], [30, [0, 1147]]]]], [1201, `${ccff}.${sh}`, 68, [[[], [100, [0, 1192], [0, 1184], [0, 122]]]]], [1202, `${ccff}.${ros}`, 71, [[[29, 49], [30, [0, 1182]]], [[], [30, [0, 1179]]]]], [1203, `${ccff}.noWindNoSlope.${ros}`, 71, [[[], [30, [0, 1140]]]]], [1204, `${cfa}.size.area`, 54, [[[], [199, [0, 1205], [0, 1212]]]]], [1205, `${cfa}.size.length`, 70, [[[], [170, [0, 1213], [0, 86]]]]], [1206, `${cfa}.size.perimeter`, 70, [[[], [200, [0, 1205], [0, 1212]]]]], [1207, `${cfa}.size.width`, 70, [[[], [21, [0, 1205], [0, 1212]]]]], [1208, `${cfa}.map.area`, 106, [[[], [172, [0, 1204], [0, 97]]]]], [1209, `${cfa}.map.length`, 108, [[[], [21, [0, 1205], [0, 97]]]]], [1210, `${cfa}.map.perimeter`, 108, [[[], [21, [0, 1206], [0, 97]]]]], [1211, `${cfa}.map.width`, 108, [[[], [21, [0, 1207], [0, 97]]]]], [1212, `${cfa}.${lwr}`, 61, [[[], [201, [0, 135]]]]], [1213, `${cfa}.${ros}`, 71, [[[], [202, [0, 1202]]]]], [1214, `${cfa}.${fli}`, 57, [[[], [203, [0, 1216], [0, 1213]]]]], [1215, `${cfa}.${fl}`, 59, [[[], [204, [0, 1214]]]]], [1216, `${cfa}.${hpua}`, 60, [[[], [205, [0, 47], [0, 1252]]]]], [1217, `${cfa}.powerOfTheFire`, 62, [[[], [206, [0, 1214]]]]], [1218, `${cfa}.powerOfTheWind`, 62, [[[], [207, [0, 135], [0, 1213]]]]], [1219, `${cfa}.powerRatio`, 63, [[[], [21, [0, 1217], [0, 1218]]]]], [1220, `${cfa}.isPlumeDominated`, 32, [[[], [208, [0, 1219]]]]], [1221, `${cfa}.isWindDriven`, 32, [[[], [209, [0, 1219]]]]], [1222, `${cff}.size.area`, 54, [[[], [199, [0, 1223], [0, 1212]]]]], [1223, `${cff}.size.length`, 70, [[[], [170, [0, 1232], [0, 86]]]]], [1224, `${cff}.size.perimeter`, 70, [[[], [200, [0, 1223], [0, 1212]]]]], [1225, `${cff}.size.width`, 70, [[[], [21, [0, 1223], [0, 1212]]]]], [1226, `${cff}.map.area`, 106, [[[], [172, [0, 1222], [0, 97]]]]], [1227, `${cff}.map.length`, 108, [[[], [21, [0, 1223], [0, 97]]]]], [1228, `${cff}.map.perimeter`, 108, [[[], [21, [0, 1224], [0, 97]]]]], [1229, `${cff}.map.width`, 108, [[[], [21, [0, 1225], [0, 97]]]]], [1230, `${cff}.rSa`, 71, [[[], [210, [0, 1248], [0, 345], [0, 388], [0, 390], [0, 393], [0, 372]]]]], [1231, `${cff}.crownFractionBurned`, 43, [[[], [211, [0, 407], [0, 1237], [0, 1230]]]]], [1232, `${cff}.${ros}`, 71, [[[], [212, [0, 407], [0, 1213], [0, 1231]]]]], [1233, `${cff}.${fli}`, 57, [[[], [213, [0, 1232], [0, 1231], [0, 47], [0, 1252]]]]], [1234, `${cff}.${fl}`, 57, [[[], [204, [0, 1233]]]]], [1235, `${cfi}.${fli}`, 57, [[[], [214, [0, 49], [0, 42]]]]], [1236, `${cfi}.${fl}`, 59, [[[], [17, [0, 1235]]]]], [1237, `${cfi}.${ros}`, 71, [[[], [215, [0, 1235], [0, 1252]]]]], [1238, `${cfi}.rPrime`, 71, [[[], [216, [0, 48]]]]], [1239, `${cfi}.transitionRatio`, 45, [[[], [217, [0, 1250], [0, 1235]]]]], [1240, `${cfi}.canTransition`, 32, [[[], [218, [0, 1239]]]]], [1241, `${cfi}.activeRatio`, 42, [[[], [219, [0, 1213], [0, 1238]]]]], [1242, `${cfi}.type`, 21, [[[], [220, [0, 1239], [0, 1241]]]]], [1243, `${cfi}.isActiveCrownFire`, 32, [[[], [221, [0, 1239], [0, 1241]]]]], [1244, `${cfi}.isCrownFire`, 32, [[[], [222, [0, 1239], [0, 1241]]]]], [1245, `${cfi}.isPassiveCrownFire`, 32, [[[], [223, [0, 1239], [0, 1241]]]]], [1246, `${cfi}.isConditionalCrownFire`, 32, [[[], [224, [0, 1239], [0, 1241]]]]], [1247, `${cfi}.isSurfaceFire`, 32, [[[], [225, [0, 1239], [0, 1241]]]]], [1248, `${cfi}.oActive`, 126, [[[], [226, [0, 48], [0, 1200], [0, 1139], [0, 1167]]]]], [1249, `${cfi}.crowningIndex`, 37, [[[], [227, [0, 1248]]]]], [1250, `crown.fire.surface.${fli}`, 57, [[[10, 61], [30, [0, 813]]], [[], [30, [0, 77]]]]], [1251, `crown.fire.surface.${fl}`, 59, [[[10, 61], [30, [0, 814]]], [[], [30, [0, 78]]]]], [1252, `crown.fire.surface.${hpua}`, 60, [[[10, 61], [30, [0, 815]]], [[], [30, [0, 81]]]]]]\n};\n\n/**\n * @file Sim class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n */\nclass Sim {\n  constructor(dagKey = null) {\n    this._genome = CompiledGenome; // Map of gene key => index into this._genome\n\n    this._geneKeyIdxMap = new Map();\n\n    this._genome.genesArray.forEach(gene => this._geneKeyIdxMap.set(gene[1], gene[0])); // Map of independent simulation DAGs based upon this._genome\n\n\n    this._dagMap = new Map();\n\n    if (dagKey !== null) {\n      this.createDag(dagKey);\n    }\n  }\n\n  _ensureKey(key) {\n    if (!this._geneKeyIdxMap.has(key)) {\n      throw new Error(`Genome has no Gene with key '${key}'`);\n    }\n\n    return this._geneKeyIdxMap.get(key);\n  }\n\n  genes() {\n    return this._genome.genesArray;\n  } // Returns the gene based on an either a numerical index arg or a string key arg\n\n\n  gene(arg) {\n    const idx = typeof arg === 'number' ? arg : this._ensureKey(arg);\n    return this._genome.genesArray[idx];\n  } // Returns the *index* of the gene based on an either a numerical index arg or a string key arg\n\n\n  geneIndex(arg) {\n    return this.gene(arg)[0];\n  }\n\n  literal(literalIdx) {\n    return this._genome.literalArgsArray[literalIdx];\n  }\n\n  method(methodIdx) {\n    return this._genome.methodRefsArray[methodIdx];\n  } // Dag methods\n\n\n  createDag(dagKey) {\n    const dag = new Dag(this);\n\n    this._dagMap.set(dagKey, dag);\n\n    return dag;\n  }\n\n  dagKeys() {\n    return Array.from(this._dagMap.keys());\n  }\n\n  deleteDag(dagKey) {\n    this._dagMap.delete(dagKey);\n  }\n\n  getDag(dagKey) {\n    return this._dagMap.get(dagKey);\n  }\n\n  hasDag(dagKey) {\n    return this._dagMap.has(dagKey);\n  }\n\n}\n\n/**\n * @file StorageNodeMap class stores results in a Map(<DagNode> => <valuesArray>)\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\nclass StorageNodeMap extends StorageAbstract {\n  constructor(dag) {\n    super(dag);\n    this._nodeArray = []; // Array of references to all DagNodes to be saved\n\n    this._valueTable = []; // first subscript is DagNode idx, second subscript is runIdx\n\n    this._valueMap = new Map(); // Map of DagNode reference => run results array\n  } // Called by Dag UpdaterClass after all runs\n\n\n  end() {\n    // Creates a Map of <dagNode> => <resultsArray>\n    for (let idx = 0; idx < this._nodeArray.length; idx++) {\n      this._valueMap.set(this._nodeArray[idx], this._valueTable[idx]);\n    }\n  }\n  /**\n   * Returns a reference to a DagNode given its reference, genome key, or genome numeric index\n   *\n   * @param {DagNode|string|number} something A DagNode reference, key, or Genome index\n   * @returns {DagNode} Reference to the passed node locator.\n   */\n\n\n  get(something, idx = -1) {\n    const node = this._dag.get(something);\n\n    return idx >= 0 ? this._valueMap.get(node)[idx] : this._valueMap.get(node);\n  }\n\n  init() {\n    this._valueMap = new Map();\n    this._valueTable = []; // first subscript is DagNode idx, second subscript is runIdx\n\n    this._nodeArray = [...this._dag.requiredInputNodes(), ...this._dag.selectedNodes()];\n\n    for (let idx = 0; idx < this._nodeArray.length; idx++) {\n      this._valueTable.push([]);\n    }\n  } // Called by Dag UpdaterClass at the end of each DAG value update traversal\n\n\n  store() {\n    for (let idx = 0; idx < this._nodeArray.length; idx++) {\n      this._valueTable[idx].push(this._nodeArray[idx].value());\n    }\n  }\n\n}\n\n/**\n * @file UpdateOrthogonalRecursive class\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\n/**\n * Generates a set of result values for all combinations of the this._dag.input values.\n *\n * For example, if fuel model has 2 input values, 1-h dead moisture has 3 input values,\n * and wind speed has 4 input values, then 2 x 3 x 4 = 24 results are generated.\n */\n\nclass UpdateOrthogonalRecursive extends UpdateAbstract {\n  constructor(dag) {\n    super(dag);\n    this._stack = [];\n    this._inputSet = new Set();\n    this._result = {};\n  }\n\n  update() {\n    this._result = {\n      runs: 0,\n      calls: 0,\n      ok: true,\n      message: ''\n    };\n    this._stack = this._dag.requiredUpdateNodes(); // All required updteable (non-Config) DagNodes in topo order\n\n    this._inputSet = new Set(); // map of input value indices\n\n    this._dag.requiredInputNodes().forEach(node => this._inputSet.add(node));\n\n    this._dag._storageClass.init();\n\n    this.recurse(0);\n\n    this._dag._storageClass.end();\n\n    return this._result;\n  }\n\n  recurse(stackIdx) {\n    if (!this._result.ok) return; // If at the end of the stack...\n\n    if (stackIdx === this._stack.length) {\n      this._dag._storageClass.store();\n\n      this._result.runs += 1;\n\n      if (this._result.runs >= this._dag._runLimit) {\n        this._result.message = `Run limit of ${this._dag._runLimit} exceeded.`;\n        this._result.ok = false;\n      }\n\n      return;\n    }\n\n    const node = this._stack[stackIdx];\n\n    if (this._inputSet.has(node)) {\n      // this is a required, non-Config input dagNode\n      this._dag._input.get(node).forEach(value => {\n        // loop over each input value\n        node._value = value;\n        this.recurse(stackIdx + 1);\n      });\n    } else {\n      node.updateValue();\n      this._result.calls++;\n      this.recurse(stackIdx + 1);\n    }\n  }\n\n}\n\n/**\n * @file Dag class public implementation\n * @copyright 2021 Systems for Environmental Management\n * @author Collin D. Bevins, <cbevins@montana.com>\n * @license MIT\n*/\n// This is a bolt-on extension of the Dag to implement BehavePlus Modules\nclass BehavePlusModules {\n  constructor(dag) {\n    this._dag = dag; // Set *this* BehavePlusModules instance as the Dag.configure() callback hook\n\n    this._dag._configureClass = this; // Define the module DagNode keys and their member DagNode key prefixes\n\n    this._modules = [['module.surfaceFire', ['surface.primary.', 'surface.secondary.', 'surface.weighted.']], ['module.surfaceSpot', ['spotting.surfaceFire.']], ['module.crownFire', ['crown.']], ['module.crownSpot', ['spotting.crownFire.']], ['module.fireEllipse', ['surface.fire.ellipse.']], ['module.fireContain', ['contain.']], ['module.scorchHeight', ['scorch.']], ['module.treeMortality', ['mortality.']], ['module.spotting', ['spotting.burningPile.', 'spotting.torchingTrees.']], ['module.ignitionProbability', ['ignition.']]]; // Define the link DagNode keys and their linkedTo* edge and consumer and producer dagNode keys\n\n    this._links = [['link.crownFire', 'linkedToSurfaceFire', 'module.crownFire', 'module.surfaceFire'], ['link.crownSpot', 'linkedToCrownFire', 'module.crownSpot', 'module.crownFire'], ['link.fireContain', 'linkedToFireEllipse', 'module.fireContain', 'module.fireEllipse'], ['link.fireEllipse', 'linkedToSurfaceFire', 'module.fireEllipse', 'module.surfaceFire'], ['link.scorchHeight', 'linkedToSurfaceFire', 'module.scorchHeight', 'module.surfaceFire'], ['link.surfaceSpot', 'linkedToSurfaceFire', 'module.surfaceSpot', 'module.surfaceFire'], ['link.treeMortality', 'linkedToScorchHeight', 'module.treeMortality', 'module.scorchHeight']];\n  } // Activate modules specified in [<moduleKeys>]\n\n\n  activate(moduleKeys) {\n    moduleKeys = Array.isArray(moduleKeys) ? moduleKeys : [moduleKeys];\n\n    this._dag.configure(moduleKeys.map(moduleKey => [moduleKey, 'active']));\n  } // Activate all 10 modules\n\n\n  activateAll() {\n    this._dag.configure(this._modules.map(mod => [mod[0], 'active']));\n  } // Called by Dag.configure() AFTER setting the passed Config DagNode values,\n  // but BEFORE calling Dag.setTopology()\n\n\n  configure() {\n    // Only link adjacent Modules if they are both active\n    this._links.forEach(([linkKey, linkedValue, consumerKey, producerKey]) => {\n      if (this._dag.node(consumerKey).value() === 'active' && this._dag.node(producerKey).value() === 'active') {\n        this._dag.node(linkKey)._value = linkedValue;\n      } else {\n        this._dag.node(linkKey)._value = 'standAlone';\n      }\n    }); // Enable/disable DagNodes based on whether their Module is active/inactive\n\n\n    this._modules.forEach(([moduleKey, prefixes]) => {\n      this._dag.setEnabled(prefixes, this._dag.node(moduleKey).value() === 'active');\n    });\n  } // De-activate modules specified in [<moduleKeys>]\n\n\n  deactivate(moduleKeys) {\n    moduleKeys = Array.isArray(moduleKeys) ? moduleKeys : [moduleKeys];\n\n    this._dag.configure(moduleKeys.map(moduleKey => [moduleKey, 'inactive']));\n  } // De-activate all 10 modules\n\n\n  deactivateAll() {\n    this._dag.configure(this._modules.map(mod => [mod[0], 'inactive']));\n  }\n\n  linkKeys() {\n    return this._links.map(link => link[0]);\n  }\n\n  linkNodes() {\n    return this._links.map(link => this._dag.node(link[0]));\n  }\n\n  moduleKeys() {\n    return this._modules.map(mod => mod[0]);\n  } // Returns an array of references to all DagNodes that are members of moduleKey\n\n\n  moduleMembers(moduleKey) {\n    const module = this._modules.find(mod => mod[0] === moduleKey);\n\n    return module === undefined ? [] : this.nodesThatStartWith(module[1]);\n  }\n\n  moduleNodes() {\n    return this._modules.map(mod => this._dag.node(mod[0]));\n  } // Returns an array of references to all DagNodes matching and of the [prefixes]\n\n\n  nodesThatStartWith(prefixes) {\n    const nodes = [];\n\n    this._dag.nodes().forEach(node => {\n      const key = node.key();\n\n      for (let idx = 0; idx < prefixes.length; idx++) {\n        if (key.startsWith(prefixes[idx])) {\n          nodes.push(node);\n          break;\n        }\n      }\n    });\n\n    return nodes;\n  }\n\n}\n\nconst columnHeaders = new Map([['key', 'Key'], ['label', 'Label'], ['index', 'Index'], ['order', 'Order'], ['displayValue', 'Display Value'], ['displayUnits', 'Display Units'], ['nativeValue', 'Native Value'], ['nativeUnits', 'Native Units'], ['variantKey', 'Variant Key']]);\nfunction nodeTable(nodes, columns, title = '') {\n  // Initialize the columns\n  const map = new Map();\n  columns.forEach(column => {\n    const hdr = columnHeaders.get(column);\n    map.set(column, {\n      hdr: hdr,\n      wid: hdr.length,\n      str: ''\n    });\n  }); // Determine column widths\n\n  nodes.forEach((node, nodeIdx) => {\n    columns.forEach((column, idx) => {\n      const col = map.get(column);\n\n      if (column === 'key') {\n        col.wid = Math.max(col.wid, node.key().length);\n      } else if (column === 'label') {\n        col.wid = Math.max(col.wid, node.label().length);\n      } else if (column === 'index') {\n        col.wid = Math.max(col.wid, nodeIdx.toString().length);\n      } else if (column === 'order') {\n        col.wid = Math.max(col.wid, node.order().toString().length);\n      } else if (column === 'displayValue') {\n        col.wid = Math.max(col.wid, node.displayValue().length);\n      } else if (column === 'nativeValue') {\n        col.wid = Math.max(col.wid, node.value().toString().length);\n      } else if (column === 'displayUnits') {\n        col.wid = Math.max(col.wid, node.displayUnits().length);\n      } else if (column === 'nativeUnits') {\n        col.wid = Math.max(col.wid, node.nativeUnits().length);\n      } else if (column === 'variantKey') {\n        col.wid = Math.max(col.wid, node.variant().key().length);\n      }\n    });\n  }); // table headers\n\n  let head = '';\n  let dash = '';\n  columns.forEach(column => {\n    const col = map.get(column);\n    head += '| ' + col.hdr.padEnd(col.wid + 1, ' ');\n    dash += '|-'.padEnd(col.wid + 3, '-');\n  });\n  dash += '|\\n';\n  head += '|\\n';\n  let ctitle = title.padStart(title.length + (dash.length - title.length - 2) / 2, ' ');\n  ctitle = `| ${ctitle.padEnd(dash.length - 4, ' ')}|\\n`;\n  let str = `+${'-'.padEnd(dash.length - 3, '-')}+\\n${ctitle}${dash}${head}${dash}`;\n  nodes.forEach((node, nodeIdx) => {\n    columns.forEach((column, idx) => {\n      const col = map.get(column);\n      let cell = '';\n\n      if (column === 'key') {\n        cell = node.key();\n      } else if (column === 'label') {\n        cell = node.label();\n      } else if (column === 'index') {\n        cell = nodeIdx.toString();\n      } else if (column === 'order') {\n        cell = node.order().toString();\n      } else if (column === 'displayValue') {\n        cell = node.displayValue();\n      } else if (column === 'nativeValue') {\n        cell = node.value().toString();\n      } else if (column === 'displayUnits') {\n        cell = node.displayUnits();\n      } else if (column === 'nativeUnits') {\n        cell = node.nativeUnits();\n      } else if (column === 'variantKey') {\n        cell = node.variant().key();\n      }\n\n      str += `| ${cell.padEnd(col.wid + 1, ' ')}`;\n    });\n    str += '|\\n';\n  });\n  return str + dash;\n}\n\nexports.BehaveFuel = BehaveFuel;\nexports.BehavePlusModules = BehavePlusModules;\nexports.Calc = Calc;\nexports.Canopy = Canopy;\nexports.ChaparralFuel = ChaparralFuel;\nexports.Compass = Compass;\nexports.CrownFire = CrownFire;\nexports.CrownSpotting = CrownSpotting;\nexports.Dag = Dag;\nexports.DagNode = DagNode;\nexports.FireEllipse = FireEllipse;\nexports.FuelBed = FuelBed;\nexports.FuelCatalog = FuelCatalog;\nexports.FuelMoisture = FuelMoisture;\nexports.FuelParticle = FuelParticle;\nexports.IgnitionProbability = IgnitionProbability$1;\nexports.PalmettoGallberryFuel = PalmettoGallberryFuel;\nexports.Sim = Sim;\nexports.Spotting = Spotting;\nexports.StorageAbstract = StorageAbstract;\nexports.StorageNodeMap = StorageNodeMap;\nexports.SurfaceFire = SurfaceFire;\nexports.TemperatureHumidity = TemperatureHumidity;\nexports.TreeMortality = TreeMortality;\nexports.UpdateAbstract = UpdateAbstract;\nexports.UpdateOrthogonalRecursive = UpdateOrthogonalRecursive;\nexports.UpdateOrthogonalStack = UpdateOrthogonalStack;\nexports.WesternAspenFuel = WesternAspenFuel;\nexports.Wind = Wind;\nexports.nodeTable = nodeTable;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticClass:\"section\"},[_vm._ssrNode(\"<div class=\\\"tile is-ancestor\\\">\",\"</div>\",[_vm._ssrNode(\"<div class=\\\"tile is-6 is-vertical is-parent\\\">\",\"</div>\",[_vm._ssrNode(\"<div class=\\\"tile is-child box\\\">\",\"</div>\",[_vm._ssrNode(\"<p class=\\\"title\\\">\\n          Site inputs\\n        </p> \"),_c('input-props',{key:\"uidinputs\",attrs:{\"node-props\":_vm.nodeProps.inputNodeProps},on:{\"change\":function($event){return _vm.runModels()}}})],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div class=\\\"tile is-child box\\\">\",\"</div>\",[_vm._ssrNode(\"<div class=\\\"level-left mb-4\\\" style=\\\"width: 100%\\\">\",\"</div>\",[_vm._ssrNode(\"<div class=\\\"level-item\\\"><p class=\\\"subtitle is-3\\\"><strong>Select fuel model</strong></p></div> \"),_vm._ssrNode(\"<div class=\\\"level-item\\\">\",\"</div>\",[_c('select-option',{attrs:{\"options\":_vm.availFuelModelStrings,\"selected\":_vm.selectedPrimaryFuelString},on:{\"updateOption\":function($event){return _vm.addFuelToSelected($event)}}})],1)],2),_vm._ssrNode(\" \"),_vm._l((_vm.selectedFuels),function(item,index){return _c('fuel-props',{key:item + index,attrs:{\"fuel-model-code\":item,\"node-props\":_vm.nodeProps.fuelNodeProps},on:{\"change\":function($event){return _vm.runModel(item)}}})})],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div class=\\\"tile is-6 is-vertical is-parent\\\">\",\"</div>\",[_vm._ssrNode(\"<div class=\\\"tile is-child box\\\">\",\"</div>\",[_c('box-plot',{attrs:{\"dataset\":_vm.dataset['surface.weighted.fire.flameLength'],\"title\":_vm.titleFlameHeight}})],1),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div class=\\\"tile is-child box\\\">\",\"</div>\",[_c('box-plot',{attrs:{\"dataset\":_vm.dataset['surface.weighted.fire.spreadRate'],\"title\":_vm.titleFireSpread}})],1)],2)],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export const nodeProps = {\n\n  outputNodeProps: [\n    {\n      geneLabel: 'surface.weighted.fire.spreadRate',\n      label: 'fireSpreadRate',\n      units: 'm/min'\n    },\n    {\n      geneLabel: 'surface.weighted.fire.flameLength',\n      label: 'fireFlameLength',\n      units: 'm'\n    }\n  ],\n\n  inputNodeProps: [\n    {\n      geneLabel: 'site.wind.speed.at10m',\n      label: 'Wind speed (m/s)',\n      units: 'm/s',\n      used: true,\n      value: 1.05,\n      max: 30,\n      step: 1\n    },\n    {\n      geneLabel: 'site.slope.steepness.degrees',\n      label: 'Slope angle (deg)',\n      units: 'deg',\n      used: true,\n      value: 10,\n      max: 100,\n      step: 1\n    },\n    {\n      geneLabel: 'site.moisture.dead.category',\n      label: 'Dead fuel moisture (%)',\n      units: '%',\n      used: true,\n      value: 10,\n      max: 100,\n      step: 1\n    },\n    {\n      geneLabel: 'site.moisture.live.category',\n      label: 'Live fuel moisture (%)',\n      units: '%',\n      used: true,\n      value: 10,\n      max: 100,\n      step: 1\n    }\n  ],\n\n  fuelNodeProps: [\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.depth',\n      label: 'Fuel depth (m)',\n      catalogParam: 'depth',\n      units: 'm',\n      used: true,\n      max: 5,\n      step: 0.1\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.live.heatOfCombustion',\n      label: 'Live fuel heat (J/kg)',\n      catalogParam: 'liveHeat',\n      units: 'J/kg',\n      used: false,\n      max: 25000000,\n      step: 100000\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.dead.heatOfCombustion',\n      label: 'Dead fuel heat (J/g)',\n      catalogParam: 'deadHeat',\n      units: 'J/kg',\n      used: true,\n      max: 25000000,\n      step: 100000\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.dead.tl1h.ovendryLoad',\n      label: 'Dead 1h load (kg/m2)',\n      catalogParam: 'dead1Load',\n      units: 'kg/m2',\n      used: true,\n      max: 10,\n      step: 0.1\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.dead.tl10h.ovendryLoad',\n      label: 'Dead 10h load (kg/m2)',\n      catalogParam: 'dead10Load',\n      units: 'kg/m2',\n      used: true,\n      max: 10,\n      step: 0.1\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.dead.tl100h.ovendryLoad',\n      label: 'Dead 100h load (kg/m2)',\n      catalogParam: 'dead100Load',\n      units: 'kg/m2',\n      used: true,\n      max: 10,\n      step: 0.1\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.dead.tl1h.surfaceAreaToVolumeRatio',\n      label: 'Dead 1h SAVR (cm2/cm3)',\n      catalogParam: 'dead1Savr',\n      units: 'cm2/cm3',\n      used: true,\n      max: 200,\n      step: 1\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.dead.extinction.moistureContent',\n      label: 'Dead ext. moist. (%)',\n      catalogParam: 'deadMext',\n      units: '%',\n      used: true,\n      max: 100,\n      step: 1\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.live.herb.surfaceAreaToVolumeRatio',\n      label: 'Live herb SAVR (cm2/cm3)',\n      catalogParam: 'liveHerbSavr',\n      units: 'cm2/cm3',\n      used: true,\n      max: 200,\n      step: 1\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.live.stem.surfaceAreaToVolumeRatio',\n      label: 'Live stem SAVR (cm2/cm3)',\n      catalogParam: 'liveStemSavr',\n      units: 'cm2/cm3',\n      used: true,\n      max: 200,\n      step: 1\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.live.stem.ovendryLoad',\n      label: 'Live stem load (kg/m2)',\n      catalogParam: 'liveStemLoad',\n      units: 'kg/m2',\n      used: true,\n      max: 2,\n      step: 0.01\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.total.herb.ovendryLoad',\n      label: 'Total herb load (kg/m2)',\n      catalogParam: 'totalHerbLoad',\n      units: 'kg/m2',\n      used: true,\n      max: 2,\n      step: 0.01\n    },\n    {\n      geneLabel: 'surface.primary.fuel.model.behave.parms.cured.herb.fraction',\n      label: 'Cured herb frac.',\n      catalogParam: '',\n      units: '%',\n      used: false,\n      max: 100,\n      step: 1\n    }\n  ]\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","import ascending from \"./ascending.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n","import max from \"./max.js\";\nimport min from \"./min.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","import quantile from \"./quantile.js\";\n\nexport default function(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { nodeProps } from '@/assets/nodeProps.js'\nimport { Sim, FuelCatalog, StorageNodeMap } from '@cbevins/fire-behavior-simulator'\nimport { min, max, median, quantile } from 'd3-array'\nimport { mapGetters } from 'vuex'\nimport FuelProps from '~/components/FuelProps'\nimport InputProps from '~/components/InputProps'\nimport SelectOption from '~/components/SelectOption'\n// import BarPlot from '~/components/BarPlot'\n// import Echars from '~/components/Echars'\nimport BoxPlot from '~/components/BoxPlot'\n\nexport default {\n  name: 'BahavePlus',\n\n  components: {\n    FuelProps,\n    InputProps,\n    SelectOption,\n    BoxPlot\n  },\n\n  data () {\n    return {\n      sim: {},\n      dag: {},\n      results: {},\n      nodeProps: {},\n      activeTab: 0,\n      availFuelModels: [],\n      numbers: [2, 4],\n      fuelModelsDisabled: true,\n      resultsObj: {},\n      dataset: {\n        'surface.weighted.fire.flameLength': {},\n        'surface.weighted.fire.spreadRate': {}\n      },\n      titleFlameHeight: {\n        text: 'Flame length (m)'\n      },\n      titleFireSpread: {\n        text: 'Fire spread rate (m/min)'\n      }\n    }\n  },\n\n  computed: {\n    ...mapGetters({\n      fuelModels: 'selector/fuelModels',\n      fuelMod: 'selector/fuelMod',\n      siteInputs: 'selector/siteInputs',\n      siteInput: 'selector/siteInput',\n      selectNodes: 'selector/selectNodes',\n      defaultDagConfig: 'selector/defaultDagConfig',\n      fuelDomain: 'selector/fuelDomain',\n      selectedFuels: 'selector/selectedFuels'\n    }),\n\n    getFlameLength () {\n      return this.dataset['surface.weighted.fire.flameLength']\n    },\n    getFuelNodes () {\n      return this.nodeProps.fuelNodeProps.filter(item => item.used === true)\n    },\n\n    getInputNodes () {\n      return this.nodeProps.inputNodeProps.filter(item => item.used === true)\n    },\n\n    getSelectedNodes () {\n      return this.dag.selectedNodes()\n    },\n\n    availFuelModelStrings () {\n      const modelStrings = []\n      this.fuelModels.forEach((element) => {\n        modelStrings.push(element.label)\n      })\n      return modelStrings\n    },\n\n    selectedPrimaryFuelString () {\n      return (this.fuelModels.filter(element => element.code === this.selectedFuels[0]))[0].label\n    },\n\n    getResults () {\n      const resul = []\n      const selNodes = this.getSelectedNodes\n      selNodes.forEach((node) => {\n        resul.push([node.label().split(' ').slice(-2), node.displayValue()])\n      })\n      return resul\n    }\n  },\n\n  created () {\n    this.nodeProps = nodeProps\n    // this.fuelCatalog = FuelCatalog\n    this.$store.dispatch('selector/initConfig')\n    this.$store.dispatch('selector/initSiteInputs', this.nodeProps.inputNodeProps)\n    this.sim = new Sim()\n    this.dag = this.sim.createDag('basicUsage')\n    this.setNodeUnits(this.nodeProps)\n    this.prepareFuels()\n    this.dag.select(this.selectNodes)\n    this.dag.configure(this.defaultDagConfig)\n    this.resultsObj = new StorageNodeMap(this.dag)\n    this.populateResults()\n    this.dag.setStorageClass(this.resultsObj)\n    this.runModels()\n  },\n\n  mounted () {\n  },\n\n  methods: {\n\n    populateResults () {\n      this.selectNodes.forEach((item) => {\n        this.results[item] = {}\n        this.dataset[item] = {}\n      })\n    },\n\n    getStats (values) {\n      if (values.length === 1) {\n        return Array(5).fill(values[0])\n      } else {\n        const vMin = min(values)\n        const vQ25 = quantile(values, 0.25)\n        const vMax = max(values)\n        const vMedian = median(values)\n        const vQ75 = quantile(values, 0.75)\n        return [vMin, vQ25, vMedian, vQ75, vMax]\n      }\n    },\n\n    getSeries (results) {\n      const res = []\n      for (const [key, val] of Object.entries(results)) {\n        if (val.length === 1) {\n          res.push({ x: key, y: Array(5).fill(val[0]) })\n        } else {\n          const stats = this.getStats(val)\n          res.push({ x: key, y: stats })\n        }\n      }\n      return [{ data: res }]\n    },\n\n    getSeriesN (results) {\n      const res = []\n      for (const [key, val] of Object.entries(results)) {\n        res.push({ x: key, y: val })\n      }\n      return [{ data: res }]\n    },\n\n    runModel (fuel) {\n      this.setFuelInputs(fuel)\n      this.setSiteInputs()\n      this.dag.run()\n      this.selectNodes.forEach((item) => {\n        console.log('run', item)\n        const node = this.dag.get(item)\n        const res = this.resultsObj.get(item)\n        const dispRes = []\n        res.forEach((item) => {\n          dispRes.push(node._variant.nativeValueToDisplayValue(item))\n        })\n        console.log('run re ', dispRes)\n        this.results[item][fuel] = this.getStats(dispRes)\n        console.log('run results ', this.results[item])\n        console.log('run dataset ', this.getSeriesN(this.results[item]))\n        this.dataset[item] = this.getSeriesN(this.results[item])\n      })\n    },\n\n    runModels () {\n      this.selectedFuels.forEach((item) => {\n        this.runModel(item)\n      })\n      // this.dataset = this.getSeries()\n    },\n\n    fuelPropChange (fuel, prop, payload) {\n\n    },\n\n    formatResults (fuel) {\n      const res = {\n        x: fuel,\n        y: []\n      }\n      return res\n    },\n\n    setNodeUnits (nodePropObject) {\n      for (const key in nodePropObject) {\n        nodePropObject[key].forEach((item) => {\n          this.dag.get(item.geneLabel)._variant.setDisplayUnits(item.units)\n        })\n      }\n    },\n\n    prepareFuels () {\n      const Ms = FuelCatalog.models().filter(item => item.domain === 'behave').slice()\n      const fuelMs = JSON.parse(JSON.stringify(Ms))\n      this.nodeProps.fuelNodeProps.forEach((fuelProp) => {\n        if (fuelProp.used === true) {\n          const node = this.dag.get(fuelProp.geneLabel)\n          fuelMs.forEach((item) => {\n            const val = node._variant.displayValue(item[fuelProp.catalogParam])\n            item[fuelProp.catalogParam] = parseFloat(val)\n          })\n        }\n      })\n      this.$store.dispatch('selector/initFuelModels', fuelMs)\n    },\n\n    /**\n     * Make an array of evenly spaced numbers between min and max\n     * values of the input array with a length of noElements param + 1\n     * @param  {Array} origArray Input array\n     * @param  {Number} noElements The second number\n     * @return {Array} values The array with evenly spaced numbers\n     */\n    makeRange (origArray, noElements) {\n      const vMax = max(origArray)\n      const vMin = min(origArray)\n      const increments = ((vMax - vMin) / noElements)\n      const values = [...Array(noElements + 1)].map((x, y) => vMin + increments * y)\n      return values\n    },\n\n    arrayToNative (node, values) {\n      const valuesNative = []\n      values.forEach((element, index) => {\n        valuesNative.push(node._variant.displayValueToNativeValue(element))\n      })\n      return valuesNative\n    },\n\n    setSiteInputs () {\n      this.siteInputs.forEach((input) => {\n        const node = this.dag.get(input.geneLabel)\n        const val = input.value\n        if (Array.isArray(val)) {\n          const values = this.makeRange(val, 4)\n          const valuesNative = this.arrayToNative(node, values)\n          this.dag.input([[node, valuesNative]])\n        } else {\n          this.dag.input([[node, node._variant.displayValueToNativeValue(val)]])\n        }\n      })\n    },\n\n    setFuelInputs (fuel) {\n      this.dag.input([['surface.primary.fuel.model.catalogKey', fuel]])\n      this.nodeProps.fuelNodeProps.forEach((fuelProp) => {\n        if (fuelProp.used) {\n          const node = this.dag.get(fuelProp.geneLabel)\n          node._is._input = true\n          const val = this.fuelMod(fuel)[fuelProp.catalogParam]\n          if (Array.isArray(val)) {\n            const values = this.makeRange(val, 9)\n            const valuesNative = this.arrayToNative(node, values)\n            this.dag.input([[node, valuesNative]])\n          } else {\n            this.dag.input([[node, node._variant.displayValueToNativeValue(val)]])\n          }\n        }\n      })\n    },\n\n    getPrimaryFuel (label) {\n      return this.fuelCatalog.models().filter(element =>\n        element.label === label\n      )[0]\n    },\n\n    getFuelCode (payload) {\n      const fuel = this.fuelModels.filter(element => element.label === payload)[0].code\n      return fuel\n    },\n\n    addFuelToSelected (selected) {\n      const fuelCode = this.getFuelCode(selected)\n      this.$store.dispatch('selector/addSelectedFuel', fuelCode)\n      this.runModels()\n    },\n\n    removeFuelFromSelected (selected) {\n      const fuelCode = this.getFuelCode(selected)\n      this.$store.dispatch('selector/removeSelectedFuel', fuelCode)\n      this.runModels()\n    },\n\n    getStoreValue (label) {\n      return parseFloat(this[label])\n    },\n\n    updateSiteInput (geneLabel, payload) {\n      this.$store.dispatch('selector/updateSiteInputsProp', { geneLabel, payload })\n      this.runModels()\n    }\n  }\n}\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=7985dcce&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"51983e73\"\n  \n)\n\nexport default component.exports\n\n/* nuxt-component-imports */\ninstallComponents(component, {InputProps: require('/home/tadas/behave/components/InputProps.vue').default,SelectOption: require('/home/tadas/behave/components/SelectOption.vue').default,FuelProps: require('/home/tadas/behave/components/FuelProps.vue').default,BoxPlot: require('/home/tadas/behave/components/BoxPlot.vue').default})\n"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAbA;AACA;AAkBA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AA9BA;;AC3BA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AAKA;;;;;;;;ACNA;AAAA;AAAA;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AANA;AACA;AAWA;AACA;AACA;AADA;AAGA;AACA;AACA;AAGA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AAvCA;;ACnDA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAGA;AADA;AACA;AAGA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA7BA;;AC1CA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrBA;AACA;AACA;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAnCA;;ACrBA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvBA;AACA;AACA;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AALA;AAWA;AACA;AACA;AACA;AACA;AAFA;AADA;AADA;AApBA;AADA;AAgCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAvDA;;ACfA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjJA;AAoJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAycnCA;AAshBA;AAmlBA;AAqaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAmnCA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAghBA;AAmhEA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAbA;AACA;AAijGA;AAwjBA;AAotFA;AAwzsDA;AAmtbA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AArCA;AAgDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxpFA;AAuFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/GA;AAktFA;AAyFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;AAikrJA;AAwkKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AAwDA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/DA;AAknBA;AAspTA;AAuTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAanSA;AAutEA;AAwnOA;AAqOA;AACA;AACA;AACA;AACA;AApTA;AAuTA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;AAgnKA;;;;;ACAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;ACnBA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;ACnBA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;AC5BA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAjBA;AAqBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;AACA;AAgvGA;;ACvEA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}